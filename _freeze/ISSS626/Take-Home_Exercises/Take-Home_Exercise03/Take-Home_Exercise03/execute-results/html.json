{
  "hash": "0cd8468e899b7f14842c0836a541f6a3",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Take Home Exercise 3b: Predicting HDB Resale Prices with Geographically Weighted Machine Learning Methods\"\nauthor: \"Pelle Knegjes\"\ndate: \"Aug 26 2024\"\ndate-modified: \"last-modified\"\nexecute: \n  eval: true\n  echo: true\n  message: false\n  freeze: true\n---\n\n\n## **Setting the Scene**\n\nHousing is an essential component of household wealth worldwide. Buying a housing has always been a major investment for most people. The price of housing is affected by many factors. Some of them are global in nature such as the general economy of a country or inflation rate. Others can be more specific to the properties themselves. These factors can be further divided to structural and locational factors. Structural factors are variables related to the property themselves such as the size, fitting, and tenure of the property. Locational factors are variables related to the neighbourhood of the properties such as proximity to childcare centre, public transport service and shopping centre.\n\nConventional, housing resale prices predictive models were built by using Ordinary Least Square (OLS) method. However, this method failed to take into consideration that spatial autocorrelation and spatial heterogeneity exist in geographic data sets such as housing transactions. With the existence of spatial autocorrelation, the OLS estimation of predictive housing resale pricing models could lead to biased, inconsistent, or inefficient results (Anselin 1998). In view of this limitation, **Geographical Weighted Models** were introduced to better calibrate predictive models for housing resale prices.\n\n## **The Task**\n\nIn this take-home exercise, you are required to calibrate a predictive model to predict HDB resale prices between July-September 2024 by using HDB resale transaction records in 2023.\n\n## **The Data**\n\nFor the purpose of this take-home exercise, **HDB Resale Flat Prices** provided by [**Data.gov.sg**](https://isss626-ay2024-25aug.netlify.app/take-home_ex03b) should be used as the core data set. The study should focus on either three-room, four-room or five-room flat.\n\nBelow is a list of recommended predictors to consider. However, students are free to include other appropriate independent variables.\n\n-   Structural factors\n\n    -   Area of the unit\n\n    -   Floor level\n\n    -   Remaining lease\n\n    -   Age of the unit\n\n    -   Main Upgrading Program (MUP) completed (optional)\n\n-   Locational factors\n\n    -   Proxomity to CBD\n\n    -   Proximity to eldercare\n\n    -   Proximity to foodcourt/hawker centres\n\n    -   Proximity to MRT\n\n    -   Proximity to park\n\n    -   Proximity to good primary school\n\n    -   Proximity to shopping mall\n\n    -   Proximity to supermarket\n\n    -   Numbers of kindergartens within 350m\n\n    -   Numbers of childcare centres within 350m\n\n    -   Numbers of bus stop within 350m\n\n    -   Numbers of primary school within 1km\n\n\n## Data Wrangling\n\nFirst we want to load the following packages to achieve our task:\n\n- sf\n- spdep\n- GWmodel\n- SpatialML\n- tmap\n- rsample\n- Metrics\n- tidyverse\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf, spdep, GWmodel, SpatialML, \n               tmap, rsample, Metrics, tidyverse, ClustGeo, \n               ggpubr, cluster, factoextra, NbClust,\n               heatmaply, corrplot, psych, GGally, spdep, tmap, sfdep, plotly, Kendall, SpatialAcc, ggstatsplot, reshape2,httr, jsonlite, rvest)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nresale <- read_csv(\"data/aspatial/ResaleflatpricesbasedonregistrationdatefromJan-2017onwards.csv\") %>%\n  filter(month >= \"2023-01\" & month <= \"2024-09\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 192613 Columns: 11\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (8): month, town, flat_type, block, street_name, storey_range, flat_mode...\ndbl (3): floor_area_sqm, lease_commence_date, resale_price\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nresale_tidy <- resale %>%\n  mutate(address = paste(block,street_name)) %>%\n  mutate(remaining_lease_yr = as.integer(\n    str_sub(remaining_lease, 0, 2)))%>%\n  mutate(remaining_lease_mth = as.integer(\n    str_sub(remaining_lease, 9, 11)))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nresale_selected <- resale_tidy #%>%\n  #filter(month == \"2024-09\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nadd_list <- sort(unique(resale_selected$address))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nget_coords <- function(add_list){\n  \n  # Create a data frame to store all retrieved coordinates\n  postal_coords <- data.frame()\n    \n  for (i in add_list){\n    #print(i)\n\n    r <- GET('https://www.onemap.gov.sg/api/common/elastic/search?',\n           query=list(searchVal=i,\n                     returnGeom='Y',\n                     getAddrDetails='Y'))\n    data <- fromJSON(rawToChar(r$content))\n    found <- data$found\n    res <- data$results\n    \n    # Create a new data frame for each address\n    new_row <- data.frame()\n    \n    # If single result, append \n    if (found == 1){\n      postal <- res$POSTAL \n      lat <- res$LATITUDE\n      lng <- res$LONGITUDE\n      new_row <- data.frame(address= i, \n                            postal = postal, \n                            latitude = lat, \n                            longitude = lng)\n    }\n    \n    # If multiple results, drop NIL and append top 1\n    else if (found > 1){\n      # Remove those with NIL as postal\n      res_sub <- res[res$POSTAL != \"NIL\", ]\n      \n      # Set as NA first if no Postal\n      if (nrow(res_sub) == 0) {\n          new_row <- data.frame(address= i, \n                                postal = NA, \n                                latitude = NA, \n                                longitude = NA)\n      }\n      \n      else{\n        top1 <- head(res_sub, n = 1)\n        postal <- top1$POSTAL \n        lat <- top1$LATITUDE\n        lng <- top1$LONGITUDE\n        new_row <- data.frame(address= i, \n                              postal = postal, \n                              latitude = lat, \n                              longitude = lng)\n      }\n    }\n\n    else {\n      new_row <- data.frame(address= i, \n                            postal = NA, \n                            latitude = NA, \n                            longitude = NA)\n    }\n    \n    # Add the row\n    postal_coords <- rbind(postal_coords, new_row)\n  }\n  return(postal_coords)\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncoords <- get_coords(add_list)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(coords, \"data/rds/coords.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncoords <- read_rds(\"data/rds/coords.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nresaleRAW <- left_join(resale_tidy, coords)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nJoining with `by = join_by(address)`\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nresale <- st_as_sf(resaleRAW, \n                       coords = c(\"longitude\", \"latitude\"),\n                       crs=4326) %>%\n  st_transform(crs = 3414)%>%\n  st_jitter(amount = 0.5)\n  \n\n\ntmap_mode(\"plot\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\ntmap mode set to plotting\n```\n\n\n:::\n\n```{.r .cell-code}\n#tm_shape(resale)+\n # tm_dots()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nbuffer350 = st_buffer(resale, dist = 350)\nbuffer1000 = st_buffer(resale, dist = 1000)\n```\n:::\n\n\n\n\n\n\n\n# Loading in locational predictor variables\n::: panel-tabset\n\n## Proximity to CBD\n\n::: {.cell}\n\n```{.r .cell-code}\nCBD <- data.frame(\n  longitude = c(103.8503),  # Example longitudes\n  latitude = c(1.2812)      # Example latitudes\n)\n\nCBD <- st_as_sf(CBD, \n                       coords = c(\"longitude\", \"latitude\"),\n                       crs=4326) %>%\n  st_transform(crs = 3414)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nresale$PROX_CBD = st_distance(resale, CBD)\n```\n:::\n\n\n## Proximity to Eldercare\n\n::: {.cell}\n\n```{.r .cell-code}\neldercare <- st_read(dsn = \"data/geospatial\", layer = \"ELDERCARE\") %>%\n  st_transform(crs = 3414) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `ELDERCARE' from data source \n  `C:\\BlumeTechnologies\\ISSS626\\ISSS626\\Take-Home_Exercises\\Take-Home_Exercise03\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 133 features and 18 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 14481.92 ymin: 28218.43 xmax: 41665.14 ymax: 46804.9\nProjected CRS: SVY21\n```\n\n\n:::\n\n```{.r .cell-code}\ndistances = st_distance(resale, eldercare)\n\nmin_distances <- apply(distances, 1, min)\nresale$PROX_ELDERLYCARE = min_distances\n```\n:::\n\n\n## Proximity to Hawker centres\n\n::: {.cell}\n\n```{.r .cell-code}\nhawker <- st_read(\"data/geospatial/HawkerCentresGEOJSON.geojson\") %>%\n  st_transform(crs = 3414) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `HawkerCentresGEOJSON' from data source \n  `C:\\BlumeTechnologies\\ISSS626\\ISSS626\\Take-Home_Exercises\\Take-Home_Exercise03\\data\\geospatial\\HawkerCentresGEOJSON.geojson' \n  using driver `GeoJSON'\nSimple feature collection with 125 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6974 ymin: 1.272716 xmax: 103.9882 ymax: 1.449017\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n\n```{.r .cell-code}\ndistances = st_distance(resale, hawker)\n\nmin_distances <- apply(distances, 1, min)\nresale$PROX_HAWKER = min_distances\n```\n:::\n\n\n## Proximity to MRT\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmrt <- read_csv(\"data/aspatial/MRT.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nNew names:\nRows: 171 Columns: 7\n── Column specification\n──────────────────────────────────────────────────────── Delimiter: \",\" chr\n(3): STN_NAME, STN_NO, geometry dbl (4): ...1, OBJECTID, Latitude, Longitude\nℹ Use `spec()` to retrieve the full column specification for this data. ℹ\nSpecify the column types or set `show_col_types = FALSE` to quiet this message.\n• `` -> `...1`\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmrt <- st_as_sf(mrt, \n                       coords = c(\"Longitude\", \"Latitude\"),\n                       crs=4326) %>%\n  st_transform(crs = 3414)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndistances = st_distance(resale, mrt)\n\nmin_distances <- apply(distances, 1, min)\nresale$PROX_MRT = min_distances\n```\n:::\n\n\n## Proximity to Park\n\n::: {.cell}\n\n```{.r .cell-code}\npark <- st_read(\"data/geospatial/Parks.geojson\")  %>%\n  st_transform(crs = 3414)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `Parks' from data source \n  `C:\\BlumeTechnologies\\ISSS626\\ISSS626\\Take-Home_Exercises\\Take-Home_Exercise03\\data\\geospatial\\Parks.geojson' \n  using driver `GeoJSON'\nSimple feature collection with 430 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6929 ymin: 1.214491 xmax: 104.0538 ymax: 1.462094\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n\n```{.r .cell-code}\ndistances = st_distance(resale, park)\n\nmin_distances <- apply(distances, 1, min)\nresale$PROX_PARK = min_distances\n```\n:::\n\n\n##Proximity to Shopping Mall\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmalls <- read_csv(\"data/aspatial/shopping_mall_coordinates.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 155 Columns: 3\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (1): Mall Name\ndbl (2): LATITUDE, LONGITUDE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmalls <- st_as_sf(malls, \n                       coords = c(\"LONGITUDE\", \"LATITUDE\"),\n                       crs=4326) %>%\n  st_transform(crs = 3414)\n\ndistances = st_distance(resale, malls)\n\nmin_distances <- apply(distances, 1, min)\nresale$PROX_MALL = min_distances\n```\n:::\n\n\n\n## Proximity to Supermarket\n\n::: {.cell}\n\n```{.r .cell-code}\nsupermarket <- st_read(\"data/geospatial/SupermarketsGEOJSON.geojson\") %>%\n  st_transform(crs = 3414) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `SupermarketsGEOJSON' from data source \n  `C:\\BlumeTechnologies\\ISSS626\\ISSS626\\Take-Home_Exercises\\Take-Home_Exercise03\\data\\geospatial\\SupermarketsGEOJSON.geojson' \n  using driver `GeoJSON'\nSimple feature collection with 526 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6258 ymin: 1.24715 xmax: 104.0036 ymax: 1.461526\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n\n```{.r .cell-code}\ndistances = st_distance(resale, supermarket)\n\nmin_distances <- apply(distances, 1, min)\nresale$PROX_SUPERMARKET = min_distances\n```\n:::\n\n\n## Number of Kidergartens within 350m\n\n::: {.cell}\n\n```{.r .cell-code}\nkindergarten <- st_read(\"data/geospatial/Kindergartens.geojson\") %>%\n  st_transform(crs = 3414)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `Kindergartens' from data source \n  `C:\\BlumeTechnologies\\ISSS626\\ISSS626\\Take-Home_Exercises\\Take-Home_Exercise03\\data\\geospatial\\Kindergartens.geojson' \n  using driver `GeoJSON'\nSimple feature collection with 448 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6887 ymin: 1.247759 xmax: 103.9717 ymax: 1.455452\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n\n```{.r .cell-code}\nresale$WITHIN_350M_KINDERGARTEN = lengths(\n  st_intersects(buffer350, kindergarten)\n)\n```\n:::\n\n\n## Number of childcare centres within 350m\n\n::: {.cell}\n\n```{.r .cell-code}\nchildcare <- st_read(\"data/geospatial/ChildCareServices.geojson\") %>%\n  st_transform(crs = 3414) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `ChildCareServices' from data source \n  `C:\\BlumeTechnologies\\ISSS626\\ISSS626\\Take-Home_Exercises\\Take-Home_Exercise03\\data\\geospatial\\ChildCareServices.geojson' \n  using driver `GeoJSON'\nSimple feature collection with 1925 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6878 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n\n```{.r .cell-code}\nresale$WITHIN_350M_CHILDCARE = lengths(\n  st_intersects(buffer350, childcare)\n)\n```\n:::\n\n\n## Numbers of bus stop within 350m\n\n::: {.cell}\n\n```{.r .cell-code}\nbusstop <- st_read(dsn = \"data/geospatial\", layer = \"BusStop\") %>%\n  st_transform(crs = 3414) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `BusStop' from data source \n  `C:\\BlumeTechnologies\\ISSS626\\ISSS626\\Take-Home_Exercises\\Take-Home_Exercise03\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 5166 features and 3 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 3970.122 ymin: 26482.1 xmax: 48285.52 ymax: 52983.82\nProjected CRS: SVY21\n```\n\n\n:::\n\n```{.r .cell-code}\nresale$WITHIN_350M_BUS = lengths(\n  st_intersects(buffer350, busstop)\n)\n```\n:::\n\n\n## Numbers of primary school within 1km\n\n::: {.cell}\n\n```{.r .cell-code}\nschools <- read_csv(\"data/aspatial/Generalinformationofschools.csv\") %>%\n  filter(mainlevel_code == \"PRIMARY\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 337 Columns: 31\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (29): school_name, url_address, address, telephone_no, telephone_no_2, f...\ndbl  (1): postal_code\nlgl  (1): sixth_vp_name\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nadd_list1 <- sort(unique(schools$address))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nget_coords1 <- function(add_list1){\n  \n  # Create a data frame to store all retrieved coordinates\n  postal_coords1 <- data.frame()\n    \n  for (i in add_list1){\n    #print(i)\n\n    r <- GET('https://www.onemap.gov.sg/api/common/elastic/search?',\n           query=list(searchVal=i,\n                     returnGeom='Y',\n                     getAddrDetails='Y'))\n    data <- fromJSON(rawToChar(r$content))\n    found <- data$found\n    res <- data$results\n    \n    # Create a new data frame for each address\n    new_row <- data.frame()\n    \n    # If single result, append \n    if (found == 1){\n      postal <- res$POSTAL \n      lat <- res$LATITUDE\n      lng <- res$LONGITUDE\n      new_row <- data.frame(address= i, \n                            postal = postal, \n                            latitude = lat, \n                            longitude = lng)\n    }\n    \n    # If multiple results, drop NIL and append top 1\n    else if (found > 1){\n      # Remove those with NIL as postal\n      res_sub <- res[res$POSTAL != \"NIL\", ]\n      \n      # Set as NA first if no Postal\n      if (nrow(res_sub) == 0) {\n          new_row <- data.frame(address= i, \n                                postal = NA, \n                                latitude = NA, \n                                longitude = NA)\n      }\n      \n      else{\n        top1 <- head(res_sub, n = 1)\n        postal <- top1$POSTAL \n        lat <- top1$LATITUDE\n        lng <- top1$LONGITUDE\n        new_row <- data.frame(address= i, \n                              postal = postal, \n                              latitude = lat, \n                              longitude = lng)\n      }\n    }\n\n    else {\n      new_row <- data.frame(address= i, \n                            postal = NA, \n                            latitude = NA, \n                            longitude = NA)\n    }\n    \n    # Add the row\n    postal_coords1 <- rbind(postal_coords1, new_row)\n  }\n  return(postal_coords1)\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncoordsschool <- get_coords(add_list1)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(coordsschool, \"data/rds/coordsschool.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncoordsschool <- read_rds(\"data/rds/coordsschool.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nschools <- left_join(schools, coordsschool)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nJoining with `by = join_by(address)`\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nschools <- st_as_sf(schools, \n                       coords = c(\"longitude\", \"latitude\"),\n                       crs=4326) %>%\n  st_transform(crs = 3414)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nresale$WITHIN_1KM_SCHOOL = lengths(\n  st_intersects(buffer1000, schools)\n)\n```\n:::\n\n\n:::\n\nGOtta use st_distance for the proximity\n\nusing buffering for within 350\n\nhow to count point features wihtin a certain distance?\n\nUSE SPACIAL ML random forrests use 50 trees\nif we wanna make own os map r5r pack\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz = st_read(dsn = \"data/geospatial\", layer = \"MP14_SUBZONE_WEB_PL\")%>%\n  st_transform(crs = 3414)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\BlumeTechnologies\\ISSS626\\ISSS626\\Take-Home_Exercises\\Take-Home_Exercise03\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n```\n\n\n:::\n:::\n\n\n# tidiy-ing data\n\n::: {.cell}\n\n```{.r .cell-code}\nresale_tidy = resale %>%\n  select(month, flat_type, floor_area_sqm, flat_model, storey_range, lease_commence_date, remaining_lease, resale_price, remaining_lease_yr, remaining_lease_mth,PROX_CBD, PROX_ELDERLYCARE, PROX_HAWKER, PROX_MRT, PROX_PARK, PROX_MALL, PROX_SUPERMARKET, WITHIN_350M_KINDERGARTEN, WITHIN_350M_CHILDCARE, WITHIN_350M_BUS, WITHIN_1KM_SCHOOL, address ,postal, geometry)\n```\n:::\n\n\n# Creating subsets\n\n::: {.cell}\n\n```{.r .cell-code}\n# Filter for data from the year 2023\nsubset_2023 <- resale_tidy %>%\n  filter(grepl(\"^2023-\", month) & flat_type %in% c(\"3 ROOM\", \"4 ROOM\", \"5 ROOM\"))\n\n# Filter for data between July and September 2024\nsubset_jul_sep_2024 <- resale_tidy %>%\n  filter(month %in% c(\"2024-07\", \"2024-08\", \"2024-09\") & flat_type %in% c(\"3 ROOM\", \"4 ROOM\", \"5 ROOM\"))\n```\n:::\n\n\n\nTEMPORARY\n\n::: {.cell}\n\n```{.r .cell-code}\nmdata <- read_rds(\"data/mdata.rds\")\n```\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}