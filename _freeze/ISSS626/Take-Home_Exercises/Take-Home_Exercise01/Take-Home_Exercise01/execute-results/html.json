{
  "hash": "8db9ce6e0ede0f61d1ea9745064f3de5",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Take Home Exercise 1\"\nauthor: \"Pelle Knegjes\"\nformat: html\neditor: visual\ndate: \"Aug 27 2024\"\ndate-modified: \"last-modified\"\nexecute: \n  eval: true\n  echo: true\n  message: false\n  freeze: true\n  warning: false\n---\n\n\n# **Take-home Exercise 1: Geospatial Analytics for Public Good**\n\n## **Setting the Scene**\n\nAccording to World Health Organisation (WHO), road traffic accidents cause the death of approximately 1.19 million people each year leave between 20 and 50 million people with non-fatal injuries. More than half of all road traffic deaths occur among vulnerable road users, such as pedestrians, cyclists and motorcyclists.\n\nRoad traffic injuries are the leading cause of death for children and young adults aged 5–29. Yet two thirds of road traffic fatalities occur among people of working age (18–59 years). Nine in 10 fatalities on the roads occur in low- and middle-income countries, even though these countries have around 60% of the world’s vehicles.\n\nIn addition to the human suffering caused by road traffic injuries, they also incur a heavy economic burden on victims and their families, both through treatment costs for the injured and through loss of productivity of those killed or disabled. More broadly, road traffic injuries have a serious impact on national economies, costing countries 3% of their annual gross domestic product.\n\nThailand’s roads are the deadliest in Southeast Asia and among the worst in the world, according to the World Health Organisation. About 20,000 people die in road accidents each year, or about 56 deaths a day (WHO).\n\nBetween 2014 and 2021, Thailand experienced a notable increase in accident frequencies. Specifically, 19% of all accidents in Thailand occurred on the national highways, which constituted the primary public thoroughfares connecting various regions, provinces, districts, and significant locations within a comprehensive network. Within the broader context of accidents across the country, there existed a considerable 66% likelihood of encountering accident-prone zones, often termed ‘black spots,’ distributed as follows: 66% on straight road segments, 13% at curves, 6% at median points of cross-shaped intersections, 5% at T-shaped intersections and Y-shaped intersections, 3% at cross-shaped intersections, 2% on bridges, and 2% on steep slopes, respectively.\n\n## **Objectives**\n\nBy and large, road traffic accidents can be attributed by two major factors, namely: behavioural and environmental factors. Behavioural factors in driving are considered to be major causes of traffic accidents either in direct or indirect manner (Lewin, 1982). These factors can be further grouped into two as, driver behavior (also called driver/driving style) and driver performance, in other words, driver/driving skills (Elander, West, & French, 1993). Environmental factors, on the other hand, includes but not limited to weather condition such as poor visibility during heavy rain or foggy and road conditions such as sharp bend road, slippery slope road, and [blind spot](https://en.wikipedia.org/wiki/Vehicle_blind_spot).\n\nPrevious studies have demonstrated the significant potential of Spatial Point Patterns Analysis (SPPA) in exploring and identifying factors influencing road traffic accidents. However, these studies often focus solely on either behavioral or environmental factors, with limited consideration of temporal factors such as season, day of the week, or time of day.\n\nIn view of this, you are tasked to discover factors affecting road traffic accidents in the [Bangkok Metropolitan Region BMR](https://en.wikipedia.org/wiki/Bangkok_Metropolitan_Region) by employing both spatial spatio-temporal point patterns analysis methods.\n\nThe specific objectives of this take-home exercise are as follows:\n\n-   To visualize the spatio-temporal dynamics of road traffic accidents in BMR using appropriate statistical graphics and geovisualization methods.\n\n-   To conduct detailed spatial analysis of road traffic accidents using appropriate Network Spatial Point Patterns Analysis methods.\n\n-   To conduct detailed spatio-temporal analysis of road traffic accidents using appropriate Temporal Network Spatial Point Patterns Analysis methods.\n\n## **The Data**\n\nFor the purpose of this exercise, three basic data sets must be used, they are:\n\n-   [Thailand Road Accident \\[2019-2022\\]](https://www.kaggle.com/datasets/thaweewatboy/thailand-road-accident-2019-2022) on Kaggle\n\n-   [Thailand Roads (OpenStreetMap Export)](https://data.humdata.org/dataset/hotosm_tha_roads) on HDX.\n\n-   [Thailand - Subnational Administrative Boundaries](https://data.humdata.org/dataset/cod-ab-tha?) on HDX.\n\n# 2 Getting Started\n\n## 2.1 Objectives\n\nThe specific objectives of this take-home exercise are as follows:\n\n-   To visualize the spatio-temporal dynamics of road traffic accidents in BMR using appropriate statistical graphics and geovisualization methods.\n\n-   To conduct detailed spatial analysis of road traffic accidents using appropriate Network Spatial Point Patterns Analysis methods.\n\n-   To conduct detailed spatio-temporal analysis of road traffic accidents using appropriate Temporal Network Spatial Point Patterns Analysis methods.\n\n## 2.2 Area of Study\n\nStudy Area is Bangkok Metropolitan Region\n\nWGS 84 UTM zone 47N EPSG code of bangkok: 32647\n\n\n## 2.3 Loading the tools needed in R\n\nThe code chunk below uses pacman to install and load the sf, raster, spatstat, tmap, tidyverse, sparr, and spNetwork tools\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf, raster, spatstat, sparr, tmap, tidyverse, spNetwork)\n```\n:::\n\n\nExplanations for the imported library:\n\n-   [sf](https://r-spatial.github.io/sf/) for handling geospatial data\n\n-   [spatstat](empty)\n\n-   [tmap](https://cran.r-project.org/web/packages/tmap/) for visualizing geospatial\n\n-   [knitr](https://www.rdocumentation.org/packages/knitr/versions/1.45) for creating html tables\n\n-   [Hmisc](https://www.rdocumentation.org/packages/Hmisc/versions/5.1-1) for summary statistics\n\n\n-   [DT](https://rstudio.github.io/DT/) library to create interactive html tables\n\n-   [**raster**](https://rspatial.org/raster/) for handling raster data in R,\n\n-   [**spatstat**](https://cran.r-project.org/web/packages/spatstat/index.html) for performing Spatial Point Patterns Analysis such as kcross, Lcross, etc.,\n\n-   [**sparr**](https://tilmandavies.github.io/sparr/index.html) provides functions to estimate fixed and adaptive kernel-smoothed spatial relative risk surfaces via the density-ratio method and perform subsequent inference. Fixed-bandwidth spatiotemporal density and relative risk estimation is also supported\n\n-   [**tidyverse**](https://www.tidyverse.org/), a family of R packages that provide functions to perform common data science tasks including and not limited to data import, data transformation, data wrangling and data visualisation.\n\n# 3 Data Preparation\n\n## 3.1 Downloading the data\n\nThe following data sets have been used in this exercise and can be downloaded by clicking the links below:\n\n-   [Thailand Road Accident \\[2019-2022\\]](https://www.kaggle.com/datasets/thaweewatboy/thailand-road-accident-2019-2022) on Kaggle\n\n-   [Thailand Roads (OpenStreetMap Export)](https://data.humdata.org/dataset/hotosm_tha_roads) on HDX.\n\n-   [Thailand - Subnational Administrative Boundaries](https://data.humdata.org/dataset/cod-ab-tha?) on HDX.\n\n## 3.2 Importing the data in R\n\nMake csv sf geometry must be linestring not multipleline detect driver behavior detect enviromental behavior use to subset point events accident causes accident data point\n\nselect different regions from wikipedia of the region do the analysis of the regions like the previous exercise rds folder, make subsets in rds date time field posix incident datetime\n\n::: panel-tabset\n## Accident Data\nHere we import the accident data and wrangle it so it can be used for our analytics.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrdacc_sf = read_csv(\"data/rawdata/thai_road_accident_2019_2022.csv\") %>%\n  filter(!is.na(longitude) & longitude != \"\",\n         !is.na(latitude) & latitude != \"\") %>%\n  st_as_sf(coords = c(\n    \"longitude\", \"latitude\"),\n    crs=4326) %>%\n  st_transform(crs = 32647) %>%\n  mutate(HourOfDay = hour(incident_datetime))%>%\n  mutate(Month_num = month(incident_datetime)) %>%\n  mutate(Month_fac = month(incident_datetime,\n                       label = TRUE,\n                       abbr = TRUE)) %>%\n  mutate(dayofweek_num = weekdays(incident_datetime))%>%\nmutate(dayofweek_fac = as.numeric(format(incident_datetime, \"%u\")))\n```\n:::\n\n\n## Administrative area\nWe import the following dataset as it contains all sub sections of the administrative area aswell: tha_admbnda_adm3_rtsd_20220121\n\n\n::: {.cell}\n\n```{.r .cell-code}\nadm = st_read(dsn = \"data/rawdata/\", \n                  layer = \"tha_admbnda_adm3_rtsd_20220121\")\n```\n:::\n\n\nAnd we transform the data to the right CRS\n\n\n::: {.cell}\n\n```{.r .cell-code}\nadm = st_transform(adm, 32647)\n```\n:::\n\n\nHere we show the dataset\n\n::: {.cell}\n\n```{.r .cell-code}\nadm\n```\n:::\n\n\n## Roads\nAnd the roads.\n\n::: {.cell}\n\n```{.r .cell-code}\nroads = st_read(dsn = \"data/rawdata/\", \n                 layer = \"hotosm_tha_roads_lines_shp\")\n```\n:::\n\n\n:::\n\n## MAKING RDS FILES\nNow we are creating and reading RDS files for different datasets, specifically for accidents, administrative boundaries, and roads. Also we're performing some data manipulation on the roads dataset, such as filtering and selecting specific columns, and setting the coordinate reference system (CRS) to 4326.\n\n::: panel-tabset\n## Accidents\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(rdacc_sf, \"data/rds/rdacc_sf.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nrdacc_sf = read_rds(\"data/rds/rdacc_sf.rds\")\n```\n:::\n\n\n## Adm\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(adm, \"data/rds/adm.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nadm = read_rds(\"data/rds/adm.rds\")\n```\n:::\n\n\n## Roads\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(roads, \"data/rds/roads.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nroads = read_rds(\"data/rds/roads.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nuseroads = c(\"motorway\",\"primary\",\"secondary\")\nnetwork = subset(roads, highway %in% useroads)\nnetwork <- subset(network, select = -c(name, surface, smoothness, width, lanes, oneway, bridge, layer, source, name_th))\nnetwork <- st_set_crs(network, 4326)\n```\n:::\n\n\n:::\n\n\nTaking a \"glimpse\" at the data\n\n::: panel-tabset\n## Accidents\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(rdacc_sf)\n```\n:::\n\n\n## Administrative Area\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(adm)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 7,425\nColumns: 23\n$ Shape_Leng <dbl> 0.04769920, 0.03355050, 0.01728931, 0.01904576, 0.01523190,…\n$ Shape_Area <dbl> 1.284175e-04, 6.068479e-05, 1.769761e-05, 1.920433e-05, 1.2…\n$ ADM3_EN    <chr> \"Phraborom Maharatchawang\", \"Wang Burapha Phirom\", \"Wat Rat…\n$ ADM3_TH    <chr> \"พระบรมมหาราชวัง\", \"วังบูรพาภิรมย์\", \"วัดราชบพิธ\", \"สำราญราษฎร์\", \"…\n$ ADM3_PCODE <chr> \"TH100101\", \"TH100102\", \"TH100103\", \"TH100104\", \"TH100105\",…\n$ ADM3_REF   <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ADM3ALT1EN <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ADM3ALT2EN <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ADM3ALT1TH <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ADM3ALT2TH <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ADM2_EN    <chr> \"Phra Nakhon\", \"Phra Nakhon\", \"Phra Nakhon\", \"Phra Nakhon\",…\n$ ADM2_TH    <chr> \"พระนคร\", \"พระนคร\", \"พระนคร\", \"พระนคร\", \"พระนคร\", \"พระนคร\",…\n$ ADM2_PCODE <chr> \"TH1001\", \"TH1001\", \"TH1001\", \"TH1001\", \"TH1001\", \"TH1001\",…\n$ ADM1_EN    <chr> \"Bangkok\", \"Bangkok\", \"Bangkok\", \"Bangkok\", \"Bangkok\", \"Ban…\n$ ADM1_TH    <chr> \"กรุงเทพมหานคร\", \"กรุงเทพมหานคร\", \"กรุงเทพมหานคร\", \"กรุงเทพมหาน…\n$ ADM1_PCODE <chr> \"TH10\", \"TH10\", \"TH10\", \"TH10\", \"TH10\", \"TH10\", \"TH10\", \"TH…\n$ ADM0_EN    <chr> \"Thailand\", \"Thailand\", \"Thailand\", \"Thailand\", \"Thailand\",…\n$ ADM0_TH    <chr> \"ประเทศไทย\", \"ประเทศไทย\", \"ประเทศไทย\", \"ประเทศไทย\", \"ประเทศ…\n$ ADM0_PCODE <chr> \"TH\", \"TH\", \"TH\", \"TH\", \"TH\", \"TH\", \"TH\", \"TH\", \"TH\", \"TH\",…\n$ date       <date> 2019-02-18, 2019-02-18, 2019-02-18, 2019-02-18, 2019-02-18…\n$ validOn    <date> 2022-01-22, 2022-01-22, 2022-01-22, 2022-01-22, 2022-01-22…\n$ validTo    <date> -001-11-30, -001-11-30, -001-11-30, -001-11-30, -001-11-30…\n$ geometry   <MULTIPOLYGON [m]> MULTIPOLYGON (((661579 1521..., MULTIPOLYGON (…\n```\n\n\n:::\n:::\n\n\n## Roads\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(network)\n```\n:::\n\n:::\n\n# Thailand\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(adm$geometry)\n```\n:::\n\n\nour data still has all the provinces of thailand which we dont need, we only need the bankok metropolitan region. This means we will have to exclude some of the data.\n\nFirst we create a list of the Bankok Metropolan area\n\n\n::: {.cell}\n\n```{.r .cell-code}\nBMRC = c(\"Bangkok\", \"Nakhon Pathom\", \"Nonthaburi\", \"Pathum Thani\", \"Samut Prakan\", \"Samut Sakhon\")\n```\n:::\n\n\nthen we create a subset of the dataset to focus our data to our use case\n\n\n::: {.cell}\n\n```{.r .cell-code}\nBMR = subset(adm, ADM1_EN %in% BMRC)\n```\n:::\n\n\nWe can do the same for the accidents dataset since we don't need the data from outside the region of study\n\n\n::: {.cell}\n\n```{.r .cell-code}\nBMRACC = subset(rdacc_sf, province_en %in% BMRC)\n```\n:::\n\n\nAnd we write both smaller data sets to our rds folder BMR\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(BMR, \"data/rds/BMR.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nread_rds(\"data/rds/BMR.rds\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 477 features and 22 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 587893.5 ymin: 1484414 xmax: 712440.5 ymax: 1579076\nProjected CRS: WGS 84 / UTM zone 47N\nFirst 10 features:\n   Shape_Leng   Shape_Area                  ADM3_EN        ADM3_TH ADM3_PCODE\n1  0.04769920 1.284175e-04 Phraborom Maharatchawang พระบรมมหาราชวัง   TH100101\n2  0.03355050 6.068479e-05      Wang Burapha Phirom     วังบูรพาภิรมย์   TH100102\n3  0.01728931 1.769761e-05         Wat Ratchabophit       วัดราชบพิธ   TH100103\n4  0.01904576 1.920433e-05               Samran Rat     สำราญราษฎร์   TH100104\n5  0.01523190 1.257312e-05         San Chaopho Suea    ศาลเจ้าพ่อเสือ   TH100105\n6  0.01456981 1.292603e-05             Sao Chingcha        เสาชิงช้า   TH100106\n7  0.03114989 4.079321e-05              Bowon Niwet        บวรนิเวศ   TH100107\n8  0.01821968 1.566010e-05                Talat Yot        ตลาดยอด   TH100108\n9  0.02230278 2.826988e-05          Chana Songkhram      ชนะสงคราม   TH100109\n10 0.02904022 3.448890e-05            Ban Phan Thom       บ้านพานถม   TH100110\n   ADM3_REF ADM3ALT1EN ADM3ALT2EN ADM3ALT1TH ADM3ALT2TH     ADM2_EN ADM2_TH\n1      <NA>       <NA>       <NA>       <NA>       <NA> Phra Nakhon  พระนคร\n2      <NA>       <NA>       <NA>       <NA>       <NA> Phra Nakhon  พระนคร\n3      <NA>       <NA>       <NA>       <NA>       <NA> Phra Nakhon  พระนคร\n4      <NA>       <NA>       <NA>       <NA>       <NA> Phra Nakhon  พระนคร\n5      <NA>       <NA>       <NA>       <NA>       <NA> Phra Nakhon  พระนคร\n6      <NA>       <NA>       <NA>       <NA>       <NA> Phra Nakhon  พระนคร\n7      <NA>       <NA>       <NA>       <NA>       <NA> Phra Nakhon  พระนคร\n8      <NA>       <NA>       <NA>       <NA>       <NA> Phra Nakhon  พระนคร\n9      <NA>       <NA>       <NA>       <NA>       <NA> Phra Nakhon  พระนคร\n10     <NA>       <NA>       <NA>       <NA>       <NA> Phra Nakhon  พระนคร\n   ADM2_PCODE ADM1_EN      ADM1_TH ADM1_PCODE  ADM0_EN   ADM0_TH ADM0_PCODE\n1      TH1001 Bangkok กรุงเทพมหานคร       TH10 Thailand ประเทศไทย         TH\n2      TH1001 Bangkok กรุงเทพมหานคร       TH10 Thailand ประเทศไทย         TH\n3      TH1001 Bangkok กรุงเทพมหานคร       TH10 Thailand ประเทศไทย         TH\n4      TH1001 Bangkok กรุงเทพมหานคร       TH10 Thailand ประเทศไทย         TH\n5      TH1001 Bangkok กรุงเทพมหานคร       TH10 Thailand ประเทศไทย         TH\n6      TH1001 Bangkok กรุงเทพมหานคร       TH10 Thailand ประเทศไทย         TH\n7      TH1001 Bangkok กรุงเทพมหานคร       TH10 Thailand ประเทศไทย         TH\n8      TH1001 Bangkok กรุงเทพมหานคร       TH10 Thailand ประเทศไทย         TH\n9      TH1001 Bangkok กรุงเทพมหานคร       TH10 Thailand ประเทศไทย         TH\n10     TH1001 Bangkok กรุงเทพมหานคร       TH10 Thailand ประเทศไทย         TH\n         date    validOn    validTo                       geometry\n1  2019-02-18 2022-01-22 -001-11-30 MULTIPOLYGON (((661579 1521...\n2  2019-02-18 2022-01-22 -001-11-30 MULTIPOLYGON (((662319.1 15...\n3  2019-02-18 2022-01-22 -001-11-30 MULTIPOLYGON (((662329.2 15...\n4  2019-02-18 2022-01-22 -001-11-30 MULTIPOLYGON (((662773.1 15...\n5  2019-02-18 2022-01-22 -001-11-30 MULTIPOLYGON (((662036.7 15...\n6  2019-02-18 2022-01-22 -001-11-30 MULTIPOLYGON (((662392.7 15...\n7  2019-02-18 2022-01-22 -001-11-30 MULTIPOLYGON (((662789.3 15...\n8  2019-02-18 2022-01-22 -001-11-30 MULTIPOLYGON (((662184.9 15...\n9  2019-02-18 2022-01-22 -001-11-30 MULTIPOLYGON (((662015.7 15...\n10 2019-02-18 2022-01-22 -001-11-30 MULTIPOLYGON (((662999.2 15...\n```\n\n\n:::\n:::\n\n## fixing roads\nWe use st union on the administrative boundary to get the outline of the BMR\n\n::: {.cell}\n\n```{.r .cell-code}\nu = st_union(BMR)\nu = st_transform(u, 4326)\nplot(u)\n```\n\n::: {.cell-output-display}\n![](Take-Home_Exercise01_files/figure-html/unnamed-chunk-23-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# assume 'roads' is your multilinestring data and 'study_area' is your polygon data\nnetwork <- st_intersection(network , u)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(network, \"data/rds/network.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n##| eval: false\nnetwork = read_rds(\"data/rds/network.rds\")\n```\n:::\n\n\n## Roads plotted\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(network$geometry)\n```\n\n::: {.cell-output-display}\n![](Take-Home_Exercise01_files/figure-html/unnamed-chunk-27-1.png){width=672}\n:::\n:::\n\n\n## Accidents\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(BMRACC, \"data/rds/BMRACC.rds\")\n```\n:::\n\n\n## The Bangkok Metropolitan Region\nThe Bangkok Metropolitan Region is the urban region surrounding the metropolis of Bangkok. The area covers an area of 7,762 km2 and has a population of 17,400,000.\n\nDifferent parts of the region\nThere region consists out of 6 subregions named: Bangkok, Nothaburi, Nakhon Pathom, Pathum Thani, Samut Prakan, and Samut Sakhon\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(BMR[\"ADM1_EN\"])\n```\n\n::: {.cell-output-display}\n![](Take-Home_Exercise01_files/figure-html/unnamed-chunk-29-1.png){width=672}\n:::\n:::\n\n\nWe can also make sub sets of the different parts of the region\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbk <- BMR %>%\n  filter(ADM1_EN == \"Bangkok\")\nnhb <- BMR %>%\n  filter(ADM1_EN == \"Nonthaburi\")\nnp <- BMR %>%\n  filter(ADM1_EN == \"Nakhon Pathom\")\npt <- BMR %>%\n  filter(ADM1_EN == \"Pathum Thani\")\nsp <- BMR %>%\n  filter(ADM1_EN == \"Samut Prakan\")\nss <- BMR %>%\n  filter(ADM1_EN == \"Samut Sakhon\")\n```\n:::\n\n\n::: panel-tabset\n## Bangkok\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(st_geometry(bk))\n```\n\n::: {.cell-output-display}\n![](Take-Home_Exercise01_files/figure-html/unnamed-chunk-31-1.png){width=672}\n:::\n:::\n\n\n## Nonthaburi\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(st_geometry(nhb))\n```\n\n::: {.cell-output-display}\n![](Take-Home_Exercise01_files/figure-html/unnamed-chunk-32-1.png){width=672}\n:::\n:::\n\n## Nakhon Pathom\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(st_geometry(np))\n```\n\n::: {.cell-output-display}\n![](Take-Home_Exercise01_files/figure-html/unnamed-chunk-33-1.png){width=672}\n:::\n:::\n\n## Pathum Thani\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(st_geometry(pt))\n```\n\n::: {.cell-output-display}\n![](Take-Home_Exercise01_files/figure-html/unnamed-chunk-34-1.png){width=672}\n:::\n:::\n\n\n## Samut Prakan\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(st_geometry(sp))\n```\n\n::: {.cell-output-display}\n![](Take-Home_Exercise01_files/figure-html/unnamed-chunk-35-1.png){width=672}\n:::\n:::\n\n\n## Samut Sakhon\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(st_geometry(ss))\n```\n\n::: {.cell-output-display}\n![](Take-Home_Exercise01_files/figure-html/unnamed-chunk-36-1.png){width=672}\n:::\n:::\n\n:::\n\nNow we look at the different accidents in the BMR\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode('plot')\ntm_shape(BMR)+\n  tm_polygons() +\ntm_shape(BMRACC) +\n  tm_dots(size = 0.1, col = \"red\") \n```\n\n::: {.cell-output-display}\n![](Take-Home_Exercise01_files/figure-html/unnamed-chunk-37-1.png){width=672}\n:::\n:::\n\nRe-assigning the EPSG code\n\n::: pannel-tabset\n\n## BMR\n\n::: {.cell}\n\n```{.r .cell-code}\nBMR32647 <- st_set_crs(BMR, 32647)\nBMR32647 = st_transform(BMR32647, crs = 32647)\n```\n:::\n\n## ACC\n\n::: {.cell}\n\n```{.r .cell-code}\nBMRACC32647 <- st_set_crs(BMRACC, 32647)\nBMRACC32647 = st_transform(BMRACC32647, crs = 32647)\n```\n:::\n\n## Network\n\n::: {.cell}\n\n```{.r .cell-code}\nnetwork32647 <- st_set_crs(network, 32647)\nnetwork32647 = st_transform(network32647, crs = 32647)\n```\n:::\n\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nBMR_ACC = st_join(BMR32647, BMRACC32647, by = c(\"ADM1_EN\" = \"province_en\"))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode(\"plot\")\nqtm(BMR_ACC, \n    fill = \"number_of_injuries\")\n```\n\n::: {.cell-output-display}\n![](Take-Home_Exercise01_files/figure-html/unnamed-chunk-42-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(BMR_ACC)+\n  tm_polygons(\"number_of_vehicles_involved\")\n```\n\n::: {.cell-output-display}\n![](Take-Home_Exercise01_files/figure-html/unnamed-chunk-43-1.png){width=672}\n:::\n:::\n\n\n# Spatio-Temporal Point Patterns Analysis\n\n## Overview\n\n### The research questions\n\nThe specific questions we would like to answer are:\n\nare the locations of the traffic accidents in Bangkok Metropolitan Region spatial and spatio-temporally independent? if the answer is NO, where and when the observed traffic accidents locations tend to cluster?\n\n\n### Converting OWIN\n\nNext, as.owin() is used to convert BMR into an owin object.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbmr_owin = as.owin(BMR)\nbmr_owin\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nwindow: polygonal boundary\nenclosing rectangle: [587893.5, 712440.5] x [1484413.7, 1579076.3] units\n```\n\n\n:::\n:::\n\n\nNext, class() is used to confirm if the output is indeed an owin object.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(bmr_owin)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"owin\"\n```\n\n\n:::\n:::\n\n\n## Preparing Traffic Accident Data\n\nAbove we already have imported the traffic accident data and made it focus on our study area\n\n## Visualising the Traffic Accidents\n\n### Overall Plot\n\nThis plot shows all traffic accidents in the region\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode('plot')\ntm_shape(BMR)+\n  tm_polygons() +\ntm_shape(BMRACC) +\n  tm_dots()\n```\n\n::: {.cell-output-display}\n![](Take-Home_Exercise01_files/figure-html/unnamed-chunk-46-1.png){width=672}\n:::\n:::\n\n\n### Visuaising geographic distribution of traffic accidents by month\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(BMR)+\n  tm_polygons() +\ntm_shape(BMRACC) +\n  tm_dots(size = 0.1) +\ntm_facets(by=\"Month_fac\", \n            free.coords=FALSE, \n            drop.units = TRUE)\n```\n\n::: {.cell-output-display}\n![](Take-Home_Exercise01_files/figure-html/unnamed-chunk-47-1.png){width=672}\n:::\n:::\n\n\n## Computing STKDE by Month/Season\n\nIn this section, we will compute STKDE by using spattemp.density() of sparr package.\n\nMeteorological Seasons Spring: March-May Summer: June-August Autumn: September-November Winter: December-February\n\n::: panel-tabset\n### Extracting traffic accidents by month\n\nThe code chunk below is used to remove the unwanted fields from fire_sf sf data.frame. This is because as.ppp() only need the mark field and geometry field from the input sf data.frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nacc_month <- BMRACC %>%\n  select(Month_num)\n```\n:::\n\n\n### Creating ppp\n\nThe code chunk below is used to derive a ppp object called acc_month from acc_month sf data.frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nacc_month_ppp = as.ppp(acc_month)\nacc_month_ppp\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nMarked planar point pattern: 12986 points\nmarks are numeric, of storage type  'double'\nwindow: rectangle = [591277.5, 710166.1] x [1486845.7, 1576520.5] units\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(acc_month_ppp)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nMarked planar point pattern:  12986 points\nAverage intensity 1.218049e-06 points per square unit\n\n*Pattern contains duplicated points*\n\nCoordinates are given to 10 decimal places\n\nmarks are numeric, of type 'double'\nSummary:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  1.000   4.000   7.000   6.666  10.000  12.000 \n\nWindow: rectangle = [591277.5, 710166.1] x [1486845.7, 1576520.5] units\n                    (118900 x 89670 units)\nWindow area = 10661300000 square units\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nany(duplicated(acc_month_ppp))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsum(multiplicity(acc_month_ppp) > 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 639\n```\n\n\n:::\n:::\n\n\nJITTERING\n\n\n::: {.cell}\n\n```{.r .cell-code}\nacc_month_ppp_jit = rjitter(acc_month_ppp,\n                            retry =TRUE,\n                            nsim=1,\n                            drop=TRUE)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nany(duplicated(acc_month_ppp_jit))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n:::\n\n\n### Including Owin Object\n\nThe code chunk below is used to combine ppp and owin objects into one.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nacc_month_owin = acc_month_ppp[bmr_owin]\nsummary(acc_month_owin)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nMarked planar point pattern:  12986 points\nAverage intensity 1.693312e-06 points per square unit\n\n*Pattern contains duplicated points*\n\nCoordinates are given to 10 decimal places\n\nmarks are numeric, of type 'double'\nSummary:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  1.000   4.000   7.000   6.666  10.000  12.000 \n\nWindow: polygonal boundary\nsingle connected closed polygon with 13779 vertices\nenclosing rectangle: [587893.5, 712440.5] x [1484413.7, 1579076.3] units\n                     (124500 x 94660 units)\nWindow area = 7668990000 square units\nFraction of frame area: 0.65\n```\n\n\n:::\n:::\n\n\nAs a good practice, plot() is used to plot ff_owin so that we can examine the correctness of the output object.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(acc_month_owin)\n```\n\n::: {.cell-output-display}\n![](Take-Home_Exercise01_files/figure-html/unnamed-chunk-56-1.png){width=672}\n:::\n:::\n\n\n### Computing Spatio-temporal KDE\n\nNext, spatttemp.density() of sparr package is used to compute the STKDE.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_kde = spattemp.density(acc_month_owin)\nsummary(st_kde)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSpatiotemporal Kernel Density Estimate\n\nBandwidths\n  h = 4258.283 (spatial)\n  lambda = 0.0114 (temporal)\n\nNo. of observations\n  12986 \n\nSpatial bound\n  Type: polygonal\n  2D enclosure: [587893.5, 712440.5] x [1484414, 1579076]\n\nTemporal bound\n  [1, 12]\n\nEvaluation\n  128 x 128 x 12 trivariate lattice\n  Density range: [4.925709e-18, 6.226576e-09]\n```\n\n\n:::\n:::\n\n\n### Plotting the spatio-temporal KDE object\n\nIn the code chunk below, plot() of R base is used to the KDE \n### Spring\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntims <- c(3,4,5)\n#par(mfcol=c(4,3))\nfor(i in tims){ \n  plot(st_kde, i, \n       override.par=FALSE, \n       fix.range=TRUE, \n       main=paste(\"KDE at month\",i))\n}\n```\n\n::: {.cell-output-display}\n![](Take-Home_Exercise01_files/figure-html/unnamed-chunk-58-1.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](Take-Home_Exercise01_files/figure-html/unnamed-chunk-58-2.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](Take-Home_Exercise01_files/figure-html/unnamed-chunk-58-3.png){width=672}\n:::\n:::\n\n:::\n::: panel-tabset\n### Summer\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntims <- c(6,7,8)\n#par(mfcol=c(2,3))\nfor(i in tims){ \n  plot(st_kde, i, \n       override.par=FALSE, \n       fix.range=TRUE, \n       main=paste(\"KDE at month\",i))\n}\n```\n\n::: {.cell-output-display}\n![](Take-Home_Exercise01_files/figure-html/unnamed-chunk-59-1.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](Take-Home_Exercise01_files/figure-html/unnamed-chunk-59-2.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](Take-Home_Exercise01_files/figure-html/unnamed-chunk-59-3.png){width=672}\n:::\n:::\n\n\n### Autumn\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntims <- c(9,10,11)\n#par(mfcol=c(2,3))\nfor(i in tims){ \n  plot(st_kde, i, \n       override.par=FALSE, \n       fix.range=TRUE, \n       main=paste(\"KDE at month\",i))\n}\n```\n\n::: {.cell-output-display}\n![](Take-Home_Exercise01_files/figure-html/unnamed-chunk-60-1.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](Take-Home_Exercise01_files/figure-html/unnamed-chunk-60-2.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](Take-Home_Exercise01_files/figure-html/unnamed-chunk-60-3.png){width=672}\n:::\n:::\n\n\n### Winter\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntims <- c(12,1,2)\n#par(mfcol=c(2,3))\nfor(i in tims){ \n  plot(st_kde, i, \n       override.par=FALSE, \n       fix.range=TRUE, \n       main=paste(\"KDE at month\",i))\n}\n```\n\n::: {.cell-output-display}\n![](Take-Home_Exercise01_files/figure-html/unnamed-chunk-61-1.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](Take-Home_Exercise01_files/figure-html/unnamed-chunk-61-2.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](Take-Home_Exercise01_files/figure-html/unnamed-chunk-61-3.png){width=672}\n:::\n:::\n\n:::\n\n## Computing STKDE by traffic accidents by day of week\n\nIn this section, we will compute the STKDE of traffic accidents by\n\n### Creating ppp object\n\nIn the code chunk below, DayofWeek field is included in the output ppp object.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nacc_wday_ppp <- BMRACC %>% \n  select(dayofweek_fac) %>%\n  as.ppp()\n```\n:::\n\n\n### Including Owin object\n\nNext, code chunk below is used to combine the ppp object and the owin object.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nacc_wday_owin <- acc_wday_ppp[bmr_owin]\nsummary(acc_wday_owin)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nMarked planar point pattern:  12986 points\nAverage intensity 1.693312e-06 points per square unit\n\n*Pattern contains duplicated points*\n\nCoordinates are given to 10 decimal places\n\nmarks are numeric, of type 'double'\nSummary:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  1.000   2.000   4.000   4.061   6.000   7.000 \n\nWindow: polygonal boundary\nsingle connected closed polygon with 13779 vertices\nenclosing rectangle: [587893.5, 712440.5] x [1484413.7, 1579076.3] units\n                     (124500 x 94660 units)\nWindow area = 7668990000 square units\nFraction of frame area: 0.65\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nkde_wday <- spattemp.density(\n  acc_wday_owin)\nsummary(kde_wday)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSpatiotemporal Kernel Density Estimate\n\nBandwidths\n  h = 4258.283 (spatial)\n  lambda = 0.0064 (temporal)\n\nNo. of observations\n  12986 \n\nSpatial bound\n  Type: polygonal\n  2D enclosure: [587893.5, 712440.5] x [1484414, 1579076]\n\nTemporal bound\n  [1, 7]\n\nEvaluation\n  128 x 128 x 7 trivariate lattice\n  Density range: [1.87865e-15, 1.743864e-08]\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(kde_wday)\n```\n\n::: {.cell-output-display}\n![](Take-Home_Exercise01_files/figure-html/unnamed-chunk-65-1.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](Take-Home_Exercise01_files/figure-html/unnamed-chunk-65-2.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](Take-Home_Exercise01_files/figure-html/unnamed-chunk-65-3.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](Take-Home_Exercise01_files/figure-html/unnamed-chunk-65-4.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](Take-Home_Exercise01_files/figure-html/unnamed-chunk-65-5.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](Take-Home_Exercise01_files/figure-html/unnamed-chunk-65-6.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](Take-Home_Exercise01_files/figure-html/unnamed-chunk-65-7.png){width=672}\n:::\n:::\n\n\n\n## Computing STKDE by time of day\n\nIn this section, we will compute STKDE by using spattemp.density() of sparr package.\n\n\n::: panel-tabset\n### Extracting traffic accidents by Time of day\n\nThe code chunk below is used to remove the unwanted fields from hod_sf sf data.frame. This is because as.ppp() only need the mark field and geometry field from the input sf data.frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nacc_hod <- BMRACC %>%\n  select(HourOfDay)\n```\n:::\n\n\n### Creating ppp\n\nThe code chunk below is used to derive a ppp object called acc_month from acc_month sf data.frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nacc_hod_ppp = as.ppp(acc_hod)\nacc_hod_ppp\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nMarked planar point pattern: 12986 points\nmarks are numeric, of storage type  'integer'\nwindow: rectangle = [591277.5, 710166.1] x [1486845.7, 1576520.5] units\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(acc_hod_ppp)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nMarked planar point pattern:  12986 points\nAverage intensity 1.218049e-06 points per square unit\n\n*Pattern contains duplicated points*\n\nCoordinates are given to 10 decimal places\n\nmarks are numeric, of type 'integer'\nSummary:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   0.00    7.00   13.00   12.33   18.00   23.00 \n\nWindow: rectangle = [591277.5, 710166.1] x [1486845.7, 1576520.5] units\n                    (118900 x 89670 units)\nWindow area = 10661300000 square units\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nany(duplicated(acc_hod_ppp))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsum(multiplicity(acc_hod_ppp) > 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 395\n```\n\n\n:::\n:::\n\n\nJITTERING\n\n\n::: {.cell}\n\n```{.r .cell-code}\nacc_hod_ppp_jit = rjitter(acc_hod_ppp,\n                            retry =TRUE,\n                            nsim=1,\n                            drop=TRUE)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nany(duplicated(acc_hod_ppp_jit))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n:::\n\n\n### Including Owin Object\n\nThe code chunk below is used to combine ppp and owin objects into one.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nacc_hod_owin = acc_hod_ppp[bmr_owin]\nsummary(acc_hod_owin)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nMarked planar point pattern:  12986 points\nAverage intensity 1.693312e-06 points per square unit\n\n*Pattern contains duplicated points*\n\nCoordinates are given to 10 decimal places\n\nmarks are numeric, of type 'integer'\nSummary:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   0.00    7.00   13.00   12.33   18.00   23.00 \n\nWindow: polygonal boundary\nsingle connected closed polygon with 13779 vertices\nenclosing rectangle: [587893.5, 712440.5] x [1484413.7, 1579076.3] units\n                     (124500 x 94660 units)\nWindow area = 7668990000 square units\nFraction of frame area: 0.65\n```\n\n\n:::\n:::\n\n\nAs a good practice, plot() is used to plot ff_owin so that we can examine the correctness of the output object.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(acc_hod_owin)\n```\n\n::: {.cell-output-display}\n![](Take-Home_Exercise01_files/figure-html/unnamed-chunk-74-1.png){width=672}\n:::\n:::\n\n\n### Computing Spatio-temporal KDE\n\nNext, spatttemp.density() of sparr package is used to compute the STKDE.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_kdehod = spattemp.density(acc_hod_owin)\nsummary(st_kdehod)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSpatiotemporal Kernel Density Estimate\n\nBandwidths\n  h = 4258.283 (spatial)\n  lambda = 0.0306 (temporal)\n\nNo. of observations\n  12986 \n\nSpatial bound\n  Type: polygonal\n  2D enclosure: [587893.5, 712440.5] x [1484414, 1579076]\n\nTemporal bound\n  [0, 23]\n\nEvaluation\n  128 x 128 x 24 trivariate lattice\n  Density range: [2.265524e-23, 7.132963e-10]\n```\n\n\n:::\n:::\n\n\n### Plotting the spatio-temporal KDE object\n\nIn the code chunk below, plot() of R base is used to the KDE\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntims <- c(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23)\npar(mfcol=c(2,3))\nfor(i in tims){ \n  plot(st_kdehod, i, \n       override.par=FALSE, \n       fix.range=TRUE, \n       main=paste(\"KDE at Hour\",i))\n}\n```\n\n::: {.cell-output-display}\n![](Take-Home_Exercise01_files/figure-html/unnamed-chunk-76-1.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](Take-Home_Exercise01_files/figure-html/unnamed-chunk-76-2.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](Take-Home_Exercise01_files/figure-html/unnamed-chunk-76-3.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](Take-Home_Exercise01_files/figure-html/unnamed-chunk-76-4.png){width=672}\n:::\n:::\n\n\n\n\nGeospatial data wrangling\n\nConverting from sf format into spatstat’s ppp format\n\n\n::: {.cell}\n\n```{.r .cell-code}\nBMRACC_ppp = as.ppp(BMRACC)\nBMRACC_ppp\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nMarked planar point pattern: 12986 points\nmarks are numeric, of storage type  'double'\nwindow: rectangle = [591277.5, 710166.1] x [1486845.7, 1576520.5] units\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(BMRACC_ppp)\n```\n\n::: {.cell-output-display}\n![](Take-Home_Exercise01_files/figure-html/unnamed-chunk-78-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(BMRACC_ppp)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nMarked planar point pattern:  12986 points\nAverage intensity 1.218049e-06 points per square unit\n\nCoordinates are given to 10 decimal places\n\nmarks are numeric, of type 'double'\nSummary:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 571882 3788970 3834532 4314457 6092694 7570954 \n\nWindow: rectangle = [591277.5, 710166.1] x [1486845.7, 1576520.5] units\n                    (118900 x 89670 units)\nWindow area = 10661300000 square units\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nany(duplicated(BMRACC_ppp))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmultiplicity(BMRACC_ppp)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsum(multiplicity(BMRACC_ppp) > 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nbmr_owin = as.owin(BMR)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(bmr_owin)\n```\n\n::: {.cell-output-display}\n![](Take-Home_Exercise01_files/figure-html/unnamed-chunk-84-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(bmr_owin)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nWindow: polygonal boundary\nsingle connected closed polygon with 13779 vertices\nenclosing rectangle: [587893.5, 712440.5] x [1484413.7, 1579076.3] units\n                     (124500 x 94660 units)\nWindow area = 7668990000 square units\nFraction of frame area: 0.65\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nBMRACCMAP_ppp = BMRACC_ppp[bmr_owin] \n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(BMRACCMAP_ppp)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nMarked planar point pattern:  12986 points\nAverage intensity 1.693312e-06 points per square unit\n\nCoordinates are given to 10 decimal places\n\nmarks are numeric, of type 'double'\nSummary:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 571882 3788970 3834532 4314457 6092694 7570954 \n\nWindow: polygonal boundary\nsingle connected closed polygon with 13779 vertices\nenclosing rectangle: [587893.5, 712440.5] x [1484413.7, 1579076.3] units\n                     (124500 x 94660 units)\nWindow area = 7668990000 square units\nFraction of frame area: 0.65\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(BMRACCMAP_ppp)\n```\n\n::: {.cell-output-display}\n![](Take-Home_Exercise01_files/figure-html/unnamed-chunk-88-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nbk_owin = as.owin(bk)\nnhb_owin = as.owin(nhb)\nnp_owin = as.owin(np)\npt_owin = as.owin(pt)\nsp_owin = as.owin(sp)\nss_owin = as.owin(ss)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\naccidents_bk_ppp = BMRACC_ppp[bk_owin] \naccidents_nhb_ppp = BMRACC_ppp[nhb_owin]\naccidents_np_ppp = BMRACC_ppp[np_owin] \naccidents_pt_ppp = BMRACC_ppp[pt_owin] \naccidents_sp_ppp = BMRACC_ppp[sp_owin]\naccidents_ss_ppp = BMRACC_ppp[ss_owin]\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(accidents_bk_ppp)\n```\n\n::: {.cell-output-display}\n![](Take-Home_Exercise01_files/figure-html/unnamed-chunk-91-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(accidents_bk_ppp, main=\"Bangkok\" )\n```\n\n::: {.cell-output-display}\n![](Take-Home_Exercise01_files/figure-html/unnamed-chunk-92-1.png){width=672}\n:::\n\n```{.r .cell-code}\nplot(accidents_nhb_ppp, main=\"Nonthaburi\")\n```\n\n::: {.cell-output-display}\n![](Take-Home_Exercise01_files/figure-html/unnamed-chunk-92-2.png){width=672}\n:::\n\n```{.r .cell-code}\nplot(accidents_np_ppp, main=\"Nakhon Pathom\")  \n```\n\n::: {.cell-output-display}\n![](Take-Home_Exercise01_files/figure-html/unnamed-chunk-92-3.png){width=672}\n:::\n\n```{.r .cell-code}\nplot(accidents_pt_ppp, main=\"Pathum Thani\") \n```\n\n::: {.cell-output-display}\n![](Take-Home_Exercise01_files/figure-html/unnamed-chunk-92-4.png){width=672}\n:::\n\n```{.r .cell-code}\nplot(accidents_sp_ppp, main=\"Samut Prakan\")\n```\n\n::: {.cell-output-display}\n![](Take-Home_Exercise01_files/figure-html/unnamed-chunk-92-5.png){width=672}\n:::\n\n```{.r .cell-code}\nplot(accidents_ss_ppp, main=\"Samut Sakhon\")\n```\n\n::: {.cell-output-display}\n![](Take-Home_Exercise01_files/figure-html/unnamed-chunk-92-6.png){width=672}\n:::\n:::\n\n\n\n\n\n## Network constraint Spatial Point Pattern Analysis\n\nNetwork constrained Spatial Point Patterns Analysis (NetSPAA) is a collection of spatial point patterns analysis methods special developed for analysing spatial point event occurs on or alongside network. The spatial point event can be locations of traffic accident or childcare centre for example. The network, on the other hand can be a road network or river network.\n\nto derive network kernel density estimation (NKDE), and\nto perform network G-function and k-function analysis\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# |eval: false\n# loading the road network\n\ntm_shape(network) + \n  tm_lines(col = \"black\") + \n  tm_shape(BMRACC) + \n  tm_dots(col = \"red\", size = 0.1)+\n  tm_shape(BMR)+\n  tm_polygons()\n```\n\n::: {.cell-output-display}\n![](Take-Home_Exercise01_files/figure-html/unnamed-chunk-93-1.png){width=672}\n:::\n:::\n\nFirst we plot the road network and the accidents\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(st_geometry(network))+\nplot(BMRACC,add=T,col='red',pch = 19)\n```\n\n::: {.cell-output-display}\n![](Take-Home_Exercise01_files/figure-html/unnamed-chunk-94-1.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\ninteger(0)\n```\n\n\n:::\n:::\n\nThen we need to change the network geometry to line string to enable the nkde to be possible.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnetwork <- st_cast(network, \"LINESTRING\")\n```\n:::\n\nNow we will create the lixels.\n\n::: {.cell}\n\n```{.r .cell-code}\nlixels <- lixelize_lines(network, \n                         700, \n                         mindist = 375)\n```\n:::\n\n\nContinuing we create the variable samples.\n\n::: {.cell}\n\n```{.r .cell-code}\nsamples <- lines_center(lixels) \n```\n:::\n\nAnd we make sure the data sets are in the same CRS.\n\n::: {.cell}\n\n```{.r .cell-code}\nsamples = st_transform(samples, 32647)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nnetwork = st_transform(network, 32647)\n```\n:::\n\n\n\nNow we render the NKDE\nDue to the limited processing power of my laptop this process is not fully possible on my system.\n\n::: {.cell}\n\n```{.r .cell-code}\ndensities <- nkde(network, \n                  events = BMRACC,\n                  w = rep(1, nrow(BMRACC)),\n                  samples = samples,\n                  kernel_name = \"quartic\",\n                  bw = 300, \n                  div= \"bw\", \n                  method = \"simple\", \n                  digits = 1, \n                  tol = 1,\n                  grid_shape = c(1,1), \n                  max_depth = 8,\n                  agg = 100,\n                  sparse = TRUE,\n                  verbose = FALSE)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsamples$density <- densities\nlixels$density <- densities\n```\n:::\n\n\nrescaling to help the mapping\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# rescaling to help the mapping\nsamples$density <- samples$density*10000\nlixels$density <- lixels$density*10000\n```\n:::\n\nNow we plot the NKDE and we see the heatmap on the network roadmap\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode('plot')\ntm_shape(BMR)+\n  tm_polygons(col = \"ADM1_EN\", lwd = 0.5, title = \"Province\")+\ntm_shape(filter(lixels, density == 0)) +\n  tm_lines(col=\"grey\", lwd = 2, alpha = 0.2)+\ntm_shape(lixels)+\n  tm_lines(col=\"density\", lwd = 2, title.col = \"Per km2\", palette = \"-inferno\")+\n  \n  tm_scale_bar() +\n  tm_grid(alpha =0.2) +\ntm_layout(title = \"Traffic accidents density map\",legend.outside = TRUE)\n```\n\n::: {.cell-output-display}\n![](Take-Home_Exercise01_files/figure-html/unnamed-chunk-103-1.png){width=672}\n:::\n:::\n\n::: panel-tabset\n## Per month\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode('plot')\ntm_shape(BMR)+\n  tm_polygons(col = \"ADM1_EN\", lwd = 0.5, title = \"Province\")+\ntm_shape(BMRACC) +\n  tm_dots(size = 0.01)  +\ntm_facets(by=\"Month_fac\", \n            free.coords=FALSE, \n            drop.units = TRUE)+\ntm_shape(lixels)+\n  tm_lines(col=\"density\", lwd = 2, title.col = \"Per km2\", palette = \"-inferno\")+\n  tm_shape(filter(lixels, density == 0)) +\n  tm_lines(col=\"grey\", lwd = 2, alpha = 0.2)+\n  tm_scale_bar() +\n  tm_grid(alpha =0.2) +\ntm_layout(title = \"Traffic accidents density map\",legend.outside = TRUE)\n```\n\n::: {.cell-output-display}\n![](Take-Home_Exercise01_files/figure-html/unnamed-chunk-104-1.png){width=672}\n:::\n:::\n\n## Per Hour of Day\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode('plot')\ntm_shape(BMR)+\n  tm_polygons(col = \"ADM1_EN\", lwd = 0.5, title = \"Province\")+\ntm_shape(BMRACC) +\n  tm_dots(size = 0.01)  +\ntm_facets(by=\"HourOfDay\", \n            free.coords=FALSE, \n            drop.units = TRUE)+\ntm_shape(lixels)+\n  tm_lines(col=\"density\", lwd = 2, title.col = \"Per km2\", palette = \"-inferno\")+\n  tm_shape(filter(lixels, density == 0)) +\n  tm_lines(col=\"grey\", lwd = 2, alpha = 0.2)+\n  tm_scale_bar() +\n  tm_grid(alpha =0.2) +\ntm_layout(title = \"Traffic accidents density map\",legend.outside = TRUE)\n```\n\n::: {.cell-output-display}\n![](Take-Home_Exercise01_files/figure-html/unnamed-chunk-105-1.png){width=672}\n:::\n:::\n\n\n## Per Day of Week\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode('plot')\ntm_shape(BMR)+\n  tm_polygons(col = \"ADM1_EN\", lwd = 0.5, title = \"Province\")+\ntm_shape(BMRACC) +\n  tm_dots(size = 0.01)  +\ntm_facets(by=\"dayofweek_num\", \n            free.coords=FALSE, \n            drop.units = TRUE)+\ntm_shape(lixels)+\n  tm_lines(col=\"density\", lwd = 2, title.col = \"Per km2\", palette = \"-inferno\")+\n  tm_shape(filter(lixels, density == 0)) +\n  tm_lines(col=\"grey\", lwd = 2, alpha = 0.2)+\n  tm_scale_bar() +\n  tm_grid(alpha =0.2) +\ntm_layout(title = \"Traffic accidents density map\",legend.outside = TRUE)\n```\n\n::: {.cell-output-display}\n![](Take-Home_Exercise01_files/figure-html/unnamed-chunk-106-1.png){width=672}\n:::\n:::\n\n:::\n# Network Constrained G- and K-Function Analysis\nIn this section, we are going to perform complete spatial randomness (CSR) test by using kfunctions() of spNetwork package. The null hypothesis is defined as:\n\nHo: The observed spatial point events (i.e distribution of accidents) are uniformly distributed over a street network in Bangkok Metropolitan Region.\n\nNOTE: due to the following error i was not able to finish the last section: Error in kfunctions(network, BMRACC, start = 0, end = 1000, agg = 2e+05,  : \n  After snapping the points on the network, some of them share the same location.\n         To correct it, please consider setting or increasing the value of the parameter agg.\n         They will be merged and their weights added)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkfun_BMRACC <- kfunctions(network, \n                             BMRACC,\n                             start = 0, \n                             end = 1000, \n                             agg = 200000,\n                             step = 50, \n                             width = 50, \n                             nsim = 50, \n                             resolution = 50,\n                             verbose = FALSE, \n                             conf_int = 0.05)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nkfun_BMRACC$plotk\n```\n:::\n\n\n\nThe blue line is the empirical network K-function of the accidents in Bangkok Metropolitan Region. The gray envelop represents the results of the 50 simulations in the interval 2.5% - 97.5%. Because the blue line between the distance of 250m-400m are below the gray area, we can infer that the traffic accidents in bmr area resemble regular pattern at the distance of 250m-400m.\n\n\n::: {.cell}\n\n:::\n\n# Conclusion\nWe have used different techniques to explore and analyse the different road accidents in the Bangkok metropolitan region. From this we can see that most accidents tend to happen at night as well as in the winter months. \n\nBy using the network constrained methods, we can see that most accidents also occur on the bigger roads connecting Bankok with \n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n",
    "supporting": [
      "Take-Home_Exercise01_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}