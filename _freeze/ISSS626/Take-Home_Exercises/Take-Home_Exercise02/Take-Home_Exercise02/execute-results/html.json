{
  "hash": "5a1235929d5185c155202c66c5f9c429",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Take-home Exercise 2: Discovering impacts of COVID-19 on Thailand tourism economy at the province level using spatial and spatio-temporal statistics\"\nauthor: \"Pelle Knegjes\"\ndate: \"Sep 23 2024\"\ndate-modified: \"last-modified\"\nexecute: \n  eval: true\n  echo: true\n  message: false\n  freeze: true\n---\n\n\n## **Setting the Scene**\n\nTourism is one of Thailand’s largest industries, accounting for some 20% of the gross domestic product (GDP). In 2019, Thailand earned 90 billion US\\$ from domestic and international tourism, but the COVID-19 pandemic caused revenues to crash to 24 billion US\\$ in 2020.\n\n## **Objectives**\n\nAs a curious geospatial analytics green horn, we are interested to discover:\n\n-   if the key indicators of tourism economy of Thailand are independent from space and space and time.\n\n-   If the tourism economy is indeed spatial and spatio-temporal dependent, then, we would like to detect where are the clusters and outliers, and the emerging hot spot/cold spot areas.\n\n## **The Task**\n\nThe specific tasks of this take-home exercise are as follows:\n\n-   Using appropriate function of **sf** and **tidyverse**, preparing the following geospatial data layer:\n\n    -   a study area layer in sf polygon features. It must be at [province level](https://en.wikipedia.org/wiki/Provinces_of_Thailand) (including Bangkok) of Thailand.\n\n    -   a tourism economy indicators layer within the study area in sf polygon features.\n\n    -   a derived tourism economy indicator layer in [**spacetime s3 class of sfdep**](https://sfdep.josiahparry.com/articles/spacetime-s3). Keep the time series at **month and year levels**.\n\n-   Using the extracted data, perform global spatial autocorrelation analysis by using [sfdep methods](https://is415-gaa-tskam.netlify.app/in-class_ex/in-class_ex05/in-class_ex05-glsa).\n\n-   Using the extracted data, perform local spatial autocorrelation analysis by using [sfdep methods](https://r4gdsa.netlify.app/chap10.html).\n\n-   Using the extracted data, perform emerging hotspot analysis by using [sfdep methods](https://is415-gaa-tskam.netlify.app/in-class_ex/in-class_ex05/in-class_ex05-ehsa).\n\n-   Describe the spatial patterns revealed by the analysis above.\n\n## **The Data**\n\nFor the purpose of this take-home exercise, two data sets shall be used, they are:\n\n-   [Thailand Domestic Tourism Statistics](https://www.kaggle.com/datasets/thaweewatboy/thailand-domestic-tourism-statistics) at Kaggle. You are required to use **version 2** of the data set.\n\n-   [Thailand - Subnational Administrative Boundaries](https://data.humdata.org/dataset/cod-ab-tha?) at HDX. You are required to use the province boundary data set.\n\nneed to combine small islands to make sure the centroid is not in the ocean\n\nlook at multiple key indicators of trousism\n\nspace time cross sectional before covid, during covid, after covid\n\nkeep time series at month year level\n\nHow to interpet:\n\nLook at articles\n\nspacetimebox needs to be interger for months\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(spdep, tmap, sf, ClustGeo, \n               ggpubr, cluster, factoextra, NbClust,\n               heatmaply, corrplot, psych, tidyverse, GGally,sf, spdep, tmap, tidyverse, sfdep, plotly, Kendall)\n```\n:::\n\n\n\n# Data wrangling\nfirst we load the geo data\n\n::: {.cell}\n\n```{.r .cell-code}\nadmRAW = st_read(dsn = \"data/rawdata/\", \n                  layer = \"tha_admbnda_adm1_rtsd_20220121\")%>%\n  select(1:3, 11, 17)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `tha_admbnda_adm1_rtsd_20220121' from data source \n  `C:\\BlumeTechnologies\\ISSS626\\ISSS626\\Take-Home_Exercises\\Take-Home_Exercise02\\data\\rawdata' \n  using driver `ESRI Shapefile'\nSimple feature collection with 77 features and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 97.34336 ymin: 5.613038 xmax: 105.637 ymax: 20.46507\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n\n```{.r .cell-code}\n  names(admRAW)[names(admRAW) == 'ADM1_EN'] <- \"province_eng\"\n```\n:::\n\nThen we load the tourism data\n\n::: {.cell}\n\n```{.r .cell-code}\nTourismRAW <- read_csv(\"data/rawdata/thailand_domestic_tourism_2019_2023_ver2.csv\") %>%\n   mutate(Year = year(date))%>%\n   mutate(Month = month(date))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 30800 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (5): province_thai, province_eng, region_thai, region_eng, variable\ndbl  (1): value\ndate (1): date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n:::\n\n# variable selection\nnow we pick two variables to further look at\n\n## Revenue\nThis variable shows all revenue from tourism\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a subset for a specific variable\nrevallRAW <- TourismRAW %>%\n  filter(variable == \"revenue_all\")\n```\n:::\n\n## Number of tourists\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a subset for a specific variable\ntouristRAW <- TourismRAW %>%\n  filter(variable == \"no_tourist_all\")\n```\n:::\n\n\n\n## Creating time periods\nwe create pre covid(Pre), during covid(Cov) and post covid(Post) time periods to see the difference between them.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprecovnum <- touristRAW %>%\n  filter(Year == 2019)\n\ncovnum <- touristRAW %>%\n  filter(Year >= 2020 & Year <= 2021)\n\npostcovnum <- touristRAW %>%\n   filter(Year >= 2022 & Year <= 2023)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Aggregate values for each period per province\nprecovnum <- precovnum %>%\n  group_by(province_eng) %>%\n  summarise(value = sum(value))\n\ncovnum <- covnum %>%\n  group_by(province_eng) %>%\n  summarise(value = sum(value))\n\npostcovnum <- postcovnum %>%\n  group_by(province_eng) %>%\n  summarise(value = sum(value))\n```\n:::\n\n\n::: panel-tabset\n\n## Pre\n\n::: {.cell}\n\n```{.r .cell-code}\nPre <- left_join(admRAW,precovnum)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nJoining with `by = join_by(province_eng)`\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nPre <- Pre[!is.na(Pre$value), ]\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nequal <- tm_shape(Pre) +\n  tm_fill(\"value\",\n          n = 5,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal interval classification\")\n\nquantile <- tm_shape(Pre) +\n  tm_fill(\"value\",\n          n = 5,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal quantile classification\")\n\ntmap_arrange(equal, \n             quantile, \n             asp=1, \n             ncol=2)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLegend labels were too wide. The labels have been resized to 0.61, 0.54, 0.54, 0.54, 0.54. Increase legend.width (argument of tm_layout) to make the legend wider and therefore the labels larger.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nSome legend labels were too wide. These labels have been resized to 0.65, 0.59, 0.59, 0.56. Increase legend.width (argument of tm_layout) to make the legend wider and therefore the labels larger.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](Take-Home_Exercise02_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n## Cov\n\n::: {.cell}\n\n```{.r .cell-code}\nCov <- left_join(admRAW,covnum)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nJoining with `by = join_by(province_eng)`\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nCov <- Cov[!is.na(Cov$value), ]\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nequal <- tm_shape(Cov) +\n  tm_fill(\"value\",\n          n = 5,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal interval classification\")\n\nquantile <- tm_shape(Cov) +\n  tm_fill(\"value\",\n          n = 5,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal quantile classification\")\n\ntmap_arrange(equal, \n             quantile, \n             asp=1, \n             ncol=2)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLegend labels were too wide. The labels have been resized to 0.65, 0.56, 0.54, 0.54, 0.54. Increase legend.width (argument of tm_layout) to make the legend wider and therefore the labels larger.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nSome legend labels were too wide. These labels have been resized to 0.65, 0.59, 0.59, 0.56. Increase legend.width (argument of tm_layout) to make the legend wider and therefore the labels larger.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](Take-Home_Exercise02_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n## Post\n\n::: {.cell}\n\n```{.r .cell-code}\nPost <- left_join(admRAW,postcovnum)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nJoining with `by = join_by(province_eng)`\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nPost <- Post[!is.na(Post$value), ]\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nequal <- tm_shape(Post) +\n  tm_fill(\"value\",\n          n = 5,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal interval classification\")\n\nquantile <- tm_shape(Post) +\n  tm_fill(\"value\",\n          n = 5,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal quantile classification\")\n\ntmap_arrange(equal, \n             quantile, \n             asp=1, \n             ncol=2)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLegend labels were too wide. The labels have been resized to 0.65, 0.56, 0.54, 0.54, 0.54. Increase legend.width (argument of tm_layout) to make the legend wider and therefore the labels larger.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nSome legend labels were too wide. These labels have been resized to 0.65, 0.59, 0.59, 0.56. Increase legend.width (argument of tm_layout) to make the legend wider and therefore the labels larger.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](Take-Home_Exercise02_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n:::\n\n\n## **Global Measures of Spatial Autocorrelation for tourism numbers**\n\n### **Computing Contiguity Spatial Weights**\n\nBefore we can compute the global spatial autocorrelation statistics, we need to construct a spatial weights of the study area. The spatial weights is used to define the neighbourhood relationships between the geographical units (i.e. county) in the study area.\n\nIn the code chunk below, [`poly2nb()`](https://r-spatial.github.io/spdep/reference/poly2nb.html) of **spdep** package is used to compute contiguity weight matrices for the study area. This function builds a neighbours list based on regions with contiguous boundaries. If you look at the documentation you will see that you can pass a “queen” argument that takes TRUE or FALSE as options. If you do not specify this argument the default is set to TRUE, that is, if you don’t specify queen = FALSE this function will return a list of first order neighbours using the Queen criteria.\n\nMore specifically, the code chunk below is used to compute Queen contiguity weight matrix.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwm_q1 <- poly2nb(Pre, \n                queen=TRUE)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in poly2nb(Pre, queen = TRUE): some observations have no neighbours;\nif this seems unexpected, try increasing the snap argument.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in poly2nb(Pre, queen = TRUE): neighbour object has 2 sub-graphs;\nif this sub-graph count seems unexpected, try increasing the snap argument.\n```\n\n\n:::\n\n```{.r .cell-code}\nsummary(wm_q1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nNeighbour list object:\nNumber of regions: 69 \nNumber of nonzero links: 284 \nPercentage nonzero weights: 5.965133 \nAverage number of links: 4.115942 \n1 region with no links:\n67\n2 disjoint connected subgraphs\nLink number distribution:\n\n 0  1  2  3  4  5  6  7  9 \n 1  2  7 17 15 11 12  3  1 \n2 least connected regions:\n12 14 with 1 link\n1 most connected region:\n51 with 9 links\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwm_q2 <- poly2nb(Cov, \n                queen=TRUE)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in poly2nb(Cov, queen = TRUE): some observations have no neighbours;\nif this seems unexpected, try increasing the snap argument.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in poly2nb(Cov, queen = TRUE): neighbour object has 2 sub-graphs;\nif this sub-graph count seems unexpected, try increasing the snap argument.\n```\n\n\n:::\n\n```{.r .cell-code}\nsummary(wm_q2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nNeighbour list object:\nNumber of regions: 69 \nNumber of nonzero links: 284 \nPercentage nonzero weights: 5.965133 \nAverage number of links: 4.115942 \n1 region with no links:\n67\n2 disjoint connected subgraphs\nLink number distribution:\n\n 0  1  2  3  4  5  6  7  9 \n 1  2  7 17 15 11 12  3  1 \n2 least connected regions:\n12 14 with 1 link\n1 most connected region:\n51 with 9 links\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwm_q3 <- poly2nb(Post, \n                queen=TRUE)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in poly2nb(Post, queen = TRUE): some observations have no neighbours;\nif this seems unexpected, try increasing the snap argument.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in poly2nb(Post, queen = TRUE): neighbour object has 2 sub-graphs;\nif this sub-graph count seems unexpected, try increasing the snap argument.\n```\n\n\n:::\n\n```{.r .cell-code}\nsummary(wm_q3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nNeighbour list object:\nNumber of regions: 69 \nNumber of nonzero links: 284 \nPercentage nonzero weights: 5.965133 \nAverage number of links: 4.115942 \n1 region with no links:\n67\n2 disjoint connected subgraphs\nLink number distribution:\n\n 0  1  2  3  4  5  6  7  9 \n 1  2  7 17 15 11 12  3  1 \n2 least connected regions:\n12 14 with 1 link\n1 most connected region:\n51 with 9 links\n```\n\n\n:::\n:::\n\n\n\n### **Row-standardised weights matrix**\n\nNext, we need to assign weights to each neighboring polygon. In our case, each neighboring polygon will be assigned equal weight (style=“W”). This is accomplished by assigning the fraction 1/(#ofneighbors) to each neighboring county then summing the weighted income values. While this is the most intuitive way to summaries the neighbors’ values it has one drawback in that polygons along the edges of the study area will base their lagged values on fewer polygons thus potentially over- or under-estimating the true nature of the spatial autocorrelation in the data. For this example, we’ll stick with the style=“W” option for simplicity’s sake but note that other more robust options are available, notably style=“B”.\n\n::: panel-tabset\n\n## Pre\n\n::: {.cell}\n\n```{.r .cell-code}\nrswm_q1 <- nb2listw(wm_q1, \n                   style=\"W\", \n                   zero.policy = TRUE)\nrswm_q1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 69 \nNumber of nonzero links: 284 \nPercentage nonzero weights: 5.965133 \nAverage number of links: 4.115942 \n1 region with no links:\n67\n2 disjoint connected subgraphs\n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 68 4624 68 36.26116 284.0635\n```\n\n\n:::\n:::\n\n## Cov\n\n::: {.cell}\n\n```{.r .cell-code}\nrswm_q2 <- nb2listw(wm_q2, \n                   style=\"W\", \n                   zero.policy = TRUE)\nrswm_q2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 69 \nNumber of nonzero links: 284 \nPercentage nonzero weights: 5.965133 \nAverage number of links: 4.115942 \n1 region with no links:\n67\n2 disjoint connected subgraphs\n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 68 4624 68 36.26116 284.0635\n```\n\n\n:::\n:::\n\n## Post\n\n::: {.cell}\n\n```{.r .cell-code}\nrswm_q3 <- nb2listw(wm_q3, \n                   style=\"W\", \n                   zero.policy = TRUE)\nrswm_q3\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 69 \nNumber of nonzero links: 284 \nPercentage nonzero weights: 5.965133 \nAverage number of links: 4.115942 \n1 region with no links:\n67\n2 disjoint connected subgraphs\n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 68 4624 68 36.26116 284.0635\n```\n\n\n:::\n:::\n\n:::\n\n## **Global Measures of Spatial Autocorrelation: Moran’s I**\n\n### **Maron’s I test**\n\nThe code chunk below performs Moran’s I statistical testing using [`moran.test()`](https://r-spatial.github.io/spdep/reference/moran.test.html) of **spdep**.\n\n::: panel-tabset\n\n### Pre\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmoran.test(Pre$value, \n           listw=rswm_q1, \n           zero.policy = TRUE, \n           na.action=na.omit)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tMoran I test under randomisation\n\ndata:  Pre$value  \nweights: rswm_q1  \nn reduced by no-neighbour observations  \n\nMoran I statistic standard deviate = 0.059901, p-value = 0.4761\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n     -0.012400306      -0.014925373       0.001776985 \n```\n\n\n:::\n:::\n\n\nQuestion: What statistical conclusion can you draw from the output above?\n\n### COV\n\n::: {.cell}\n\n```{.r .cell-code}\nmoran.test(Cov$value, \n           listw=rswm_q2, \n           zero.policy = TRUE, \n           na.action=na.omit)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tMoran I test under randomisation\n\ndata:  Cov$value  \nweights: rswm_q2  \nn reduced by no-neighbour observations  \n\nMoran I statistic standard deviate = -0.17578, p-value = 0.5698\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n     -0.024599591      -0.014925373       0.003028912 \n```\n\n\n:::\n:::\n\n\n### Post\n\n::: {.cell}\n\n```{.r .cell-code}\nmoran.test(Post$value, \n           listw=rswm_q3, \n           zero.policy = TRUE, \n           na.action=na.omit)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tMoran I test under randomisation\n\ndata:  Post$value  \nweights: rswm_q3  \nn reduced by no-neighbour observations  \n\nMoran I statistic standard deviate = 0.5019, p-value = 0.3079\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.012495405      -0.014925373       0.002984828 \n```\n\n\n:::\n:::\n\n:::\n\n### **Computing Monte Carlo Moran’s I**\n\nThe code chunk below performs permutation test for Moran’s I statistic by using [`moran.mc()`](https://r-spatial.github.io/spdep/reference/moran.mc.html) of **spdep**. A total of 1000 simulation will be performed.\n\n::: panel-tabset\n\n### Pre\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\nbperm1= moran.mc(Pre$value, \n                listw=rswm_q1, \n                nsim=999, \n                zero.policy = TRUE, \n                na.action=na.omit)\nbperm1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tMonte-Carlo simulation of Moran I\n\ndata:  Pre$value \nweights: rswm_q1  \nnumber of simulations + 1: 1000 \n\nstatistic = -0.0124, observed rank = 593, p-value = 0.407\nalternative hypothesis: greater\n```\n\n\n:::\n:::\n\n### Cov\n\n::: {.cell}\n\n```{.r .cell-code}\nbperm2= moran.mc(Cov$value, \n                listw=rswm_q2, \n                nsim=999, \n                zero.policy = TRUE, \n                na.action=na.omit)\nbperm2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tMonte-Carlo simulation of Moran I\n\ndata:  Cov$value \nweights: rswm_q2  \nnumber of simulations + 1: 1000 \n\nstatistic = -0.0246, observed rank = 468, p-value = 0.532\nalternative hypothesis: greater\n```\n\n\n:::\n:::\n\n### Post\n\n::: {.cell}\n\n```{.r .cell-code}\nbperm3= moran.mc(Post$value, \n                listw=rswm_q3, \n                nsim=999, \n                zero.policy = TRUE, \n                na.action=na.omit)\nbperm3\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tMonte-Carlo simulation of Moran I\n\ndata:  Post$value \nweights: rswm_q3  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.012495, observed rank = 732, p-value = 0.268\nalternative hypothesis: greater\n```\n\n\n:::\n:::\n\n:::\n\n### **Visualising Monte Carlo Moran’s I**\n\nIt is always a good practice for us the examine the simulated Moran’s I test statistics in greater detail. This can be achieved by plotting the distribution of the statistical values as a histogram by using the code chunk below.\n\nIn the code chunk below [`hist()`](https://www.rdocumentation.org/packages/graphics/versions/3.6.2/topics/hist) and [`abline()`](https://www.rdocumentation.org/packages/graphics/versions/3.6.2/topics/abline) of R Graphics are used.\n\n::: panel-tabset\n\n### Pre\n\n::: {.cell}\n\n```{.r .cell-code}\nmean(bperm1$res[1:999])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] -0.01448913\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nvar(bperm1$res[1:999])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.001841251\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(bperm1$res[1:999])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     Min.   1st Qu.    Median      Mean   3rd Qu.      Max. \n-0.126342 -0.044262 -0.021250 -0.014489  0.008892  0.185379 \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhist(bperm1$res, \n     freq=TRUE, \n     breaks=20, \n     xlab=\"Simulated Moran's I\")\nabline(v=0, \n       col=\"red\") \n```\n\n::: {.cell-output-display}\n![](Take-Home_Exercise02_files/figure-html/unnamed-chunk-32-1.png){width=672}\n:::\n:::\n\n\n### COV\n\n::: {.cell}\n\n```{.r .cell-code}\nmean(bperm2$res[1:999])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] -0.01374542\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nvar(bperm2$res[1:999])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.002689352\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(bperm2$res[1:999])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n-0.14235 -0.05268 -0.02155 -0.01375  0.01483  0.23047 \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhist(bperm2$res, \n     freq=TRUE, \n     breaks=20, \n     xlab=\"Simulated Moran's I\")\nabline(v=0, \n       col=\"red\") \n```\n\n::: {.cell-output-display}\n![](Take-Home_Exercise02_files/figure-html/unnamed-chunk-36-1.png){width=672}\n:::\n:::\n\n### Post\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean(bperm3$res[1:999])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] -0.01460814\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nvar(bperm3$res[1:999])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.003158902\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(bperm3$res[1:999])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n-0.14036 -0.05476 -0.02422 -0.01461  0.01721  0.26101 \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhist(bperm3$res, \n     freq=TRUE, \n     breaks=20, \n     xlab=\"Simulated Moran's I\")\nabline(v=0, \n       col=\"red\") \n```\n\n::: {.cell-output-display}\n![](Take-Home_Exercise02_files/figure-html/unnamed-chunk-40-1.png){width=672}\n:::\n:::\n\n\n:::\n\n\n## **Global Measures of Spatial Autocorrelation: Geary’s C**\n\n### **Geary’s C test**\n\nThe code chunk below performs Geary’s C test for spatial autocorrelation by using [`geary.test()`](https://r-spatial.github.io/spdep/reference/geary.test.html) of **spdep**.\n\n::: panel-tabset\n\n### Pre\n\n::: {.cell}\n\n```{.r .cell-code}\ngeary.test(Pre$value, listw=rswm_q1, na.action=na.omit)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tGeary C test under randomisation\n\ndata:  Pre$value \nweights: rswm_q1  \nn reduced by no-neighbour observations \n\nGeary C statistic standard deviate = -0.94014, p-value = 0.8264\nalternative hypothesis: Expectation greater than statistic\nsample estimates:\nGeary C statistic       Expectation          Variance \n       1.17516453        1.00000000        0.03471391 \n```\n\n\n:::\n:::\n\n\n### Cov\n\n::: {.cell}\n\n```{.r .cell-code}\ngeary.test(Cov$value, listw=rswm_q2, na.action=na.omit)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tGeary C test under randomisation\n\ndata:  Cov$value \nweights: rswm_q2  \nn reduced by no-neighbour observations \n\nGeary C statistic standard deviate = -1.1058, p-value = 0.8656\nalternative hypothesis: Expectation greater than statistic\nsample estimates:\nGeary C statistic       Expectation          Variance \n       1.18764283        1.00000000        0.02879367 \n```\n\n\n:::\n:::\n\n\n### Post\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngeary.test(Post$value, listw=rswm_q3, na.action=na.omit)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tGeary C test under randomisation\n\ndata:  Post$value \nweights: rswm_q3  \nn reduced by no-neighbour observations \n\nGeary C statistic standard deviate = -0.84132, p-value = 0.7999\nalternative hypothesis: Expectation greater than statistic\nsample estimates:\nGeary C statistic       Expectation          Variance \n       1.14327764        1.00000000        0.02900214 \n```\n\n\n:::\n:::\n\n:::\n\n\n### **Computing Monte Carlo Geary’s C**\n\nThe code chunk below performs permutation test for Geary’s C statistic by using [`geary.mc()`](https://r-spatial.github.io/spdep/reference/geary.mc.html) of **spdep**.\n\n::: panel-tabset\n\n### Pre\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\nbperm11=geary.mc(Pre$value, \n               listw=rswm_q1, \n               nsim=999,\n               na.action=na.omit)\nbperm11\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tMonte-Carlo simulation of Geary C\n\ndata:  Pre$value \nweights: rswm_q1  \nnumber of simulations + 1: 1000 \n\nstatistic = 1.1752, observed rank = 826, p-value = 0.826\nalternative hypothesis: greater\n```\n\n\n:::\n:::\n\n### Cov\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\nbperm22=geary.mc(Cov$value, \n               listw=rswm_q2, \n               nsim=999,\n               na.action=na.omit)\nbperm22\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tMonte-Carlo simulation of Geary C\n\ndata:  Cov$value \nweights: rswm_q2  \nnumber of simulations + 1: 1000 \n\nstatistic = 1.1876, observed rank = 879, p-value = 0.879\nalternative hypothesis: greater\n```\n\n\n:::\n:::\n\n### Post\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\nbperm33=geary.mc(Post$value, \n               listw=rswm_q3, \n               nsim=999,\n               na.action=na.omit)\nbperm33\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tMonte-Carlo simulation of Geary C\n\ndata:  Post$value \nweights: rswm_q3  \nnumber of simulations + 1: 1000 \n\nstatistic = 1.1433, observed rank = 804, p-value = 0.804\nalternative hypothesis: greater\n```\n\n\n:::\n:::\n\n:::\n### **Visualising the Monte Carlo Geary’s C**\n\nNext, we will plot a histogram to reveal the distribution of the simulated values by using the code chunk below.\n\n::: panel-tabset\n\n### Pre\n\n::: {.cell}\n\n```{.r .cell-code}\nmean(bperm11$res[1:999])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.9815672\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nvar(bperm11$res[1:999])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.04837946\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(bperm11$res[1:999])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n0.09313 0.85944 0.97396 0.98157 1.12800 1.73436 \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhist(bperm11$res, freq=TRUE, breaks=20, xlab=\"Simulated Geary c\")\nabline(v=1, col=\"red\") \n```\n\n::: {.cell-output-display}\n![](Take-Home_Exercise02_files/figure-html/unnamed-chunk-50-1.png){width=672}\n:::\n:::\n\n\n### Cov\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean(bperm22$res[1:999])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.9834957\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nvar(bperm22$res[1:999])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.03898419\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(bperm22$res[1:999])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 0.1764  0.8734  0.9779  0.9835  1.1095  1.6578 \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhist(bperm22$res, freq=TRUE, breaks=20, xlab=\"Simulated Geary c\")\nabline(v=1, col=\"red\") \n```\n\n::: {.cell-output-display}\n![](Take-Home_Exercise02_files/figure-html/unnamed-chunk-54-1.png){width=672}\n:::\n:::\n\n\n### Post\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean(bperm33$res[1:999])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.983886\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nvar(bperm33$res[1:999])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.03950756\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(bperm33$res[1:999])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 0.1851  0.8752  0.9738  0.9839  1.1113  1.6770 \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhist(bperm33$res, freq=TRUE, breaks=20, xlab=\"Simulated Geary c\")\nabline(v=1, col=\"red\") \n```\n\n::: {.cell-output-display}\n![](Take-Home_Exercise02_files/figure-html/unnamed-chunk-58-1.png){width=672}\n:::\n:::\n\n:::\n\n## **Spatial Correlogram**\n\nSpatial correlograms are great to examine patterns of spatial autocorrelation in your data or model residuals. They show how correlated are pairs of spatial observations when you increase the distance (lag) between them - they are plots of some index of autocorrelation (Moran’s I or Geary’s c) against distance.Although correlograms are not as fundamental as variograms (a keystone concept of geostatistics), they are very useful as an exploratory and descriptive tool. For this purpose they actually provide richer information than variograms.\n\n\n# **Local Measures of Spatial Autocorrelation for tourism numbers**\n\n\n## **Overview**\n\nLocal Measures of Spatial Autocorrelation (LMSA) focus on the relationships between each observation and its surroundings, rather than providing a single summary of these relationships across the map. In this sense, they are not summary statistics but scores that allow us to learn more about the spatial structure in our data. The general intuition behind the metrics however is similar to that of global ones. Some of them are even mathematically connected, where the global version can be decomposed into a collection of local ones. One such example are Local Indicators of Spatial Association (LISA). Beside LISA, Getis-Ord’s Gi-statistics will be introduce as an alternative LMSA statistics that present complementary information or allow us to obtain similar insights for geographically referenced data.\n\n\n### **Visualising Regional Development Indicator**\n\nNow, we are going to prepare a basemap and a choropleth map showing the distribution of Tourism by using *qtm()* of **tmap** package.\n\n::: panel-tabset\n\n### Pre\n\n::: {.cell}\n\n```{.r .cell-code}\nequal <- tm_shape(Pre) +\n  tm_fill(\"value\",\n          n = 5,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal interval classification\")\n\nquantile <- tm_shape(Pre) +\n  tm_fill(\"value\",\n          n = 5,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal quantile classification\")\n\ntmap_arrange(equal, \n             quantile, \n             asp=1, \n             ncol=2)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLegend labels were too wide. The labels have been resized to 0.61, 0.54, 0.54, 0.54, 0.54. Increase legend.width (argument of tm_layout) to make the legend wider and therefore the labels larger.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nSome legend labels were too wide. These labels have been resized to 0.65, 0.59, 0.59, 0.56. Increase legend.width (argument of tm_layout) to make the legend wider and therefore the labels larger.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](Take-Home_Exercise02_files/figure-html/unnamed-chunk-59-1.png){width=672}\n:::\n:::\n\n### Cov\n\n::: {.cell}\n\n```{.r .cell-code}\nequal <- tm_shape(Cov) +\n  tm_fill(\"value\",\n          n = 5,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal interval classification\")\n\nquantile <- tm_shape(Cov) +\n  tm_fill(\"value\",\n          n = 5,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal quantile classification\")\n\ntmap_arrange(equal, \n             quantile, \n             asp=1, \n             ncol=2)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLegend labels were too wide. The labels have been resized to 0.65, 0.56, 0.54, 0.54, 0.54. Increase legend.width (argument of tm_layout) to make the legend wider and therefore the labels larger.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nSome legend labels were too wide. These labels have been resized to 0.65, 0.59, 0.59, 0.56. Increase legend.width (argument of tm_layout) to make the legend wider and therefore the labels larger.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](Take-Home_Exercise02_files/figure-html/unnamed-chunk-60-1.png){width=672}\n:::\n:::\n\n### Post\n\n::: {.cell}\n\n```{.r .cell-code}\nequal <- tm_shape(Post) +\n  tm_fill(\"value\",\n          n = 5,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal interval classification\")\n\nquantile <- tm_shape(Post) +\n  tm_fill(\"value\",\n          n = 5,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal quantile classification\")\n\ntmap_arrange(equal, \n             quantile, \n             asp=1, \n             ncol=2)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLegend labels were too wide. The labels have been resized to 0.65, 0.56, 0.54, 0.54, 0.54. Increase legend.width (argument of tm_layout) to make the legend wider and therefore the labels larger.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nSome legend labels were too wide. These labels have been resized to 0.65, 0.59, 0.59, 0.56. Increase legend.width (argument of tm_layout) to make the legend wider and therefore the labels larger.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](Take-Home_Exercise02_files/figure-html/unnamed-chunk-61-1.png){width=672}\n:::\n:::\n\n\n:::\n\n## **Local Indicators of Spatial Association(LISA)**\n\nLocal Indicators of Spatial Association or LISA are statistics that evaluate the existence of clusters and/or outliers in the spatial arrangement of a given variable. \n\n\n### **Computing Contiguity Spatial Weights**\n\nBefore we can compute the local spatial autocorrelation statistics, we need to construct a spatial weights of the study area. The spatial weights is used to define the neighbourhood relationships between the geographical units (i.e. county) in the study area.\n\nIn the code chunk below, [`poly2nb()`](https://r-spatial.github.io/spdep/reference/poly2nb.html) of **spdep** package is used to compute contiguity weight matrices for the study area. This function builds a neighbours list based on regions with contiguous boundaries. If you look at the documentation you will see that you can pass a “queen” argument that takes TRUE or FALSE as options. If you do not specify this argument the default is set to TRUE, that is, if you don’t specify queen = FALSE this function will return a list of first order neighbours using the Queen criteria.\n\nMore specifically, the code chunk below is used to compute Queen contiguity weight matrix.\n\n::: panel-tabset\n\n### Pre\n\n::: {.cell}\n\n```{.r .cell-code}\nlocalwm_q1 <- poly2nb(Pre, \n                queen=TRUE)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in poly2nb(Pre, queen = TRUE): some observations have no neighbours;\nif this seems unexpected, try increasing the snap argument.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in poly2nb(Pre, queen = TRUE): neighbour object has 2 sub-graphs;\nif this sub-graph count seems unexpected, try increasing the snap argument.\n```\n\n\n:::\n\n```{.r .cell-code}\nsummary(localwm_q1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nNeighbour list object:\nNumber of regions: 69 \nNumber of nonzero links: 284 \nPercentage nonzero weights: 5.965133 \nAverage number of links: 4.115942 \n1 region with no links:\n67\n2 disjoint connected subgraphs\nLink number distribution:\n\n 0  1  2  3  4  5  6  7  9 \n 1  2  7 17 15 11 12  3  1 \n2 least connected regions:\n12 14 with 1 link\n1 most connected region:\n51 with 9 links\n```\n\n\n:::\n:::\n\n### Cov\n\n::: {.cell}\n\n```{.r .cell-code}\nlocalwm_q2 <- poly2nb(Cov, \n                queen=TRUE)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in poly2nb(Cov, queen = TRUE): some observations have no neighbours;\nif this seems unexpected, try increasing the snap argument.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in poly2nb(Cov, queen = TRUE): neighbour object has 2 sub-graphs;\nif this sub-graph count seems unexpected, try increasing the snap argument.\n```\n\n\n:::\n\n```{.r .cell-code}\nsummary(localwm_q2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nNeighbour list object:\nNumber of regions: 69 \nNumber of nonzero links: 284 \nPercentage nonzero weights: 5.965133 \nAverage number of links: 4.115942 \n1 region with no links:\n67\n2 disjoint connected subgraphs\nLink number distribution:\n\n 0  1  2  3  4  5  6  7  9 \n 1  2  7 17 15 11 12  3  1 \n2 least connected regions:\n12 14 with 1 link\n1 most connected region:\n51 with 9 links\n```\n\n\n:::\n:::\n\n### Post\n\n::: {.cell}\n\n```{.r .cell-code}\nlocalwm_q3 <- poly2nb(Post, \n                queen=TRUE)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in poly2nb(Post, queen = TRUE): some observations have no neighbours;\nif this seems unexpected, try increasing the snap argument.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in poly2nb(Post, queen = TRUE): neighbour object has 2 sub-graphs;\nif this sub-graph count seems unexpected, try increasing the snap argument.\n```\n\n\n:::\n\n```{.r .cell-code}\nsummary(localwm_q3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nNeighbour list object:\nNumber of regions: 69 \nNumber of nonzero links: 284 \nPercentage nonzero weights: 5.965133 \nAverage number of links: 4.115942 \n1 region with no links:\n67\n2 disjoint connected subgraphs\nLink number distribution:\n\n 0  1  2  3  4  5  6  7  9 \n 1  2  7 17 15 11 12  3  1 \n2 least connected regions:\n12 14 with 1 link\n1 most connected region:\n51 with 9 links\n```\n\n\n:::\n:::\n\n:::\n\nThe summary report above shows that there are 69 area units in thailand. The most connected area unit has 9 neighbours.\n### **Row-standardised weights matrix**\n\nNext, we need to assign weights to each neighboring polygon. In our case, each neighboring polygon will be assigned equal weight (style=“W”). This is accomplished by assigning the fraction 1/(#ofneighbors) to each neighboring county then summing the weighted income values. While this is the most intuitive way to summaries the neighbors’ values it has one drawback in that polygons along the edges of the study area will base their lagged values on fewer polygons thus potentially over- or under-estimating the true nature of the spatial autocorrelation in the data. For this example, we’ll stick with the style=“W” option for simplicity’s sake but note that other more robust options are available, notably style=“B”.\n\n::: panel-tabset\n\n### Pre\n\n::: {.cell}\n\n```{.r .cell-code}\nrswm_qlocal1 <- nb2listw(localwm_q1, \n                   style=\"W\", \n                   zero.policy = TRUE)\nrswm_qlocal1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 69 \nNumber of nonzero links: 284 \nPercentage nonzero weights: 5.965133 \nAverage number of links: 4.115942 \n1 region with no links:\n67\n2 disjoint connected subgraphs\n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 68 4624 68 36.26116 284.0635\n```\n\n\n:::\n:::\n\n\n### Cov\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrswm_qlocal2 <- nb2listw(localwm_q2, \n                   style=\"W\", \n                   zero.policy = TRUE)\nrswm_qlocal2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 69 \nNumber of nonzero links: 284 \nPercentage nonzero weights: 5.965133 \nAverage number of links: 4.115942 \n1 region with no links:\n67\n2 disjoint connected subgraphs\n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 68 4624 68 36.26116 284.0635\n```\n\n\n:::\n:::\n\n\n### Post\n\n::: {.cell}\n\n```{.r .cell-code}\nrswm_qlocal3 <- nb2listw(localwm_q3, \n                   style=\"W\", \n                   zero.policy = TRUE)\nrswm_qlocal3\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 69 \nNumber of nonzero links: 284 \nPercentage nonzero weights: 5.965133 \nAverage number of links: 4.115942 \n1 region with no links:\n67\n2 disjoint connected subgraphs\n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 68 4624 68 36.26116 284.0635\n```\n\n\n:::\n:::\n\n:::\n\n### **Computing local Moran’s I**\n\nTo compute local Moran’s I, the [*localmoran()*](https://r-spatial.github.io/spdep/reference/localmoran.html) function of **spdep** will be used. It computes *Ii* values, given a set of *zi* values and a listw object providing neighbour weighting information for the polygon associated with the zi values.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfips1 <- order(Pre$value)\nlocalMI1 <- localmoran(Pre$value, rswm_qlocal1)\nhead(localMI1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n            Ii          E.Ii      Var.Ii         Z.Ii Pr(z != E(Ii))\n1 -0.962678084 -8.721961e-01 1.186241060 -0.083076005   9.337911e-01\n2 -0.223820407 -5.047251e-05 0.001715225 -5.403076685   6.550744e-08\n3 -0.283318794 -2.922175e-04 0.004813639 -4.079345204   4.516273e-05\n4 -0.298101852 -7.399141e-04 0.007868185 -3.352340263   8.013147e-04\n5 -0.065859788 -4.124509e-03 0.043711133 -0.295282278   7.677783e-01\n6 -0.004149839 -2.154500e-03 0.047970715 -0.009110214   9.927312e-01\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nfips2 <- order(Cov$value)\nlocalMI2 <- localmoran(Cov$value, rswm_qlocal2)\nhead(localMI2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n           Ii          E.Ii      Var.Ii       Z.Ii Pr(z != E(Ii))\n1 -1.35527205 -0.7724074607 1.870764881 -0.4261457   6.700017e-01\n2 -0.82957575 -0.0007499084 0.025466582 -5.1937130   2.061408e-07\n3 -0.33037150 -0.0004480210 0.007379009 -3.8407338   1.226671e-04\n4 -0.42654266 -0.0015760652 0.016745722 -3.2839978   1.023457e-03\n5 -0.10232253 -0.0067901706 0.071768922 -0.3566008   7.213907e-01\n6 -0.03975591 -0.0031298405 0.069618906 -0.1388119   8.895988e-01\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nfips3 <- order(Post$value)\nlocalMI3 <- localmoran(Post$value, rswm_qlocal3)\nhead(localMI3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n           Ii          E.Ii      Var.Ii        Z.Ii Pr(z != E(Ii))\n1 -0.71729377 -7.762773e-01 1.848169007  0.04338702   9.653930e-01\n2 -0.39591276 -1.603260e-04 0.005447816 -5.36182196   8.238672e-08\n3 -0.14677611 -7.954655e-05 0.001310633 -4.05209309   5.076146e-05\n4 -0.36584764 -1.001833e-03 0.010650616 -3.53526517   4.073661e-04\n5 -0.06354218 -1.441570e-02 0.151197357 -0.12634078   8.994622e-01\n6 -0.10909582 -2.881476e-03 0.064110345 -0.41948759   6.748598e-01\n```\n\n\n:::\n:::\n\n*localmoran()* function returns a matrix of values whose columns are:\n\n-   Ii: the local Moran’s I statistics\n\n-   E.Ii: the expectation of local moran statistic under the randomisation hypothesis\n\n-   Var.Ii: the variance of local moran statistic under the randomisation hypothesis\n\n-   Z.Ii:the standard deviate of local moran statistic\n\n-   Pr(): the p-value of local moran statistic\n\nThe code chunk below list the content of the local Moran matrix derived by using [*printCoefmat()*](https://www.rdocumentation.org/packages/stats/versions/3.6.2/topics/printCoefmat).\n\n::: panel-tabset\n\n### Pre\n\n::: {.cell}\n\n```{.r .cell-code}\nprintCoefmat(data.frame(\n  localMI1[fips1,], \n  row.names=Pre$value[fips1]),\n  check.names=FALSE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                  Ii        E.Ii      Var.Ii        Z.Ii Pr.z....E.Ii..\n282059    5.4637e-02 -2.9721e-03  6.6121e-02  2.2404e-01         0.8227\n306727    1.0778e-01 -2.9324e-03  6.5239e-02  4.3346e-01         0.6647\n577495    9.8377e-02 -2.5138e-03  5.5951e-02  4.2653e-01         0.6697\n606194    1.0965e-01 -2.4713e-03  5.5008e-02  4.7805e-01         0.6326\n621877    1.1569e-01 -2.4483e-03  4.0243e-02  5.8890e-01         0.5559\n657377    1.1015e-01 -2.3965e-03  3.9394e-02  5.6703e-01         0.5707\n689938    5.5220e-02 -2.3495e-03  5.2301e-02  2.5173e-01         0.8012\n703810    1.6901e-01 -2.3296e-03  7.8986e-02  6.0964e-01         0.5421\n747775    8.5746e-02 -2.2671e-03  3.7272e-02  4.5589e-01         0.6485\n768297    7.1504e-02 -2.2382e-03  2.3765e-02  4.7835e-01         0.6324\n772404   -1.4819e-02 -2.2325e-03  3.6703e-02 -6.5697e-02         0.9476\n782901    9.3719e-02 -2.2178e-03  2.8714e-02  5.6615e-01         0.5713\n828556   -4.1498e-03 -2.1545e-03  4.7971e-02 -9.1102e-03         0.9927\n865646    1.3168e-01 -2.1038e-03  2.7241e-02  8.1054e-01         0.4176\n889499    8.4457e-02 -2.0715e-03  3.4062e-02  4.6884e-01         0.6392\n920622    1.2828e-01 -2.0297e-03  2.6284e-02  8.0380e-01         0.4215\n953895    1.3882e-01 -1.9855e-03  4.4215e-02  6.6965e-01         0.5031\n1003731   1.1144e-02 -1.9202e-03  6.5133e-02  5.1191e-02         0.9592\n1084036   9.8534e-02 -1.8173e-03  2.9890e-02  5.8044e-01         0.5616\n1094469  -1.1775e-01 -1.8041e-03  6.1203e-02 -4.6869e-01         0.6393\n1152319   1.0882e-01 -1.7320e-03  3.8581e-02  5.6285e-01         0.5735\n1205342  -3.9828e-02 -1.6672e-03  3.7140e-02 -1.9801e-01         0.8430\n1362257   3.5153e-02 -1.4827e-03  1.3287e-02  3.1783e-01         0.7506\n1374982   7.9234e-02 -1.4682e-03  1.5601e-02  6.4611e-01         0.5182\n1420755   1.1859e-01 -1.4167e-03  4.8078e-02  5.4729e-01         0.5842\n1501482   8.6097e-02 -1.3280e-03  1.4114e-02  7.3589e-01         0.4618\n1514747  -2.7813e-02 -1.3137e-03  2.9275e-02 -1.5488e-01         0.8769\n1515458  -5.4565e-01 -1.3130e-03  2.1606e-02 -3.7032e+00         0.0002\n1556230   1.4210e-02 -1.2695e-03  2.8292e-02  9.2027e-02         0.9267\n1563563   1.8705e-02 -1.2618e-03  2.0765e-02  1.3856e-01         0.8898\n1626132   1.2280e-02 -1.1968e-03  1.9696e-02  9.6026e-02         0.9235\n1804320  -6.4555e-02 -1.0210e-03  2.2759e-02 -4.2114e-01         0.6737\n1935609   8.1015e-02 -9.0044e-04  9.5736e-03  8.3720e-01         0.4025\n2074134  -8.6841e-03 -7.8143e-04  1.7423e-02 -5.9871e-02         0.9523\n2116182   8.5468e-02 -7.4697e-04  7.9432e-03  9.6736e-01         0.3334\n2124911  -2.9810e-01 -7.3991e-04  7.8682e-03 -3.3523e+00         0.0008\n2224944  -3.4300e-02 -6.6145e-04  1.4749e-02 -2.7698e-01         0.7818\n2255255   1.7552e-02 -6.3854e-04  4.3082e-03  2.7713e-01         0.7817\n2257616   8.3994e-03 -6.3677e-04  8.2576e-03  9.9439e-02         0.9208\n2278251   3.7075e-02 -6.2143e-04  4.2852e-02  1.8210e-01         0.8555\n2330827  -3.2107e-02 -5.8318e-04  7.5630e-03 -3.6249e-01         0.7170\n2411076   3.0636e-02 -5.2715e-04  5.6068e-03  4.1618e-01         0.6773\n2484480  -3.9153e-05 -4.7837e-04  7.8786e-03  4.9483e-03         0.9961\n2787870   3.3193e-02 -3.0188e-04  4.9727e-03  4.7498e-01         0.6348\n2806779  -2.8332e-01 -2.9222e-04  4.8136e-03 -4.0793e+00         0.0000\n3074531  -1.3362e-02 -1.7228e-04  2.8383e-03 -2.4757e-01         0.8045\n3217865   3.8762e-02 -1.2102e-04  4.1125e-03  6.0633e-01         0.5443\n3275949  -9.5145e-04 -1.0282e-04  1.0941e-03 -2.5656e-02         0.9795\n3346393   2.2666e-02 -8.2736e-05  8.8039e-04  7.6669e-01         0.4433\n3466731  -6.9521e-02 -5.3469e-05  5.6897e-04 -2.9123e+00         0.0036\n3480752  -2.2382e-01 -5.0473e-05  1.7152e-03 -5.4031e+00         0.0000\n3729148  -1.5010e-03 -1.1714e-05  2.6137e-04 -9.2119e-02         0.9266\n3808253  -1.6117e-03 -5.0626e-06  6.5692e-05 -1.9823e-01         0.8429\n4019924  -1.2573e-03 -7.8762e-07  1.0220e-05 -3.9303e-01         0.6943\n4229538   3.8586e-02 -1.5956e-05  1.4319e-04  3.2259e+00         0.0013\n4390001   1.2125e-02 -4.0614e-05  6.6920e-04  4.7028e-01         0.6382\n5583809  -2.0145e-02 -5.7928e-04  5.1957e-03 -2.7144e-01         0.7861\n5900721  -1.9960e-02 -8.2746e-04  1.3623e-02 -1.6392e-01         0.8698\n6759836  -8.4719e-03 -1.7222e-03  3.8363e-02 -3.4461e-02         0.9725\n7259669   6.2931e-02 -2.3921e-03  8.1100e-02  2.2938e-01         0.8186\n7503461  -1.2533e-01 -2.7586e-03  3.5697e-02 -6.4877e-01         0.5165\n7877379  -8.6358e-02 -3.3715e-03  2.3185e-01 -1.7235e-01         0.8632\n8292809  -6.5860e-02 -4.1245e-03  4.3711e-02 -2.9528e-01         0.7678\n8958499  -5.3648e-03 -5.4893e-03  1.2181e-01  3.5655e-04         0.9997\n9618052  -1.1727e-01 -7.0335e-03  9.0625e-02 -3.6617e-01         0.7142\n9898428  -4.8310e-02 -7.7478e-03  9.9758e-02 -1.2843e-01         0.8978\n11165860 -2.1862e-01 -1.1408e-02  1.4634e-01 -5.4167e-01         0.5880\n14576466  0.0000e+00  0.0000e+00  0.0000e+00         NaN            NaN\n66966562 -9.6268e-01 -8.7220e-01  1.1862e+00 -8.3076e-02         0.9338\n```\n\n\n:::\n:::\n\n### Cov\n\n::: {.cell}\n\n```{.r .cell-code}\nprintCoefmat(data.frame(\n  localMI2[fips2,], \n  row.names=Cov$value[fips2]),\n  check.names=FALSE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                  Ii        E.Ii      Var.Ii        Z.Ii Pr.z....E.Ii..\n186279    1.4977e-01 -4.5757e-03  1.0163e-01  4.8415e-01         0.6283\n268114    1.4855e-01 -4.2892e-03  9.5297e-02  4.9511e-01         0.6205\n293894    2.7163e-01 -4.2009e-03  1.4217e-01  7.3154e-01         0.4645\n447336    1.0150e-01 -3.6943e-03  8.2128e-02  3.6707e-01         0.7136\n485037    1.5715e-01 -3.5748e-03  5.8693e-02  6.6343e-01         0.5071\n529651    1.3358e-01 -3.4359e-03  7.6404e-02  4.9571e-01         0.6201\n558942    1.1708e-01 -3.3462e-03  1.1334e-01  3.5769e-01         0.7206\n610243   -8.1241e-01 -3.1920e-03  5.2429e-02 -3.5341e+00         0.0004\n631278   -3.9756e-02 -3.1298e-03  6.9619e-02 -1.3881e-01         0.8896\n635434    7.8666e-02 -3.1176e-03  3.3074e-02  4.4970e-01         0.6529\n643783    1.3830e-01 -3.0932e-03  6.8806e-02  5.3904e-01         0.5899\n643880    1.0189e-01 -3.0929e-03  5.0806e-02  4.6576e-01         0.6414\n726097    9.4663e-02 -2.8571e-03  4.6944e-02  4.5009e-01         0.6526\n730298    1.0497e-01 -2.8453e-03  3.6817e-02  5.6190e-01         0.5742\n760557   -1.3466e-01 -2.7611e-03  4.5371e-02 -6.1921e-01         0.5358\n764080    7.7896e-02 -2.7514e-03  4.5212e-02  3.7929e-01         0.7045\n901463    1.6637e-01 -2.3855e-03  3.0881e-02  9.6032e-01         0.3369\n903723    1.4625e-01 -2.3797e-03  3.0806e-02  8.4679e-01         0.3971\n957642    7.4769e-02 -2.2434e-03  3.6884e-02  4.0100e-01         0.6884\n958127   -3.8467e-02 -2.2422e-03  4.9920e-02 -1.6213e-01         0.8712\n963442    1.0308e-01 -2.2290e-03  3.6647e-02  5.5010e-01         0.5822\n1028626  -2.4265e-01 -2.0702e-03  7.0209e-02 -9.0797e-01         0.3639\n1058608   3.9144e-02 -1.9990e-03  3.2874e-02  2.2692e-01         0.8205\n1092917   1.5559e-01 -1.9192e-03  6.5099e-02  6.1732e-01         0.5370\n1102454   1.2876e-01 -1.8973e-03  4.2255e-02  6.3563e-01         0.5250\n1114278   1.0088e-01 -1.8703e-03  1.9866e-02  7.2902e-01         0.4660\n1137307  -1.1783e-01 -1.8183e-03  4.0499e-02 -5.7646e-01         0.5643\n1178069   1.4082e-01 -1.7281e-03  3.8493e-02  7.2655e-01         0.4675\n1249218  -4.2654e-01 -1.5761e-03  1.6746e-02 -3.2840e+00         0.0010\n1266191  -1.7550e-01 -1.5408e-03  3.4328e-02 -9.3890e-01         0.3478\n1287650   6.0796e-02 -1.4969e-03  3.3350e-02  3.4111e-01         0.7330\n1344853  -1.3791e-01 -1.3828e-03  3.0811e-02 -7.7779e-01         0.4367\n1375416   8.3621e-02 -1.3237e-03  1.4067e-02  7.1619e-01         0.4739\n1412072   1.2440e-01 -1.2545e-03  1.3333e-02  1.0882e+00         0.2765\n1429758   3.4411e-03 -1.2217e-03  1.0951e-02  4.4557e-02         0.9645\n1714826   8.0151e-02 -7.5400e-04  8.0179e-03  9.0354e-01         0.3662\n1717666  -8.2958e-01 -7.4991e-04  2.5467e-02 -5.1937e+00         0.0000\n1743469  -1.5951e-02 -7.1322e-04  4.8117e-03 -2.1968e-01         0.8261\n1794888   2.8896e-02 -6.4284e-04  4.4328e-02  1.4030e-01         0.8884\n1950547   2.3005e-02 -4.5208e-04  1.0083e-02  2.3361e-01         0.8153\n1954185  -3.3037e-01 -4.4802e-04  7.3790e-03 -3.8407e+00         0.0001\n1975703   3.5177e-02 -4.2439e-04  6.9900e-03  4.2583e-01         0.6702\n2121791   1.4472e-03 -2.8091e-04  4.6274e-03  2.5405e-02         0.9797\n2125059  -5.6210e-03 -2.7803e-04  3.6068e-03 -8.8966e-02         0.9291\n2191069  -2.4944e-02 -2.2317e-04  4.9786e-03 -3.5036e-01         0.7261\n2202302  -5.2797e-02 -2.1444e-04  2.7820e-03 -9.9694e-01         0.3188\n2296231   2.3730e-02 -1.4821e-04  2.4418e-03  4.8321e-01         0.6289\n2313341   1.1953e-02 -1.3746e-04  1.4627e-03  3.1614e-01         0.7519\n2562979  -1.2428e-02 -2.6643e-05  4.3900e-04 -5.9190e-01         0.5539\n2574410   2.0706e-02 -2.3631e-05  8.0307e-04  7.3152e-01         0.4645\n2628493  -3.5879e-02 -1.1829e-05  1.0616e-04 -3.4811e+00         0.0005\n2795676   3.3440e-03 -9.1358e-07  1.5054e-05  8.6210e-01         0.3886\n2955958  -1.3162e-02 -2.6724e-05  2.8438e-04 -7.7891e-01         0.4360\n3129404   1.1563e-02 -9.4660e-05  1.0073e-03  3.6733e-01         0.7134\n3186397  -1.3556e-02 -1.2606e-04  1.6356e-03 -3.3208e-01         0.7398\n3208356  -1.6498e-02 -1.3936e-04  1.8081e-03 -3.8472e-01         0.7004\n3220463   1.0341e-01 -1.4697e-04  1.5638e-03  2.6188e+00         0.0088\n3563101   4.5578e-02 -4.4652e-04  9.9589e-03  4.6120e-01         0.6447\n3624677  -6.0288e-02 -5.1755e-04  6.7123e-03 -7.2954e-01         0.4657\n4308052   1.5086e-04 -1.6577e-03  1.4853e-02  1.4840e-02         0.9882\n4483861  -5.1671e-02 -2.0555e-03  1.4154e-01 -1.3188e-01         0.8951\n5151594   0.0000e+00  0.0000e+00  0.0000e+00         NaN            NaN\n5893753  -1.0232e-01 -6.7902e-03  7.1769e-02 -3.5660e-01         0.7214\n6786057   3.5076e-01 -1.1206e-02  3.7658e-01  5.8985e-01         0.5553\n8267488   2.5037e-01 -2.0969e-02  4.5808e-01  4.0090e-01         0.6885\n9159438  -9.1370e-02 -2.8310e-02  3.5695e-01 -1.0555e-01         0.9159\n9741769  -3.2122e-01 -3.3696e-02  4.2251e-01 -4.4234e-01         0.6582\n10183515 -2.3254e-01 -3.8094e-02  4.7549e-01 -2.8199e-01         0.7779\n36189756 -1.3553e+00 -7.7241e-01  1.8708e+00 -4.2615e-01         0.6700\n```\n\n\n:::\n:::\n\n\n### Post\n\n::: {.cell}\n\n```{.r .cell-code}\nprintCoefmat(data.frame(\n  localMI3[fips3,], \n  row.names=Post$value[fips3]),\n  check.names=FALSE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                  Ii        E.Ii      Var.Ii        Z.Ii Pr.z....E.Ii..\n266636    1.5948e-01 -4.2080e-03  9.3500e-02  5.3533e-01         0.5924\n303943    1.5471e-01 -4.1130e-03  9.1399e-02  5.2534e-01         0.5993\n499251    2.2229e-01 -3.6335e-03  1.2304e-01  6.4410e-01         0.5195\n505141    1.7158e-01 -3.6195e-03  5.9425e-02  7.1871e-01         0.4723\n596906    1.4525e-01 -3.4048e-03  5.5913e-02  6.2866e-01         0.5296\n623031    4.1354e-02 -3.3449e-03  1.1330e-01  1.3280e-01         0.8944\n723948    7.1234e-02 -3.1185e-03  6.9368e-02  2.8230e-01         0.7777\n729046   -8.4343e-01 -3.1073e-03  5.1042e-02 -3.7195e+00         0.0002\n772355    9.9412e-02 -3.0127e-03  3.1964e-02  5.7289e-01         0.5667\n787364    1.8875e-01 -2.9803e-03  3.8558e-02  9.7644e-01         0.3288\n802427    9.2773e-02 -2.9479e-03  4.8432e-02  4.3495e-01         0.6636\n811692    9.6269e-02 -2.9281e-03  4.8107e-02  4.5226e-01         0.6511\n833616   -1.0910e-01 -2.8815e-03  6.4110e-02 -4.1949e-01         0.6749\n840680    1.0348e-01 -2.8665e-03  6.3779e-02  4.2109e-01         0.6737\n928246    1.1791e-01 -2.6845e-03  3.4740e-02  6.4701e-01         0.5176\n1060991  -1.4702e-01 -2.4198e-03  3.9777e-02 -7.2503e-01         0.4684\n1065152   1.8859e-01 -2.4118e-03  8.1767e-02  6.6794e-01         0.5042\n1108082   1.1066e-01 -2.3293e-03  3.8291e-02  5.7742e-01         0.5637\n1136193   1.1468e-01 -2.2760e-03  2.4166e-02  7.5234e-01         0.4518\n1174838   4.6712e-02 -2.2038e-03  3.6234e-02  2.5698e-01         0.7972\n1197923   1.0428e-01 -2.1613e-03  3.5536e-02  5.6467e-01         0.5723\n1250998  -7.4191e-02 -2.0650e-03  4.5981e-02 -3.3636e-01         0.7366\n1277641  -1.7536e-01 -2.0175e-03  6.8425e-02 -6.6269e-01         0.5075\n1307282   1.2684e-01 -1.9652e-03  4.3765e-02  6.1569e-01         0.5381\n1333122  -8.1113e-02 -1.9203e-03  4.2766e-02 -3.8294e-01         0.7018\n1333727  -1.2730e-01 -1.9192e-03  4.2743e-02 -6.0645e-01         0.5442\n1353386  -8.0507e-02 -1.8854e-03  4.1990e-02 -3.8368e-01         0.7012\n1450068   1.2048e-01 -1.7233e-03  2.2324e-02  8.1791e-01         0.4134\n1637010   8.5833e-02 -1.4306e-03  9.8572e-02  2.7794e-01         0.7811\n1655891   1.1606e-01 -1.4026e-03  3.1252e-02  6.6445e-01         0.5064\n1807239  -6.2648e-02 -1.1878e-03  1.9548e-02 -4.3958e-01         0.6602\n1850577   7.0661e-02 -1.1295e-03  1.2007e-02  6.5517e-01         0.5124\n1862579   2.4540e-02 -1.1137e-03  1.8330e-02  1.8948e-01         0.8497\n1879713   3.6228e-03 -1.0912e-03  9.7824e-03  4.7662e-02         0.9620\n1882216   8.8870e-02 -1.0880e-03  2.4250e-02  5.7768e-01         0.5635\n1890089   7.6348e-02 -1.0777e-03  2.4022e-02  4.9955e-01         0.6174\n1946338   1.0824e-01 -1.0061e-03  1.0696e-02  1.0563e+00         0.2908\n1949733  -3.6585e-01 -1.0018e-03  1.0651e-02 -3.5353e+00         0.0004\n2007300  -1.3891e-01 -9.3120e-04  1.2072e-02 -1.2558e+00         0.2092\n2058450   1.0037e-02 -8.7061e-04  1.1287e-02  1.0267e-01         0.9182\n2070309  -1.1868e-02 -8.5685e-04  5.7799e-03 -1.4483e-01         0.8848\n2132844   8.1610e-02 -7.8612e-04  8.3592e-03  9.0121e-01         0.3675\n2263922   2.4856e-02 -6.4775e-04  1.4444e-02  2.1220e-01         0.8319\n2571747   2.7740e-02 -3.7542e-04  4.8696e-03  4.0290e-01         0.6870\n2607259   3.5036e-02 -3.4875e-04  5.7446e-03  4.6687e-01         0.6406\n2712550   2.8804e-02 -2.7545e-04  2.9305e-03  5.3717e-01         0.5911\n2713186   7.0501e-02 -2.7504e-04  9.3446e-03  7.3216e-01         0.4641\n2911924  -3.9591e-01 -1.6033e-04  5.4478e-03 -5.3618e+00         0.0000\n3101583  -1.4678e-01 -7.9547e-05  1.3106e-03 -4.0521e+00         0.0001\n3137805   2.3058e-02 -6.7306e-05  7.1621e-04  8.6413e-01         0.3875\n3461450   5.3107e-03 -3.2999e-06  4.2820e-05  8.1209e-01         0.4167\n3480829  -1.5869e-02 -2.0567e-06  1.8457e-05 -3.6932e+00         0.0002\n3543982   4.2599e-04 -3.5239e-08  2.4315e-06  2.7321e-01         0.7847\n3872425  -1.0659e-02 -3.9620e-05  5.1409e-04 -4.6834e-01         0.6395\n4170030  -1.4425e-02 -1.4806e-04  1.3285e-03 -3.9168e-01         0.6953\n4707688  -5.6720e-02 -5.1889e-04  8.5456e-03 -6.0796e-01         0.5432\n4746547   5.2200e-02 -5.5442e-04  9.1304e-03  5.5209e-01         0.5809\n4842579   4.8323e-02 -6.4726e-04  6.8836e-03  5.9023e-01         0.5550\n5508086   3.1701e-01 -1.4881e-03  1.5812e-02  2.5328e+00         0.0113\n5626923   5.2899e-02 -1.6745e-03  3.7302e-02  2.8256e-01         0.7775\n6262555   7.7713e-02 -2.8586e-03  6.3603e-02  3.1948e-01         0.7494\n7412807   0.0000e+00  0.0000e+00  0.0000e+00         NaN            NaN\n7427535  -9.1518e-02 -5.8458e-03  7.5412e-02 -3.1198e-01         0.7551\n9637081  -6.3542e-02 -1.4416e-02  1.5120e-01 -1.2634e-01         0.8995\n10813847  5.6402e-01 -2.0532e-02  4.4873e-01  8.7263e-01         0.3829\n10855074 -1.9045e-01 -2.0766e-02  2.6386e-01 -3.3033e-01         0.7412\n11825310  5.5218e-01 -2.6651e-02  8.8161e-01  6.1647e-01         0.5376\n14076183 -2.3999e-01 -4.3129e-02  5.3551e-01 -2.6902e-01         0.7879\n48196182 -7.1729e-01 -7.7628e-01  1.8482e+00  4.3387e-02         0.9654\n```\n\n\n:::\n:::\n\n\n:::\n\n#### Mapping the local Moran’s I\n\nBefore mapping the local Moran’s I map, it is wise to append the local Moran’s I dataframe\n\n::: panel-tabset\n\n### Pre\n\n::: {.cell}\n\n```{.r .cell-code}\nPre.localMI <- cbind(Pre,localMI1) %>%\n  rename(Pr.Ii = Pr.z....E.Ii..)\n```\n:::\n\n### Cov\n\n::: {.cell}\n\n```{.r .cell-code}\nCov.localMI <- cbind(Cov,localMI2) %>%\n  rename(Pr.Ii = Pr.z....E.Ii..)\n```\n:::\n\n\n### Post\n\n::: {.cell}\n\n```{.r .cell-code}\nPost.localMI <- cbind(Post,localMI3) %>%\n  rename(Pr.Ii = Pr.z....E.Ii..)\n```\n:::\n\n:::\n#### Mapping local Moran’s I values\n\nUsing choropleth mapping functions of **tmap** package, we can plot the local Moran’s I values by using the code chinks below.\n\n::: panel-tabset\n\n### Pre\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(Pre.localMI) +\n  tm_fill(col = \"Ii\", \n          style = \"pretty\",\n          palette = \"RdBu\",\n          title = \"local moran statistics\") +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nVariable(s) \"Ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](Take-Home_Exercise02_files/figure-html/unnamed-chunk-77-1.png){width=672}\n:::\n:::\n\n\n### Cov\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(Cov.localMI) +\n  tm_fill(col = \"Ii\", \n          style = \"pretty\",\n          palette = \"RdBu\",\n          title = \"local moran statistics\") +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nVariable(s) \"Ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](Take-Home_Exercise02_files/figure-html/unnamed-chunk-78-1.png){width=672}\n:::\n:::\n\n\n### Post\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(Post.localMI) +\n  tm_fill(col = \"Ii\", \n          style = \"pretty\",\n          palette = \"RdBu\",\n          title = \"local moran statistics\") +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nVariable(s) \"Ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](Take-Home_Exercise02_files/figure-html/unnamed-chunk-79-1.png){width=672}\n:::\n:::\n\n:::\n#### Mapping local Moran’s I p-values\n\nThe choropleth shows there is evidence for both positive and negative Ii values. However, it is useful to consider the p-values for each of these values, as consider above.\n\nThe code chunks below produce a choropleth map of Moran’s I p-values by using functions of **tmap** package.\n\n::: panel-tabset\n\n### Pre\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(Pre.localMI) +\n  tm_fill(col = \"Pr.Ii\", \n          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n          palette=\"-Blues\", \n          title = \"local Moran's I p-values\") +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nSome legend labels were too wide. These labels have been resized to 0.61. Increase legend.width (argument of tm_layout) to make the legend wider and therefore the labels larger.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](Take-Home_Exercise02_files/figure-html/unnamed-chunk-80-1.png){width=672}\n:::\n:::\n\n### Cov\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(Cov.localMI) +\n  tm_fill(col = \"Pr.Ii\", \n          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n          palette=\"-Blues\", \n          title = \"local Moran's I p-values\") +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nSome legend labels were too wide. These labels have been resized to 0.61. Increase legend.width (argument of tm_layout) to make the legend wider and therefore the labels larger.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](Take-Home_Exercise02_files/figure-html/unnamed-chunk-81-1.png){width=672}\n:::\n:::\n\n### Post\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(Post.localMI) +\n  tm_fill(col = \"Pr.Ii\", \n          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n          palette=\"-Blues\", \n          title = \"local Moran's I p-values\") +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nSome legend labels were too wide. These labels have been resized to 0.61. Increase legend.width (argument of tm_layout) to make the legend wider and therefore the labels larger.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](Take-Home_Exercise02_files/figure-html/unnamed-chunk-82-1.png){width=672}\n:::\n:::\n\n:::\n\n## **Creating a LISA Cluster Map**\n\nThe LISA Cluster Map shows the significant locations color coded by type of spatial autocorrelation. The first step before we can generate the LISA cluster map is to plot the Moran scatterplot.\n\n### **Plotting Moran scatterplot**\n\nThe Moran scatterplot is an illustration of the relationship between the values of the chosen attribute at each location and the average value of the same attribute at neighboring locations.\n\nThe code chunk below plots the Moran scatterplot of Tourism by using [*moran.plot()*](https://r-spatial.github.io/spdep/reference/moran.plot.html) of **spdep**.\n\n::: panel-tabset\n\n### Pre\n\n::: {.cell}\n\n```{.r .cell-code}\nncipre <- moran.plot(Pre$value, rswm_qlocal1,\n                  labels=as.character(Pre$province_eng), \n                  xlab=\"Tourists\", \n                  ylab=\"Spatially Lag tourists\")\n```\n\n::: {.cell-output-display}\n![](Take-Home_Exercise02_files/figure-html/unnamed-chunk-83-1.png){width=672}\n:::\n:::\n\n### Cov\n\n::: {.cell}\n\n```{.r .cell-code}\nncicov <- moran.plot(Cov$value, rswm_qlocal2,\n                  labels=as.character(Cov$province_eng), \n                  xlab=\"Tourists\", \n                  ylab=\"Spatially Lag tourists\")\n```\n\n::: {.cell-output-display}\n![](Take-Home_Exercise02_files/figure-html/unnamed-chunk-84-1.png){width=672}\n:::\n:::\n\n### Post\n\n::: {.cell}\n\n```{.r .cell-code}\nncipost <- moran.plot(Post$value, rswm_qlocal3,\n                  labels=as.character(Post$province_eng), \n                  xlab=\"Tourists\", \n                  ylab=\"Spatially Lag tourists\")\n```\n\n::: {.cell-output-display}\n![](Take-Home_Exercise02_files/figure-html/unnamed-chunk-85-1.png){width=672}\n:::\n:::\n\n:::\nNotice that the plots are split in 4 quadrants. The top right corner belongs to areas that have high tourism numbers and are surrounded by other areas that have the average level of toursism.\n\n\n### **Preparing LISA map classes**\n\nThe code chunks below show the steps to prepare a LISA cluster map.\n\n::: panel-tabset\n\n### Pre\n\n\n::: {.cell}\n\n```{.r .cell-code}\nquadrantpre <- vector(mode=\"numeric\",length=nrow(localMI1))\nPre$lag_value <- lag.listw(rswm_qlocal1, Pre$value)\nDV1 <- Pre$lag_value - mean(Pre$lag_value)     \nLM_IPre <- localMI1[,1]   \nsignif <- 0.05       \nquadrantpre[DV1 <0 & LM_IPre>0] <- 1\nquadrantpre[DV1 >0 & LM_IPre<0] <- 2\nquadrantpre[DV1 <0 & LM_IPre<0] <- 3  \nquadrantpre[DV1 >0 & LM_IPre>0] <- 4    \nquadrantpre[localMI1[,5]>signif] <- 0\n```\n:::\n\n\n### Cov\n\n::: {.cell}\n\n```{.r .cell-code}\nquadrantcov <- vector(mode=\"numeric\",length=nrow(localMI2))\nCov$lag_value <- lag.listw(rswm_qlocal2, Cov$value)\nDV2 <- Cov$lag_value - mean(Cov$lag_value)     \nLM_ICov <- localMI2[,1]   \nsignif <- 0.05       \nquadrantcov[DV2 <0 & LM_ICov>0] <- 1\nquadrantcov[DV2 >0 & LM_ICov<0] <- 2\nquadrantcov[DV2 <0 & LM_ICov<0] <- 3  \nquadrantcov[DV2 >0 & LM_ICov>0] <- 4    \nquadrantcov[localMI2[,5]>signif] <- 0\n```\n:::\n\n### Post\n\n::: {.cell}\n\n```{.r .cell-code}\nquadrantpost <- vector(mode=\"numeric\",length=nrow(localMI3))\nPost$lag_value <- lag.listw(rswm_qlocal3, Post$value)\nDV3 <- Post$lag_value - mean(Post$lag_value)     \nLM_IPost <- localMI3[,1]   \nsignif <- 0.05       \nquadrantpost[DV3 <0 & LM_IPost>0] <- 1\nquadrantpost[DV3 >0 & LM_IPost<0] <- 2\nquadrantpost[DV3 <0 & LM_IPost<0] <- 3  \nquadrantpost[DV3 >0 & LM_IPost>0] <- 4    \nquadrantpost[localMI3[,5]>signif] <- 0\n```\n:::\n\n:::\n### **Plotting LISA map**\n\nNow, we can build the LISA map by using the code chunks below.\n\n::: panel-tabset\n\n### Pre\n\n::: {.cell}\n\n```{.r .cell-code}\nPre.localMI$quadrantpre <- quadrantpre\ncolors <- c(\"#ffffff\", \"#2c7bb6\", \"#abd9e9\", \"#fdae61\", \"#d7191c\")\nclusters <- c(\"insignificant\", \"low-low\", \"low-high\", \"high-low\", \"high-high\")\n\ntm_shape(Pre.localMI) +\n  tm_fill(col = \"quadrantpre\", \n          style = \"cat\", \n          palette = colors[c(sort(unique(quadrantpre)))+1], \n          labels = clusters[c(sort(unique(quadrantpre)))+1],\n          popup.vars = c(\"\")) +\n  tm_view(set.zoom.limits = c(11,17)) +\n  tm_borders(alpha=0.5)\n```\n\n::: {.cell-output-display}\n![](Take-Home_Exercise02_files/figure-html/unnamed-chunk-89-1.png){width=672}\n:::\n:::\n\n\n### Cov\n\n::: {.cell}\n\n```{.r .cell-code}\nCov.localMI$quadrantcov <- quadrantcov\ncolors <- c(\"#ffffff\", \"#2c7bb6\", \"#abd9e9\", \"#fdae61\", \"#d7191c\")\nclusters <- c(\"insignificant\", \"low-low\", \"low-high\", \"high-low\", \"high-high\")\n\ntm_shape(Cov.localMI) +\n  tm_fill(col = \"quadrantcov\", \n          style = \"cat\", \n          palette = colors[c(sort(unique(quadrantcov)))+1], \n          labels = clusters[c(sort(unique(quadrantcov)))+1],\n          popup.vars = c(\"\")) +\n  tm_view(set.zoom.limits = c(11,17)) +\n  tm_borders(alpha=0.5)\n```\n\n::: {.cell-output-display}\n![](Take-Home_Exercise02_files/figure-html/unnamed-chunk-90-1.png){width=672}\n:::\n:::\n\n### Post\n\n::: {.cell}\n\n```{.r .cell-code}\nPost.localMI$quadrantpost <- quadrantpost\ncolors <- c(\"#ffffff\", \"#2c7bb6\", \"#abd9e9\", \"#fdae61\", \"#d7191c\")\nclusters <- c(\"insignificant\", \"low-low\", \"low-high\", \"high-low\", \"high-high\")\n\ntm_shape(Post.localMI) +\n  tm_fill(col = \"quadrantpost\", \n          style = \"cat\", \n          palette = colors[c(sort(unique(quadrantpost)))+1], \n          labels = clusters[c(sort(unique(quadrantpost)))+1],\n          popup.vars = c(\"\")) +\n  tm_view(set.zoom.limits = c(11,17)) +\n  tm_borders(alpha=0.5)\n```\n\n::: {.cell-output-display}\n![](Take-Home_Exercise02_files/figure-html/unnamed-chunk-91-1.png){width=672}\n:::\n:::\n\n:::\n\n\n# **Hot Spot and Cold Spot Area Analysis**\n\nBeside detecting cluster and outliers, localised spatial statistics can be also used to detect hot spot and/or cold spot areas.\n\nThe term ‘hot spot’ has been used generically across disciplines to describe a region or value that is higher relative to its surroundings (Lepers et al 2005, Aben et al 2012, Isobe et al 2015).\n\n### **Getis and Ord’s G-Statistics**\n\nAn alternative spatial statistics to detect spatial anomalies is the Getis and Ord’s G-statistics (Getis and Ord, 1972; Ord and Getis, 1995). It looks at neighbours within a defined proximity to identify where either high or low values clutser spatially. Here, statistically significant hot-spots are recognised as areas of high values where other areas within a neighbourhood range also share high values too.\n\nThe analysis consists of three steps:\n\n-   Deriving spatial weight matrix\n\n-   Computing Gi statistics\n\n-   Mapping Gi statistics\n\n### **Deriving distance-based weight matrix**\n\nFirst, we need to define a new set of neighbours. Whist the spatial autocorrelation considered units which shared borders, for Getis-Ord we are defining neighbours based on distance.\n\nThere are two type of distance-based proximity matrix, they are:\n\n-   fixed distance weight matrix; and\n\n-   adaptive distance weight matrix.\n\n#### Deriving the centroid\n\nWe will need points to associate with each polygon before we can make our connectivity graph. It will be a little more complicated than just running *st_centroid()* on the sf object: **us.bound**. We need the coordinates in a separate data frame for this to work. To do this we will use a mapping function. The mapping function applies a given function to each element of a vector and returns a vector of the same length. Our input vector will be the geometry column of us.bound. Our function will be *st_centroid()*. We will be using map_dbl variation of map from the purrr package. For more documentation, check out map documentation\n\nTo get our longitude values we map the *st_centroid()* function over the geometry column of us.bound and access the longitude value through double bracket notation \\[\\[\\]\\] and 1. This allows us to get only the longitude, which is the first value in each centroid.\n\n::: panel-tabset\n\n### Pre\n\n::: {.cell}\n\n```{.r .cell-code}\nlongitude1 <- map_dbl(Pre$geometry, ~st_centroid(.x)[[1]])\n```\n:::\n\n\nWe do the same for latitude with one key difference. We access the second value per each centroid with \\[\\[2\\]\\].\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlatitude1 <- map_dbl(Pre$geometry, ~st_centroid(.x)[[2]])\n```\n:::\n\n\nNow that we have latitude and longitude, we use cbind to put longitude and latitude into the same object.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncoords1 <- cbind(longitude1, latitude1)\n```\n:::\n\n\n### Cov\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlongitude2 <- map_dbl(Cov$geometry, ~st_centroid(.x)[[1]])\n```\n:::\n\n\nWe do the same for latitude with one key difference. We access the second value per each centroid with \\[\\[2\\]\\].\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlatitude2 <- map_dbl(Cov$geometry, ~st_centroid(.x)[[2]])\n```\n:::\n\n\nNow that we have latitude and longitude, we use cbind to put longitude and latitude into the same object.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncoords2 <- cbind(longitude2, latitude2)\n```\n:::\n\n### Post\n\n::: {.cell}\n\n```{.r .cell-code}\nlongitude3 <- map_dbl(Post$geometry, ~st_centroid(.x)[[1]])\n```\n:::\n\n\nWe do the same for latitude with one key difference. We access the second value per each centroid with \\[\\[2\\]\\].\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlatitude3 <- map_dbl(Post$geometry, ~st_centroid(.x)[[2]])\n```\n:::\n\n\nNow that we have latitude and longitude, we use cbind to put longitude and latitude into the same object.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncoords3 <- cbind(longitude3, latitude3)\n```\n:::\n\n:::\n#### Determine the cut-off distance\n\nFirstly, we need to determine the upper limit for distance band by using the steps below:\n\n-   Return a matrix with the indices of points belonging to the set of the k nearest neighbours of each other by using [*knearneigh()*](https://r-spatial.github.io/spdep/reference/knearneigh.html) of **spdep**.\n\n-   Convert the knn object returned by *knearneigh()* into a neighbours list of class nb with a list of integer vectors containing neighbour region number ids by using [*knn2nb()*](https://r-spatial.github.io/spdep/reference/knn2nb.html).\n\n-   Return the length of neighbour relationship edges by using [*nbdists()*](https://r-spatial.github.io/spdep/reference/nbdists.html) of **spdep**. The function returns in the units of the coordinates if the coordinates are projected, in km otherwise.\n\n-   Remove the list structure of the returned object by using [**unlist()**](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/unlist).\n\n::: panel-tabset\n\n### Pre\n\n::: {.cell}\n\n```{.r .cell-code}\nk1pre <- knn2nb(knearneigh(coords1))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in knn2nb(knearneigh(coords1)): neighbour object has 18 sub-graphs\n```\n\n\n:::\n\n```{.r .cell-code}\nk1distspre <- unlist(nbdists(k1pre, coords1, longlat = TRUE))\nsummary(k1distspre)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  21.55   52.52   69.06   66.79   77.42  124.72 \n```\n\n\n:::\n:::\n\n### Cov\n\n::: {.cell}\n\n```{.r .cell-code}\nk1cov <- knn2nb(knearneigh(coords2))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in knn2nb(knearneigh(coords2)): neighbour object has 18 sub-graphs\n```\n\n\n:::\n\n```{.r .cell-code}\nk1distscov <- unlist(nbdists(k1cov, coords2, longlat = TRUE))\nsummary(k1distscov)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  21.55   52.52   69.06   66.79   77.42  124.72 \n```\n\n\n:::\n:::\n\n### Post\n\n::: {.cell}\n\n```{.r .cell-code}\nk1post <- knn2nb(knearneigh(coords3))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in knn2nb(knearneigh(coords3)): neighbour object has 18 sub-graphs\n```\n\n\n:::\n\n```{.r .cell-code}\nk1distspost <- unlist(nbdists(k1post, coords3, longlat = TRUE))\nsummary(k1distspost)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  21.55   52.52   69.06   66.79   77.42  124.72 \n```\n\n\n:::\n:::\n\n:::\nThe summary report shows that the largest first nearest neighbour distance is 61.79 km, so using this as the upper threshold gives certainty that all units will have at least one neighbour.\n\n#### Computing fixed distance weight matrix\n\nNow, we will compute the distance weight matrix by using [*dnearneigh()*](https://r-spatial.github.io/spdep/reference/dnearneigh.html) as shown in the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwm_d53 <- dnearneigh(coords1, 0, 53, longlat = TRUE)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in dnearneigh(coords1, 0, 53, longlat = TRUE): neighbour object has 55\nsub-graphs\n```\n\n\n:::\n\n```{.r .cell-code}\nwm_d53\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nNeighbour list object:\nNumber of regions: 69 \nNumber of nonzero links: 40 \nPercentage nonzero weights: 0.8401596 \nAverage number of links: 0.5797101 \n51 regions with no links:\n9, 10, 11, 12, 14, 15, 16, 17, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29,\n30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\n48, 50, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 67, 68, 69\n55 disjoint connected subgraphs\n```\n\n\n:::\n:::\n\n\nNext, *nb2listw()* is used to convert the nb object into spatial weights object.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwm53_lw <- nb2listw(wm_d53, style = 'B', zero.policy = TRUE)\nsummary(wm53_lw)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 69 \nNumber of nonzero links: 40 \nPercentage nonzero weights: 0.8401596 \nAverage number of links: 0.5797101 \n51 regions with no links:\n9, 10, 11, 12, 14, 15, 16, 17, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29,\n30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\n48, 50, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 67, 68, 69\n55 disjoint connected subgraphs\nLink number distribution:\n\n 0  1  2  3  4  6 \n51  9  2  3  3  1 \n9 least connected regions:\n7 8 13 18 20 49 51 65 66 with 1 link\n1 most connected region:\n3 with 6 links\n\nWeights style: B \nWeights constants summary:\n   n  nn S0 S1  S2\nB 18 324 40 80 512\n```\n\n\n:::\n:::\n\n\nThe output spatial weights object is called `wm53_lw`.\n\n### **Computing adaptive distance weight matrix**\n\nOne of the characteristics of fixed distance weight matrix is that more densely settled areas (usually the urban areas) tend to have more neighbours and the less densely settled areas (usually the rural counties) tend to have lesser neighbours. Having many neighbours smoothes the neighbour relationship across more neighbours.\n\nIt is possible to control the numbers of neighbours directly using k-nearest neighbours, either accepting asymmetric neighbours or imposing symmetry as shown in the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nknn <- knn2nb(knearneigh(coords1, k=8))\nknn\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nNeighbour list object:\nNumber of regions: 69 \nNumber of nonzero links: 552 \nPercentage nonzero weights: 11.5942 \nAverage number of links: 8 \nNon-symmetric neighbours list\n```\n\n\n:::\n:::\n\n\nNext, *nb2listw()* is used to convert the nb object into spatial weights object.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nknn_lw <- nb2listw(knn, style = 'B')\nsummary(knn_lw)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 69 \nNumber of nonzero links: 552 \nPercentage nonzero weights: 11.5942 \nAverage number of links: 8 \nNon-symmetric neighbours list\nLink number distribution:\n\n 8 \n69 \n69 least connected regions:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 with 8 links\n69 most connected regions:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 with 8 links\n\nWeights style: B \nWeights constants summary:\n   n   nn  S0  S1    S2\nB 69 4761 552 972 18472\n```\n\n\n:::\n:::\n\n\n## **Computing Gi statistics**\n\n### **Gi statistics using fixed distance**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfips11 <- order(Pre$province_eng)\ngi.fixedPre <- localG(Pre$value, wm53_lw)\ngi.fixedCov <- localG(Cov$value, wm53_lw)\ngi.fixedPost <- localG(Post$value, wm53_lw)\ngi.fixedPre\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] -0.383057414  4.267428706  3.231730034  4.073612615 -0.422558627\n [6]  0.009110214 -0.386499267 -0.106684353          NaN          NaN\n[11]          NaN          NaN  0.050594690          NaN          NaN\n[16]          NaN          NaN -0.449803957          NaN -0.412179654\n[21]          NaN          NaN          NaN          NaN          NaN\n[26]          NaN          NaN          NaN          NaN          NaN\n[31]          NaN          NaN          NaN          NaN          NaN\n[36]          NaN          NaN          NaN          NaN          NaN\n[41]          NaN          NaN          NaN          NaN          NaN\n[46]          NaN          NaN          NaN -0.231812957          NaN\n[51] -0.381217592 -0.310346441  3.732782576 -0.357109083          NaN\n[56]          NaN          NaN          NaN          NaN          NaN\n[61]          NaN          NaN          NaN          NaN -0.287656830\n[66] -0.295132454          NaN          NaN          NaN\nattr(,\"internals\")\n               Gi      E(Gi)        V(Gi)        Z(Gi) Pr(z != E(Gi))\n [1,] 0.048128995 0.05882353 0.0007794639 -0.383057414   7.016772e-01\n [2,] 0.266524054 0.04411765 0.0027162019  4.267428706   1.977389e-05\n [3,] 0.320259915 0.08823529 0.0051546359  3.231730034   1.230432e-03\n [4,] 0.300779496 0.05882353 0.0035278752  4.073612615   4.628945e-05\n [5,] 0.021740826 0.04411765 0.0028042895 -0.422558627   6.726173e-01\n [6,] 0.044587328 0.04411765 0.0026579656  0.009110214   9.927312e-01\n [7,] 0.003038722 0.01470588 0.0009112405 -0.386499267   6.991269e-01\n [8,] 0.011435713 0.01470588 0.0009395915 -0.106684353   9.150394e-01\n [9,] 0.000000000 0.00000000 0.0000000000          NaN            NaN\n[10,] 0.000000000 0.00000000 0.0000000000          NaN            NaN\n[11,] 0.000000000 0.00000000 0.0000000000          NaN            NaN\n[12,] 0.000000000 0.00000000 0.0000000000          NaN            NaN\n[13,] 0.016249096 0.01470588 0.0009303414  0.050594690   9.596485e-01\n[14,] 0.000000000 0.00000000 0.0000000000          NaN            NaN\n[15,] 0.000000000 0.00000000 0.0000000000          NaN            NaN\n[16,] 0.000000000 0.00000000 0.0000000000          NaN            NaN\n[17,] 0.000000000 0.00000000 0.0000000000          NaN            NaN\n[18,] 0.001125102 0.01470588 0.0009115971 -0.449803957   6.528518e-01\n[19,] 0.000000000 0.00000000 0.0000000000          NaN            NaN\n[20,] 0.002278466 0.01470588 0.0009090518 -0.412179654   6.802077e-01\n[21,] 0.000000000 0.00000000 0.0000000000          NaN            NaN\n[22,] 0.000000000 0.00000000 0.0000000000          NaN            NaN\n[23,] 0.000000000 0.00000000 0.0000000000          NaN            NaN\n[24,] 0.000000000 0.00000000 0.0000000000          NaN            NaN\n[25,] 0.000000000 0.00000000 0.0000000000          NaN            NaN\n[26,] 0.000000000 0.00000000 0.0000000000          NaN            NaN\n[27,] 0.000000000 0.00000000 0.0000000000          NaN            NaN\n[28,] 0.000000000 0.00000000 0.0000000000          NaN            NaN\n[29,] 0.000000000 0.00000000 0.0000000000          NaN            NaN\n[30,] 0.000000000 0.00000000 0.0000000000          NaN            NaN\n[31,] 0.000000000 0.00000000 0.0000000000          NaN            NaN\n[32,] 0.000000000 0.00000000 0.0000000000          NaN            NaN\n[33,] 0.000000000 0.00000000 0.0000000000          NaN            NaN\n[34,] 0.000000000 0.00000000 0.0000000000          NaN            NaN\n[35,] 0.000000000 0.00000000 0.0000000000          NaN            NaN\n[36,] 0.000000000 0.00000000 0.0000000000          NaN            NaN\n[37,] 0.000000000 0.00000000 0.0000000000          NaN            NaN\n[38,] 0.000000000 0.00000000 0.0000000000          NaN            NaN\n[39,] 0.000000000 0.00000000 0.0000000000          NaN            NaN\n[40,] 0.000000000 0.00000000 0.0000000000          NaN            NaN\n[41,] 0.000000000 0.00000000 0.0000000000          NaN            NaN\n[42,] 0.000000000 0.00000000 0.0000000000          NaN            NaN\n[43,] 0.000000000 0.00000000 0.0000000000          NaN            NaN\n[44,] 0.000000000 0.00000000 0.0000000000          NaN            NaN\n[45,] 0.000000000 0.00000000 0.0000000000          NaN            NaN\n[46,] 0.000000000 0.00000000 0.0000000000          NaN            NaN\n[47,] 0.000000000 0.00000000 0.0000000000          NaN            NaN\n[48,] 0.000000000 0.00000000 0.0000000000          NaN            NaN\n[49,] 0.007656099 0.01470588 0.0009248603 -0.231812957   8.166833e-01\n[50,] 0.000000000 0.00000000 0.0000000000          NaN            NaN\n[51,] 0.003069095 0.01470588 0.0009317949 -0.381217592   7.030418e-01\n[52,] 0.016066964 0.02941176 0.0018489734 -0.310346441   7.562975e-01\n[53,] 0.279974868 0.05882353 0.0035100537  3.732782576   1.893761e-04\n[54,] 0.014184071 0.02941176 0.0018183039 -0.357109083   7.210101e-01\n[55,] 0.000000000 0.00000000 0.0000000000          NaN            NaN\n[56,] 0.000000000 0.00000000 0.0000000000          NaN            NaN\n[57,] 0.000000000 0.00000000 0.0000000000          NaN            NaN\n[58,] 0.000000000 0.00000000 0.0000000000          NaN            NaN\n[59,] 0.000000000 0.00000000 0.0000000000          NaN            NaN\n[60,] 0.000000000 0.00000000 0.0000000000          NaN            NaN\n[61,] 0.000000000 0.00000000 0.0000000000          NaN            NaN\n[62,] 0.000000000 0.00000000 0.0000000000          NaN            NaN\n[63,] 0.000000000 0.00000000 0.0000000000          NaN            NaN\n[64,] 0.000000000 0.00000000 0.0000000000          NaN            NaN\n[65,] 0.005985470 0.01470588 0.0009190193 -0.287656830   7.736094e-01\n[66,] 0.005756492 0.01470588 0.0009195026 -0.295132454   7.678927e-01\n[67,] 0.000000000 0.00000000 0.0000000000          NaN            NaN\n[68,] 0.000000000 0.00000000 0.0000000000          NaN            NaN\n[69,] 0.000000000 0.00000000 0.0000000000          NaN            NaN\nattr(,\"cluster\")\n [1] High Low  Low  Low  High Low  Low  High High Low  Low  Low  Low  Low  High\n[16] Low  Low  Low  Low  Low  Low  High High Low  Low  Low  Low  Low  Low  Low \n[31] Low  High Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low \n[46] Low  Low  Low  Low  High Low  High Low  Low  High High Low  High High High\n[61] Low  Low  High Low  Low  Low  Low  Low  Low \nLevels: Low High\nattr(,\"gstari\")\n[1] FALSE\nattr(,\"call\")\nlocalG(x = Pre$value, listw = wm53_lw)\nattr(,\"class\")\n[1] \"localG\"\n```\n\n\n:::\n\n```{.r .cell-code}\ngi.fixedCov\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] -0.816848955  3.920841383  2.892474453  3.815650816 -0.544925844\n [6]  0.138811924 -0.466157899 -0.042139523          NaN          NaN\n[11]          NaN          NaN  0.007203213          NaN          NaN\n[16]          NaN          NaN -0.544307566          NaN -0.498406047\n[21]          NaN          NaN          NaN          NaN          NaN\n[26]          NaN          NaN          NaN          NaN          NaN\n[31]          NaN          NaN          NaN          NaN          NaN\n[36]          NaN          NaN          NaN          NaN          NaN\n[41]          NaN          NaN          NaN          NaN          NaN\n[46]          NaN          NaN          NaN -0.124070083          NaN\n[51] -0.456829251 -0.453549943  3.506725387 -0.417523654          NaN\n[56]          NaN          NaN          NaN          NaN          NaN\n[61]          NaN          NaN          NaN          NaN -0.372132305\n[66] -0.393517670          NaN          NaN          NaN\nattr(,\"internals\")\n               Gi      E(Gi)        V(Gi)        Z(Gi) Pr(z != E(Gi))\n [1,] 0.035870272 0.05882353 0.0007895964 -0.816848955   4.140148e-01\n [2,] 0.208788081 0.04411765 0.0017638949  3.920841383   8.824033e-05\n [3,] 0.256258942 0.08823529 0.0033744403  2.892474453   3.822203e-03\n [4,] 0.241907832 0.05882353 0.0023023162  3.815650816   1.358245e-04\n [5,] 0.020784265 0.04411765 0.0018334986 -0.544925844   5.858045e-01\n [6,] 0.049907291 0.04411765 0.0017396030  0.138811924   8.895988e-01\n [7,] 0.003323466 0.01470588 0.0005962149 -0.466157899   6.411025e-01\n [8,] 0.013662131 0.01470588 0.0006135010 -0.042139523   9.663875e-01\n [9,] 0.000000000 0.00000000 0.0000000000          NaN            NaN\n[10,] 0.000000000 0.00000000 0.0000000000          NaN            NaN\n[11,] 0.000000000 0.00000000 0.0000000000          NaN            NaN\n[12,] 0.000000000 0.00000000 0.0000000000          NaN            NaN\n[13,] 0.014884075 0.01470588 0.0006119661  0.007203213   9.942527e-01\n[14,] 0.000000000 0.00000000 0.0000000000          NaN            NaN\n[15,] 0.000000000 0.00000000 0.0000000000          NaN            NaN\n[16,] 0.000000000 0.00000000 0.0000000000          NaN            NaN\n[17,] 0.000000000 0.00000000 0.0000000000          NaN            NaN\n[18,] 0.001411810 0.01470588 0.0005965232 -0.544307566   5.862298e-01\n[19,] 0.000000000 0.00000000 0.0000000000          NaN            NaN\n[20,] 0.002551150 0.01470588 0.0005947360 -0.498406047   6.181979e-01\n[21,] 0.000000000 0.00000000 0.0000000000          NaN            NaN\n[22,] 0.000000000 0.00000000 0.0000000000          NaN            NaN\n[23,] 0.000000000 0.00000000 0.0000000000          NaN            NaN\n[24,] 0.000000000 0.00000000 0.0000000000          NaN            NaN\n[25,] 0.000000000 0.00000000 0.0000000000          NaN            NaN\n[26,] 0.000000000 0.00000000 0.0000000000          NaN            NaN\n[27,] 0.000000000 0.00000000 0.0000000000          NaN            NaN\n[28,] 0.000000000 0.00000000 0.0000000000          NaN            NaN\n[29,] 0.000000000 0.00000000 0.0000000000          NaN            NaN\n[30,] 0.000000000 0.00000000 0.0000000000          NaN            NaN\n[31,] 0.000000000 0.00000000 0.0000000000          NaN            NaN\n[32,] 0.000000000 0.00000000 0.0000000000          NaN            NaN\n[33,] 0.000000000 0.00000000 0.0000000000          NaN            NaN\n[34,] 0.000000000 0.00000000 0.0000000000          NaN            NaN\n[35,] 0.000000000 0.00000000 0.0000000000          NaN            NaN\n[36,] 0.000000000 0.00000000 0.0000000000          NaN            NaN\n[37,] 0.000000000 0.00000000 0.0000000000          NaN            NaN\n[38,] 0.000000000 0.00000000 0.0000000000          NaN            NaN\n[39,] 0.000000000 0.00000000 0.0000000000          NaN            NaN\n[40,] 0.000000000 0.00000000 0.0000000000          NaN            NaN\n[41,] 0.000000000 0.00000000 0.0000000000          NaN            NaN\n[42,] 0.000000000 0.00000000 0.0000000000          NaN            NaN\n[43,] 0.000000000 0.00000000 0.0000000000          NaN            NaN\n[44,] 0.000000000 0.00000000 0.0000000000          NaN            NaN\n[45,] 0.000000000 0.00000000 0.0000000000          NaN            NaN\n[46,] 0.000000000 0.00000000 0.0000000000          NaN            NaN\n[47,] 0.000000000 0.00000000 0.0000000000          NaN            NaN\n[48,] 0.000000000 0.00000000 0.0000000000          NaN            NaN\n[49,] 0.011642813 0.01470588 0.0006095081 -0.124070083   9.012598e-01\n[50,] 0.000000000 0.00000000 0.0000000000          NaN            NaN\n[51,] 0.003371066 0.01470588 0.0006156319 -0.456829251   6.477938e-01\n[52,] 0.013657683 0.02941176 0.0012065240 -0.453549943   6.501528e-01\n[53,] 0.226382553 0.05882353 0.0022831378  3.506725387   4.536571e-04\n[54,] 0.014944295 0.02941176 0.0012006682 -0.417523654   6.762954e-01\n[55,] 0.000000000 0.00000000 0.0000000000          NaN            NaN\n[56,] 0.000000000 0.00000000 0.0000000000          NaN            NaN\n[57,] 0.000000000 0.00000000 0.0000000000          NaN            NaN\n[58,] 0.000000000 0.00000000 0.0000000000          NaN            NaN\n[59,] 0.000000000 0.00000000 0.0000000000          NaN            NaN\n[60,] 0.000000000 0.00000000 0.0000000000          NaN            NaN\n[61,] 0.000000000 0.00000000 0.0000000000          NaN            NaN\n[62,] 0.000000000 0.00000000 0.0000000000          NaN            NaN\n[63,] 0.000000000 0.00000000 0.0000000000          NaN            NaN\n[64,] 0.000000000 0.00000000 0.0000000000          NaN            NaN\n[65,] 0.005588228 0.01470588 0.0006003043 -0.372132305   7.097943e-01\n[66,] 0.005057940 0.01470588 0.0006010919 -0.393517670   6.939372e-01\n[67,] 0.000000000 0.00000000 0.0000000000          NaN            NaN\n[68,] 0.000000000 0.00000000 0.0000000000          NaN            NaN\n[69,] 0.000000000 0.00000000 0.0000000000          NaN            NaN\nattr(,\"cluster\")\n [1] High Low  Low  Low  High Low  Low  High High Low  Low  High Low  Low  High\n[16] Low  Low  Low  Low  Low  Low  High High Low  Low  Low  Low  Low  Low  Low \n[31] Low  High Low  Low  Low  Low  Low  Low  High Low  Low  Low  Low  Low  Low \n[46] High Low  Low  Low  High High Low  Low  Low  High High High Low  High Low \n[61] Low  Low  High Low  Low  Low  Low  Low  Low \nLevels: Low High\nattr(,\"gstari\")\n[1] FALSE\nattr(,\"call\")\nlocalG(x = Cov$value, listw = wm53_lw)\nattr(,\"class\")\n[1] \"localG\"\n```\n\n\n:::\n\n```{.r .cell-code}\ngi.fixedPost\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] -0.5060001  4.0307500  3.1228883  4.0965665 -0.4299503  0.4194876\n [7] -0.4468523 -0.2793733        NaN        NaN        NaN        NaN\n[13]  0.1887167        NaN        NaN        NaN        NaN -0.5392547\n[19]        NaN -0.5013670        NaN        NaN        NaN        NaN\n[25]        NaN        NaN        NaN        NaN        NaN        NaN\n[31]        NaN        NaN        NaN        NaN        NaN        NaN\n[37]        NaN        NaN        NaN        NaN        NaN        NaN\n[43]        NaN        NaN        NaN        NaN        NaN        NaN\n[49]  0.3314706        NaN -0.4365107 -0.3773705  3.8100725 -0.4964776\n[55]        NaN        NaN        NaN        NaN        NaN        NaN\n[61]        NaN        NaN        NaN        NaN -0.4505550 -0.3876817\n[67]        NaN        NaN        NaN\nattr(,\"internals\")\n               Gi      E(Gi)        V(Gi)      Z(Gi) Pr(z != E(Gi))\n [1,] 0.044124426 0.05882353 0.0008438795 -0.5060001   6.128566e-01\n [2,] 0.219777478 0.04411765 0.0018992109  4.0307500   5.559916e-05\n [3,] 0.276363910 0.08823529 0.0036290823  3.1228883   1.790857e-03\n [4,] 0.262483231 0.05882353 0.0024715545  4.0965665   4.193230e-05\n [5,] 0.024983369 0.04411765 0.0019805589 -0.4299503   6.672318e-01\n [6,] 0.062218722 0.04411765 0.0018619607  0.4194876   6.748598e-01\n [7,] 0.003409931 0.01470588 0.0006390248 -0.4468523   6.549817e-01\n [8,] 0.007516241 0.01470588 0.0006622843 -0.2793733   7.799583e-01\n [9,] 0.000000000 0.00000000 0.0000000000        NaN            NaN\n[10,] 0.000000000 0.00000000 0.0000000000        NaN            NaN\n[11,] 0.000000000 0.00000000 0.0000000000        NaN            NaN\n[12,] 0.000000000 0.00000000 0.0000000000        NaN            NaN\n[13,] 0.019502311 0.01470588 0.0006459747  0.1887167   8.503149e-01\n[14,] 0.000000000 0.00000000 0.0000000000        NaN            NaN\n[15,] 0.000000000 0.00000000 0.0000000000        NaN            NaN\n[16,] 0.000000000 0.00000000 0.0000000000        NaN            NaN\n[17,] 0.000000000 0.00000000 0.0000000000        NaN            NaN\n[18,] 0.001089707 0.01470588 0.0006375619 -0.5392547   5.897111e-01\n[19,] 0.000000000 0.00000000 0.0000000000        NaN            NaN\n[20,] 0.002062436 0.01470588 0.0006359449 -0.5013670   6.161129e-01\n[21,] 0.000000000 0.00000000 0.0000000000        NaN            NaN\n[22,] 0.000000000 0.00000000 0.0000000000        NaN            NaN\n[23,] 0.000000000 0.00000000 0.0000000000        NaN            NaN\n[24,] 0.000000000 0.00000000 0.0000000000        NaN            NaN\n[25,] 0.000000000 0.00000000 0.0000000000        NaN            NaN\n[26,] 0.000000000 0.00000000 0.0000000000        NaN            NaN\n[27,] 0.000000000 0.00000000 0.0000000000        NaN            NaN\n[28,] 0.000000000 0.00000000 0.0000000000        NaN            NaN\n[29,] 0.000000000 0.00000000 0.0000000000        NaN            NaN\n[30,] 0.000000000 0.00000000 0.0000000000        NaN            NaN\n[31,] 0.000000000 0.00000000 0.0000000000        NaN            NaN\n[32,] 0.000000000 0.00000000 0.0000000000        NaN            NaN\n[33,] 0.000000000 0.00000000 0.0000000000        NaN            NaN\n[34,] 0.000000000 0.00000000 0.0000000000        NaN            NaN\n[35,] 0.000000000 0.00000000 0.0000000000        NaN            NaN\n[36,] 0.000000000 0.00000000 0.0000000000        NaN            NaN\n[37,] 0.000000000 0.00000000 0.0000000000        NaN            NaN\n[38,] 0.000000000 0.00000000 0.0000000000        NaN            NaN\n[39,] 0.000000000 0.00000000 0.0000000000        NaN            NaN\n[40,] 0.000000000 0.00000000 0.0000000000        NaN            NaN\n[41,] 0.000000000 0.00000000 0.0000000000        NaN            NaN\n[42,] 0.000000000 0.00000000 0.0000000000        NaN            NaN\n[43,] 0.000000000 0.00000000 0.0000000000        NaN            NaN\n[44,] 0.000000000 0.00000000 0.0000000000        NaN            NaN\n[45,] 0.000000000 0.00000000 0.0000000000        NaN            NaN\n[46,] 0.000000000 0.00000000 0.0000000000        NaN            NaN\n[47,] 0.000000000 0.00000000 0.0000000000        NaN            NaN\n[48,] 0.000000000 0.00000000 0.0000000000        NaN            NaN\n[49,] 0.023138564 0.01470588 0.0006472042  0.3314706   7.402890e-01\n[50,] 0.000000000 0.00000000 0.0000000000        NaN            NaN\n[51,] 0.003468364 0.01470588 0.0006627521 -0.4365107   6.624663e-01\n[52,] 0.015848022 0.02941176 0.0012918831 -0.3773705   7.058983e-01\n[53,] 0.247095716 0.05882353 0.0024417762  3.8100725   1.389261e-04\n[54,] 0.011422185 0.02941176 0.0013129335 -0.4964776   6.195575e-01\n[55,] 0.000000000 0.00000000 0.0000000000        NaN            NaN\n[56,] 0.000000000 0.00000000 0.0000000000        NaN            NaN\n[57,] 0.000000000 0.00000000 0.0000000000        NaN            NaN\n[58,] 0.000000000 0.00000000 0.0000000000        NaN            NaN\n[59,] 0.000000000 0.00000000 0.0000000000        NaN            NaN\n[60,] 0.000000000 0.00000000 0.0000000000        NaN            NaN\n[61,] 0.000000000 0.00000000 0.0000000000        NaN            NaN\n[62,] 0.000000000 0.00000000 0.0000000000        NaN            NaN\n[63,] 0.000000000 0.00000000 0.0000000000        NaN            NaN\n[64,] 0.000000000 0.00000000 0.0000000000        NaN            NaN\n[65,] 0.003288728 0.01470588 0.0006421259 -0.4505550   6.523103e-01\n[66,] 0.004901713 0.01470588 0.0006395447 -0.3876817   6.982516e-01\n[67,] 0.000000000 0.00000000 0.0000000000        NaN            NaN\n[68,] 0.000000000 0.00000000 0.0000000000        NaN            NaN\n[69,] 0.000000000 0.00000000 0.0000000000        NaN            NaN\nattr(,\"cluster\")\n [1] High Low  Low  Low  High Low  Low  High Low  Low  Low  High Low  Low  High\n[16] Low  Low  Low  Low  Low  Low  High High Low  Low  Low  Low  Low  Low  Low \n[31] Low  High Low  Low  Low  Low  Low  Low  High Low  Low  Low  Low  Low  Low \n[46] Low  Low  Low  Low  High High Low  Low  High High High Low  Low  High High\n[61] Low  Low  Low  Low  Low  Low  Low  Low  Low \nLevels: Low High\nattr(,\"gstari\")\n[1] FALSE\nattr(,\"call\")\nlocalG(x = Post$value, listw = wm53_lw)\nattr(,\"class\")\n[1] \"localG\"\n```\n\n\n:::\n:::\n\n\nThe output of localG() is a vector of G or Gstar values, with attributes “gstari” set to TRUE or FALSE, “call” set to the function call, and class “localG”.\n\nThe Gi statistics is represented as a Z-score. Greater values represent a greater intensity of clustering and the direction (positive or negative) indicates high or low clusters.\n\nNext, we will join the Gi values to their corresponding tourism sf data frame by using the code chunk below.\n\n::: panel-tabset\n\n### Pre\n\n::: {.cell}\n\n```{.r .cell-code}\nPre.gi <- cbind(Pre, as.matrix(gi.fixedPre)) %>%\n  rename(gstat_fixed = as.matrix.gi.fixedPre.)\n```\n:::\n\n### Cov\n\n::: {.cell}\n\n```{.r .cell-code}\nCov.gi <- cbind(Cov, as.matrix(gi.fixedCov)) %>%\n  rename(gstat_fixed = as.matrix.gi.fixedCov.)\n```\n:::\n\n### Post\n\n::: {.cell}\n\n```{.r .cell-code}\nPost.gi <- cbind(Post, as.matrix(gi.fixedPost)) %>%\n  rename(gstat_fixed = as.matrix.gi.fixedPost.)\n```\n:::\n\n:::\nIn fact, the code chunk above performs three tasks. First, it convert the output vector (i.e. *gi.fixed*) into r matrix object by using *as.matrix()*.\n\n### **Mapping Gi values with fixed distance weights**\n\nThe code chunk below shows the functions used to map the Gi values derived using fixed distance weight matrix.\n\n::: panel-tabset\n\n### Pre\n\n::: {.cell}\n\n```{.r .cell-code}\nTourismPre <- qtm(Pre, \"value\")\n\nGimap1 <-tm_shape(Pre.gi) +\n  tm_fill(col = \"gstat_fixed\", \n          style = \"pretty\",\n          palette=\"-RdBu\",\n          title = \"local Gi\") +\n  tm_borders(alpha = 0.5)\n\ntmap_arrange(TourismPre, Gimap1, asp=1, ncol=2)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nVariable(s) \"gstat_fixed\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](Take-Home_Exercise02_files/figure-html/unnamed-chunk-112-1.png){width=672}\n:::\n:::\n\n\n### Cov\n\n::: {.cell}\n\n```{.r .cell-code}\nTourismCov <- qtm(Cov, \"value\")\n\nGimap2 <-tm_shape(Cov.gi) +\n  tm_fill(col = \"gstat_fixed\", \n          style = \"pretty\",\n          palette=\"-RdBu\",\n          title = \"local Gi\") +\n  tm_borders(alpha = 0.5)\n\ntmap_arrange(TourismCov, Gimap2, asp=1, ncol=2)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nVariable(s) \"gstat_fixed\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](Take-Home_Exercise02_files/figure-html/unnamed-chunk-113-1.png){width=672}\n:::\n:::\n\n\n### Post\n\n::: {.cell}\n\n```{.r .cell-code}\nTourismPost <- qtm(Post, \"value\")\n\nGimap3 <-tm_shape(Post.gi) +\n  tm_fill(col = \"gstat_fixed\", \n          style = \"pretty\",\n          palette=\"-RdBu\",\n          title = \"local Gi\") +\n  tm_borders(alpha = 0.5)\n\ntmap_arrange(TourismPost, Gimap3, asp=1, ncol=2)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nVariable(s) \"gstat_fixed\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](Take-Home_Exercise02_files/figure-html/unnamed-chunk-114-1.png){width=672}\n:::\n:::\n\n:::\n### **Gi statistics using adaptive distance**\n\n::: panel-tabset\n\n### Pre\n\n::: {.cell}\n\n```{.r .cell-code}\nfips1 <- order(Pre$province_eng)\ngi.adaptive1 <- localG(Pre$value, knn_lw)\nPre.gi1 <- cbind(Pre, as.matrix(gi.adaptive1)) %>%\n  rename(gstat_adaptive = as.matrix.gi.adaptive1.)\n```\n:::\n\n### Cov\n\n::: {.cell}\n\n```{.r .cell-code}\nfips2 <- order(Cov$province_eng)\ngi.adaptive2 <- localG(Cov$value, knn_lw)\nCov.gi2 <- cbind(Cov, as.matrix(gi.adaptive2)) %>%\n  rename(gstat_adaptive = as.matrix.gi.adaptive2.)\n```\n:::\n\n### Post\n\n::: {.cell}\n\n```{.r .cell-code}\nfips3 <- order(Post$province_eng)\ngi.adaptive3 <- localG(Post$value, knn_lw)\nPost.gi3 <- cbind(Post, as.matrix(gi.adaptive3)) %>%\n  rename(gstat_adaptive = as.matrix.gi.adaptive3.)\n```\n:::\n\n:::\n### **Mapping Gi values with adaptive distance weights**\n\nIt is time for us to visualise the locations of hot spot and cold spot areas. The choropleth mapping functions of **tmap** package will be used to map the Gi values.\n\nThe code chunk below shows the functions used to map the Gi values derived using fixed distance weight matrix.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nGimap1 <- tm_shape(Pre.gi1) + \n  tm_fill(col = \"gstat_adaptive\", \n          style = \"pretty\", \n          palette=\"-RdBu\", \n          title = \"local Gi\") + \n  tm_borders(alpha = 0.5)\n\nGimap2 <- tm_shape(Cov.gi2) + \n  tm_fill(col = \"gstat_adaptive\", \n          style = \"pretty\", \n          palette=\"-RdBu\", \n          title = \"local Gi\") + \n  tm_borders(alpha = 0.5)\n\nGimap3 <- tm_shape(Post.gi3) + \n  tm_fill(col = \"gstat_adaptive\", \n          style = \"pretty\", \n          palette=\"-RdBu\", \n          title = \"local Gi\") + \n  tm_borders(alpha = 0.5)\n\ntmap_arrange( \n             Gimap1,\n             Gimap2,\n             Gimap3,\n             asp=1, \n             ncol=3)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nVariable(s) \"gstat_adaptive\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\nVariable(s) \"gstat_adaptive\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\nVariable(s) \"gstat_adaptive\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](Take-Home_Exercise02_files/figure-html/unnamed-chunk-118-1.png){width=672}\n:::\n:::\n\n# Cold hot map tourism\n\n\n::: {.cell}\n\n```{.r .cell-code}\nTouristAll = touristRAW \nTouristAll$YYYYMM = as.integer(format(TouristAll$date, \"%Y%m\"))\n  \nTouristAll = TouristAll %>%   \n  select(3, 7, 10)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntourist_st <- spacetime(\n  .data = TouristAll, \n  .geometry = admRAW, \n  .loc_col = \"province_eng\", \n  .time_col = \"YYYYMM\"\n  ) \n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nis_spacetime_cube(tourist_st)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nehsa = emerging_hotspot_analysis(\n  x = tourist_st,\n  .var = \"value\",\n  k = 1,\n  nsim = 99\n)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in spdep::poly2nb(geometry, queen = queen, ...): some observations have no neighbours;\nif this seems unexpected, try increasing the snap argument.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in spdep::poly2nb(geometry, queen = queen, ...): neighbour object has 2 sub-graphs;\nif this sub-graph count seems unexpected, try increasing the snap argument.\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = ehsa,\n       aes(x = classification))+\n  geom_bar()\n```\n\n::: {.cell-output-display}\n![](Take-Home_Exercise02_files/figure-html/unnamed-chunk-124-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntourist_ehsa = admRAW %>%\n  left_join(ehsa,\n            by = join_by(province_eng == location))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nehsa_sig = tourist_ehsa %>%\n  filter(p_value < 0.05)\ntmap_mode(\"plot\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\ntmap mode set to plotting\n```\n\n\n:::\n\n```{.r .cell-code}\ntm_shape(tourist_ehsa)+\n  tm_polygons()+\n  tm_borders(alpha = 0.5) +\ntm_shape(ehsa_sig) +\n  tm_fill(\"classification\")+\n  tm_borders(alpha = 0.4)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them).\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLegend labels were too wide. The labels have been resized to 0.52, 0.58, 0.61. Increase legend.width (argument of tm_layout) to make the legend wider and therefore the labels larger.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](Take-Home_Exercise02_files/figure-html/unnamed-chunk-126-1.png){width=672}\n:::\n:::\n\n\n----------------------------------------------------------------------------------\n\n# Revenue analysis\nThis variable shows all revenue from tourism\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a subset for a specific variable\nrevallRAW <- TourismRAW %>%\n  filter(variable == \"revenue_all\")\n```\n:::\n\n\n## Creating time periods\nwe create pre covid(Pre), during covid(Cov) and post covid(Post) time periods to see the difference between them.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprecovnum <- revallRAW %>%\n  filter(Year == 2019)\n\ncovnum <- revallRAW %>%\n  filter(Year >= 2020 & Year <= 2021)\n\npostcovnum <- revallRAW %>%\n   filter(Year >= 2022 & Year <= 2023)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Aggregate values for each period per province\nprecovnum <- precovnum %>%\n  group_by(province_eng) %>%\n  summarise(value = sum(value))\n\ncovnum <- covnum %>%\n  group_by(province_eng) %>%\n  summarise(value = sum(value))\n\npostcovnum <- postcovnum %>%\n  group_by(province_eng) %>%\n  summarise(value = sum(value))\n```\n:::\n\n\n::: panel-tabset\n\n## Pre\n\n::: {.cell}\n\n```{.r .cell-code}\nPre <- left_join(admRAW,precovnum)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nJoining with `by = join_by(province_eng)`\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nPre <- Pre[!is.na(Pre$value), ]\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nequal <- tm_shape(Pre) +\n  tm_fill(\"value\",\n          n = 5,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal interval classification\")\n\nquantile <- tm_shape(Pre) +\n  tm_fill(\"value\",\n          n = 5,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal quantile classification\")\n\ntmap_arrange(equal, \n             quantile, \n             asp=1, \n             ncol=2)\n```\n\n::: {.cell-output-display}\n![](Take-Home_Exercise02_files/figure-html/unnamed-chunk-132-1.png){width=672}\n:::\n:::\n\n## Cov\n\n::: {.cell}\n\n```{.r .cell-code}\nCov <- left_join(admRAW,covnum)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nJoining with `by = join_by(province_eng)`\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nCov <- Cov[!is.na(Cov$value), ]\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nequal <- tm_shape(Cov) +\n  tm_fill(\"value\",\n          n = 5,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal interval classification\")\n\nquantile <- tm_shape(Cov) +\n  tm_fill(\"value\",\n          n = 5,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal quantile classification\")\n\ntmap_arrange(equal, \n             quantile, \n             asp=1, \n             ncol=2)\n```\n\n::: {.cell-output-display}\n![](Take-Home_Exercise02_files/figure-html/unnamed-chunk-135-1.png){width=672}\n:::\n:::\n\n## Post\n\n::: {.cell}\n\n```{.r .cell-code}\nPost <- left_join(admRAW,postcovnum)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nJoining with `by = join_by(province_eng)`\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nPost <- Post[!is.na(Post$value), ]\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nequal <- tm_shape(Post) +\n  tm_fill(\"value\",\n          n = 5,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal interval classification\")\n\nquantile <- tm_shape(Post) +\n  tm_fill(\"value\",\n          n = 5,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal quantile classification\")\n\ntmap_arrange(equal, \n             quantile, \n             asp=1, \n             ncol=2)\n```\n\n::: {.cell-output-display}\n![](Take-Home_Exercise02_files/figure-html/unnamed-chunk-138-1.png){width=672}\n:::\n:::\n\n:::\n\n\n## **Global Measures of Spatial Autocorrelation for tourism numbers**\n\n### **Computing Contiguity Spatial Weights**\n\nBefore we can compute the global spatial autocorrelation statistics, we need to construct a spatial weights of the study area. The spatial weights is used to define the neighbourhood relationships between the geographical units (i.e. county) in the study area.\n\nIn the code chunk below, [`poly2nb()`](https://r-spatial.github.io/spdep/reference/poly2nb.html) of **spdep** package is used to compute contiguity weight matrices for the study area. This function builds a neighbours list based on regions with contiguous boundaries. If you look at the documentation you will see that you can pass a “queen” argument that takes TRUE or FALSE as options. If you do not specify this argument the default is set to TRUE, that is, if you don’t specify queen = FALSE this function will return a list of first order neighbours using the Queen criteria.\n\nMore specifically, the code chunk below is used to compute Queen contiguity weight matrix.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwm_q1 <- poly2nb(Pre, \n                queen=TRUE)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in poly2nb(Pre, queen = TRUE): some observations have no neighbours;\nif this seems unexpected, try increasing the snap argument.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in poly2nb(Pre, queen = TRUE): neighbour object has 2 sub-graphs;\nif this sub-graph count seems unexpected, try increasing the snap argument.\n```\n\n\n:::\n\n```{.r .cell-code}\nsummary(wm_q1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nNeighbour list object:\nNumber of regions: 69 \nNumber of nonzero links: 284 \nPercentage nonzero weights: 5.965133 \nAverage number of links: 4.115942 \n1 region with no links:\n67\n2 disjoint connected subgraphs\nLink number distribution:\n\n 0  1  2  3  4  5  6  7  9 \n 1  2  7 17 15 11 12  3  1 \n2 least connected regions:\n12 14 with 1 link\n1 most connected region:\n51 with 9 links\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwm_q2 <- poly2nb(Cov, \n                queen=TRUE)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in poly2nb(Cov, queen = TRUE): some observations have no neighbours;\nif this seems unexpected, try increasing the snap argument.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in poly2nb(Cov, queen = TRUE): neighbour object has 2 sub-graphs;\nif this sub-graph count seems unexpected, try increasing the snap argument.\n```\n\n\n:::\n\n```{.r .cell-code}\nsummary(wm_q2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nNeighbour list object:\nNumber of regions: 69 \nNumber of nonzero links: 284 \nPercentage nonzero weights: 5.965133 \nAverage number of links: 4.115942 \n1 region with no links:\n67\n2 disjoint connected subgraphs\nLink number distribution:\n\n 0  1  2  3  4  5  6  7  9 \n 1  2  7 17 15 11 12  3  1 \n2 least connected regions:\n12 14 with 1 link\n1 most connected region:\n51 with 9 links\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwm_q3 <- poly2nb(Post, \n                queen=TRUE)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in poly2nb(Post, queen = TRUE): some observations have no neighbours;\nif this seems unexpected, try increasing the snap argument.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in poly2nb(Post, queen = TRUE): neighbour object has 2 sub-graphs;\nif this sub-graph count seems unexpected, try increasing the snap argument.\n```\n\n\n:::\n\n```{.r .cell-code}\nsummary(wm_q3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nNeighbour list object:\nNumber of regions: 69 \nNumber of nonzero links: 284 \nPercentage nonzero weights: 5.965133 \nAverage number of links: 4.115942 \n1 region with no links:\n67\n2 disjoint connected subgraphs\nLink number distribution:\n\n 0  1  2  3  4  5  6  7  9 \n 1  2  7 17 15 11 12  3  1 \n2 least connected regions:\n12 14 with 1 link\n1 most connected region:\n51 with 9 links\n```\n\n\n:::\n:::\n\n\n\n### **Row-standardised weights matrix**\n\nNext, we need to assign weights to each neighboring polygon. In our case, each neighboring polygon will be assigned equal weight (style=“W”). This is accomplished by assigning the fraction 1/(#ofneighbors) to each neighboring county then summing the weighted income values. While this is the most intuitive way to summaries the neighbors’ values it has one drawback in that polygons along the edges of the study area will base their lagged values on fewer polygons thus potentially over- or under-estimating the true nature of the spatial autocorrelation in the data. For this example, we’ll stick with the style=“W” option for simplicity’s sake but note that other more robust options are available, notably style=“B”.\n\n::: panel-tabset\n\n## Pre\n\n::: {.cell}\n\n```{.r .cell-code}\nrswm_q1 <- nb2listw(wm_q1, \n                   style=\"W\", \n                   zero.policy = TRUE)\nrswm_q1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 69 \nNumber of nonzero links: 284 \nPercentage nonzero weights: 5.965133 \nAverage number of links: 4.115942 \n1 region with no links:\n67\n2 disjoint connected subgraphs\n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 68 4624 68 36.26116 284.0635\n```\n\n\n:::\n:::\n\n## Cov\n\n::: {.cell}\n\n```{.r .cell-code}\nrswm_q2 <- nb2listw(wm_q2, \n                   style=\"W\", \n                   zero.policy = TRUE)\nrswm_q2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 69 \nNumber of nonzero links: 284 \nPercentage nonzero weights: 5.965133 \nAverage number of links: 4.115942 \n1 region with no links:\n67\n2 disjoint connected subgraphs\n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 68 4624 68 36.26116 284.0635\n```\n\n\n:::\n:::\n\n## Post\n\n::: {.cell}\n\n```{.r .cell-code}\nrswm_q3 <- nb2listw(wm_q3, \n                   style=\"W\", \n                   zero.policy = TRUE)\nrswm_q3\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 69 \nNumber of nonzero links: 284 \nPercentage nonzero weights: 5.965133 \nAverage number of links: 4.115942 \n1 region with no links:\n67\n2 disjoint connected subgraphs\n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 68 4624 68 36.26116 284.0635\n```\n\n\n:::\n:::\n\n:::\n\n## **Global Measures of Spatial Autocorrelation: Moran’s I**\n\n### **Maron’s I test**\n\nThe code chunk below performs Moran’s I statistical testing using [`moran.test()`](https://r-spatial.github.io/spdep/reference/moran.test.html) of **spdep**.\n\n::: panel-tabset\n\n### Pre\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmoran.test(Pre$value, \n           listw=rswm_q1, \n           zero.policy = TRUE, \n           na.action=na.omit)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tMoran I test under randomisation\n\ndata:  Pre$value  \nweights: rswm_q1  \nn reduced by no-neighbour observations  \n\nMoran I statistic standard deviate = -0.36696, p-value = 0.6432\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n     -0.032056089      -0.014925373       0.002179318 \n```\n\n\n:::\n:::\n\n\n\n\n### COV\n\n::: {.cell}\n\n```{.r .cell-code}\nmoran.test(Cov$value, \n           listw=rswm_q2, \n           zero.policy = TRUE, \n           na.action=na.omit)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tMoran I test under randomisation\n\ndata:  Cov$value  \nweights: rswm_q2  \nn reduced by no-neighbour observations  \n\nMoran I statistic standard deviate = -0.57476, p-value = 0.7173\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n     -0.044234715      -0.014925373       0.002600382 \n```\n\n\n:::\n:::\n\n\n### Post\n\n::: {.cell}\n\n```{.r .cell-code}\nmoran.test(Post$value, \n           listw=rswm_q3, \n           zero.policy = TRUE, \n           na.action=na.omit)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tMoran I test under randomisation\n\ndata:  Post$value  \nweights: rswm_q3  \nn reduced by no-neighbour observations  \n\nMoran I statistic standard deviate = -0.25871, p-value = 0.6021\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n     -0.029416801      -0.014925373       0.003137553 \n```\n\n\n:::\n:::\n\n:::\n\n### **Computing Monte Carlo Moran’s I**\n\nThe code chunk below performs permutation test for Moran’s I statistic by using [`moran.mc()`](https://r-spatial.github.io/spdep/reference/moran.mc.html) of **spdep**. A total of 1000 simulation will be performed.\n\n::: panel-tabset\n\n### Pre\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\nbperm1= moran.mc(Pre$value, \n                listw=rswm_q1, \n                nsim=999, \n                zero.policy = TRUE, \n                na.action=na.omit)\nbperm1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tMonte-Carlo simulation of Moran I\n\ndata:  Pre$value \nweights: rswm_q1  \nnumber of simulations + 1: 1000 \n\nstatistic = -0.032056, observed rank = 401, p-value = 0.599\nalternative hypothesis: greater\n```\n\n\n:::\n:::\n\n### Cov\n\n::: {.cell}\n\n```{.r .cell-code}\nbperm2= moran.mc(Cov$value, \n                listw=rswm_q2, \n                nsim=999, \n                zero.policy = TRUE, \n                na.action=na.omit)\nbperm2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tMonte-Carlo simulation of Moran I\n\ndata:  Cov$value \nweights: rswm_q2  \nnumber of simulations + 1: 1000 \n\nstatistic = -0.044235, observed rank = 246, p-value = 0.754\nalternative hypothesis: greater\n```\n\n\n:::\n:::\n\n### Post\n\n::: {.cell}\n\n```{.r .cell-code}\nbperm3= moran.mc(Post$value, \n                listw=rswm_q3, \n                nsim=999, \n                zero.policy = TRUE, \n                na.action=na.omit)\nbperm3\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tMonte-Carlo simulation of Moran I\n\ndata:  Post$value \nweights: rswm_q3  \nnumber of simulations + 1: 1000 \n\nstatistic = -0.029417, observed rank = 496, p-value = 0.504\nalternative hypothesis: greater\n```\n\n\n:::\n:::\n\n:::\n\n### **Visualising Monte Carlo Moran’s I**\n\nIt is always a good practice for us the examine the simulated Moran’s I test statistics in greater detail. This can be achieved by plotting the distribution of the statistical values as a histogram by using the code chunk below.\n\nIn the code chunk below [`hist()`](https://www.rdocumentation.org/packages/graphics/versions/3.6.2/topics/hist) and [`abline()`](https://www.rdocumentation.org/packages/graphics/versions/3.6.2/topics/abline) of R Graphics are used.\n\n::: panel-tabset\n\n### Pre\n\n::: {.cell}\n\n```{.r .cell-code}\nmean(bperm1$res[1:999])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] -0.01272293\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nvar(bperm1$res[1:999])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.002824978\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(bperm1$res[1:999])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     Min.   1st Qu.    Median      Mean   3rd Qu.      Max. \n-0.080749 -0.037950 -0.027270 -0.012723 -0.007812  0.409510 \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhist(bperm1$res, \n     freq=TRUE, \n     breaks=20, \n     xlab=\"Simulated Moran's I\")\nabline(v=0, \n       col=\"red\") \n```\n\n::: {.cell-output-display}\n![](Take-Home_Exercise02_files/figure-html/unnamed-chunk-154-1.png){width=672}\n:::\n:::\n\n\n### COV\n\n::: {.cell}\n\n```{.r .cell-code}\nmean(bperm2$res[1:999])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] -0.01487191\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nvar(bperm2$res[1:999])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.002436059\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(bperm2$res[1:999])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     Min.   1st Qu.    Median      Mean   3rd Qu.      Max. \n-0.094256 -0.043990 -0.026517 -0.014872 -0.002192  0.337889 \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhist(bperm2$res, \n     freq=TRUE, \n     breaks=20, \n     xlab=\"Simulated Moran's I\")\nabline(v=0, \n       col=\"red\") \n```\n\n::: {.cell-output-display}\n![](Take-Home_Exercise02_files/figure-html/unnamed-chunk-158-1.png){width=672}\n:::\n:::\n\n### Post\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean(bperm3$res[1:999])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] -0.01254189\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nvar(bperm3$res[1:999])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.003632653\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(bperm3$res[1:999])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     Min.   1st Qu.    Median      Mean   3rd Qu.      Max. \n-0.080682 -0.042963 -0.029317 -0.012542 -0.006836  0.483887 \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhist(bperm3$res, \n     freq=TRUE, \n     breaks=20, \n     xlab=\"Simulated Moran's I\")\nabline(v=0, \n       col=\"red\") \n```\n\n::: {.cell-output-display}\n![](Take-Home_Exercise02_files/figure-html/unnamed-chunk-162-1.png){width=672}\n:::\n:::\n\n\n:::\n\n\n## **Global Measures of Spatial Autocorrelation: Geary’s C**\n\n### **Geary’s C test**\n\nThe code chunk below performs Geary’s C test for spatial autocorrelation by using [`geary.test()`](https://r-spatial.github.io/spdep/reference/geary.test.html) of **spdep**.\n\n::: panel-tabset\n\n### Pre\n\n::: {.cell}\n\n```{.r .cell-code}\ngeary.test(Pre$value, listw=rswm_q1, na.action=na.omit)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tGeary C test under randomisation\n\ndata:  Pre$value \nweights: rswm_q1  \nn reduced by no-neighbour observations \n\nGeary C statistic standard deviate = -0.46128, p-value = 0.6777\nalternative hypothesis: Expectation greater than statistic\nsample estimates:\nGeary C statistic       Expectation          Variance \n       1.08355636        1.00000000        0.03281132 \n```\n\n\n:::\n:::\n\n\n### Cov\n\n::: {.cell}\n\n```{.r .cell-code}\ngeary.test(Cov$value, listw=rswm_q2, na.action=na.omit)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tGeary C test under randomisation\n\ndata:  Cov$value \nweights: rswm_q2  \nn reduced by no-neighbour observations \n\nGeary C statistic standard deviate = -0.59658, p-value = 0.7246\nalternative hypothesis: Expectation greater than statistic\nsample estimates:\nGeary C statistic       Expectation          Variance \n       1.10473434        1.00000000        0.03082015 \n```\n\n\n:::\n:::\n\n\n### Post\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngeary.test(Post$value, listw=rswm_q3, na.action=na.omit)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tGeary C test under randomisation\n\ndata:  Post$value \nweights: rswm_q3  \nn reduced by no-neighbour observations \n\nGeary C statistic standard deviate = 0.14061, p-value = 0.4441\nalternative hypothesis: Expectation greater than statistic\nsample estimates:\nGeary C statistic       Expectation          Variance \n       0.97635373        1.00000000        0.02827992 \n```\n\n\n:::\n:::\n\n:::\n\n\n### **Computing Monte Carlo Geary’s C**\n\nThe code chunk below performs permutation test for Geary’s C statistic by using [`geary.mc()`](https://r-spatial.github.io/spdep/reference/geary.mc.html) of **spdep**.\n\n::: panel-tabset\n\n### Pre\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\nbperm11=geary.mc(Pre$value, \n               listw=rswm_q1, \n               nsim=999,\n               na.action=na.omit)\nbperm11\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tMonte-Carlo simulation of Geary C\n\ndata:  Pre$value \nweights: rswm_q1  \nnumber of simulations + 1: 1000 \n\nstatistic = 1.0836, observed rank = 683, p-value = 0.683\nalternative hypothesis: greater\n```\n\n\n:::\n:::\n\n### Cov\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\nbperm22=geary.mc(Cov$value, \n               listw=rswm_q2, \n               nsim=999,\n               na.action=na.omit)\nbperm22\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tMonte-Carlo simulation of Geary C\n\ndata:  Cov$value \nweights: rswm_q2  \nnumber of simulations + 1: 1000 \n\nstatistic = 1.1047, observed rank = 728, p-value = 0.728\nalternative hypothesis: greater\n```\n\n\n:::\n:::\n\n### Post\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\nbperm33=geary.mc(Post$value, \n               listw=rswm_q3, \n               nsim=999,\n               na.action=na.omit)\nbperm33\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tMonte-Carlo simulation of Geary C\n\ndata:  Post$value \nweights: rswm_q3  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.97635, observed rank = 495, p-value = 0.495\nalternative hypothesis: greater\n```\n\n\n:::\n:::\n\n:::\n### **Visualising the Monte Carlo Geary’s C**\n\nNext, we will plot a histogram to reveal the distribution of the simulated values by using the code chunk below.\n\n::: panel-tabset\n\n### Pre\n\n::: {.cell}\n\n```{.r .cell-code}\nmean(bperm11$res[1:999])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.9804112\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nvar(bperm11$res[1:999])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.04603458\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(bperm11$res[1:999])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 0.1261  0.8609  0.9783  0.9804  1.1223  1.6964 \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhist(bperm11$res, freq=TRUE, breaks=20, xlab=\"Simulated Geary c\")\nabline(v=1, col=\"red\") \n```\n\n::: {.cell-output-display}\n![](Take-Home_Exercise02_files/figure-html/unnamed-chunk-172-1.png){width=672}\n:::\n:::\n\n\n### Cov\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean(bperm22$res[1:999])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.9807089\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nvar(bperm22$res[1:999])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.04296244\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(bperm22$res[1:999])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 0.1416  0.8647  0.9794  0.9807  1.1191  1.6793 \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhist(bperm22$res, freq=TRUE, breaks=20, xlab=\"Simulated Geary c\")\nabline(v=1, col=\"red\") \n```\n\n::: {.cell-output-display}\n![](Take-Home_Exercise02_files/figure-html/unnamed-chunk-176-1.png){width=672}\n:::\n:::\n\n\n### Post\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean(bperm33$res[1:999])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.9808983\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nvar(bperm33$res[1:999])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.0394471\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(bperm33$res[1:999])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 0.1831  0.8721  0.9780  0.9809  1.1097  1.6516 \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhist(bperm33$res, freq=TRUE, breaks=20, xlab=\"Simulated Geary c\")\nabline(v=1, col=\"red\") \n```\n\n::: {.cell-output-display}\n![](Take-Home_Exercise02_files/figure-html/unnamed-chunk-180-1.png){width=672}\n:::\n:::\n\n:::\n\n## **Spatial Correlogram**\n\nSpatial correlograms are great to examine patterns of spatial autocorrelation in your data or model residuals. They show how correlated are pairs of spatial observations when you increase the distance (lag) between them - they are plots of some index of autocorrelation (Moran’s I or Geary’s c) against distance.Although correlograms are not as fundamental as variograms (a keystone concept of geostatistics), they are very useful as an exploratory and descriptive tool. For this purpose they actually provide richer information than variograms.\n\n\n\n# **Local Measures of Spatial Autocorrelation for total Revenue**\n\n\n## **Overview**\n\nLocal Measures of Spatial Autocorrelation (LMSA) focus on the relationships between each observation and its surroundings, rather than providing a single summary of these relationships across the map. In this sense, they are not summary statistics but scores that allow us to learn more about the spatial structure in our data. The general intuition behind the metrics however is similar to that of global ones. Some of them are even mathematically connected, where the global version can be decomposed into a collection of local ones. One such example are Local Indicators of Spatial Association (LISA). Beside LISA, Getis-Ord’s Gi-statistics will be introduce as an alternative LMSA statistics that present complementary information or allow us to obtain similar insights for geographically referenced data.\n\n\n### **Visualising Regional Development Indicator**\n\nNow, we are going to prepare a basemap and a choropleth map showing the distribution of Tourism data by using *qtm()* of **tmap** package.\n\n::: panel-tabset\n\n### Pre\n\n::: {.cell}\n\n```{.r .cell-code}\nequal <- tm_shape(Pre) +\n  tm_fill(\"value\",\n          n = 5,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal interval classification\")\n\nquantile <- tm_shape(Pre) +\n  tm_fill(\"value\",\n          n = 5,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal quantile classification\")\n\ntmap_arrange(equal, \n             quantile, \n             asp=1, \n             ncol=2)\n```\n\n::: {.cell-output-display}\n![](Take-Home_Exercise02_files/figure-html/unnamed-chunk-181-1.png){width=672}\n:::\n:::\n\n### Cov\n\n::: {.cell}\n\n```{.r .cell-code}\nequal <- tm_shape(Cov) +\n  tm_fill(\"value\",\n          n = 5,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal interval classification\")\n\nquantile <- tm_shape(Cov) +\n  tm_fill(\"value\",\n          n = 5,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal quantile classification\")\n\ntmap_arrange(equal, \n             quantile, \n             asp=1, \n             ncol=2)\n```\n\n::: {.cell-output-display}\n![](Take-Home_Exercise02_files/figure-html/unnamed-chunk-182-1.png){width=672}\n:::\n:::\n\n### Post\n\n::: {.cell}\n\n```{.r .cell-code}\nequal <- tm_shape(Post) +\n  tm_fill(\"value\",\n          n = 5,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal interval classification\")\n\nquantile <- tm_shape(Post) +\n  tm_fill(\"value\",\n          n = 5,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal quantile classification\")\n\ntmap_arrange(equal, \n             quantile, \n             asp=1, \n             ncol=2)\n```\n\n::: {.cell-output-display}\n![](Take-Home_Exercise02_files/figure-html/unnamed-chunk-183-1.png){width=672}\n:::\n:::\n\n\n:::\n\n## **Local Indicators of Spatial Association(LISA)**\n\nLocal Indicators of Spatial Association or LISA are statistics that evaluate the existence of clusters and/or outliers in the spatial arrangement of a given variable.\n\n\n### **Computing Contiguity Spatial Weights**\n\nBefore we can compute the local spatial autocorrelation statistics, we need to construct a spatial weights of the study area. The spatial weights is used to define the neighbourhood relationships between the geographical units (i.e. county) in the study area.\n\nIn the code chunk below, [`poly2nb()`](https://r-spatial.github.io/spdep/reference/poly2nb.html) of **spdep** package is used to compute contiguity weight matrices for the study area. This function builds a neighbours list based on regions with contiguous boundaries. If you look at the documentation you will see that you can pass a “queen” argument that takes TRUE or FALSE as options. If you do not specify this argument the default is set to TRUE, that is, if you don’t specify queen = FALSE this function will return a list of first order neighbours using the Queen criteria.\n\nMore specifically, the code chunk below is used to compute Queen contiguity weight matrix.\n\n::: panel-tabset\n\n### Pre\n\n::: {.cell}\n\n```{.r .cell-code}\nlocalwm_q1 <- poly2nb(Pre, \n                queen=TRUE)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in poly2nb(Pre, queen = TRUE): some observations have no neighbours;\nif this seems unexpected, try increasing the snap argument.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in poly2nb(Pre, queen = TRUE): neighbour object has 2 sub-graphs;\nif this sub-graph count seems unexpected, try increasing the snap argument.\n```\n\n\n:::\n\n```{.r .cell-code}\nsummary(localwm_q1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nNeighbour list object:\nNumber of regions: 69 \nNumber of nonzero links: 284 \nPercentage nonzero weights: 5.965133 \nAverage number of links: 4.115942 \n1 region with no links:\n67\n2 disjoint connected subgraphs\nLink number distribution:\n\n 0  1  2  3  4  5  6  7  9 \n 1  2  7 17 15 11 12  3  1 \n2 least connected regions:\n12 14 with 1 link\n1 most connected region:\n51 with 9 links\n```\n\n\n:::\n:::\n\n### Cov\n\n::: {.cell}\n\n```{.r .cell-code}\nlocalwm_q2 <- poly2nb(Cov, \n                queen=TRUE)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in poly2nb(Cov, queen = TRUE): some observations have no neighbours;\nif this seems unexpected, try increasing the snap argument.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in poly2nb(Cov, queen = TRUE): neighbour object has 2 sub-graphs;\nif this sub-graph count seems unexpected, try increasing the snap argument.\n```\n\n\n:::\n\n```{.r .cell-code}\nsummary(localwm_q2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nNeighbour list object:\nNumber of regions: 69 \nNumber of nonzero links: 284 \nPercentage nonzero weights: 5.965133 \nAverage number of links: 4.115942 \n1 region with no links:\n67\n2 disjoint connected subgraphs\nLink number distribution:\n\n 0  1  2  3  4  5  6  7  9 \n 1  2  7 17 15 11 12  3  1 \n2 least connected regions:\n12 14 with 1 link\n1 most connected region:\n51 with 9 links\n```\n\n\n:::\n:::\n\n### Post\n\n::: {.cell}\n\n```{.r .cell-code}\nlocalwm_q3 <- poly2nb(Post, \n                queen=TRUE)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in poly2nb(Post, queen = TRUE): some observations have no neighbours;\nif this seems unexpected, try increasing the snap argument.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in poly2nb(Post, queen = TRUE): neighbour object has 2 sub-graphs;\nif this sub-graph count seems unexpected, try increasing the snap argument.\n```\n\n\n:::\n\n```{.r .cell-code}\nsummary(localwm_q3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nNeighbour list object:\nNumber of regions: 69 \nNumber of nonzero links: 284 \nPercentage nonzero weights: 5.965133 \nAverage number of links: 4.115942 \n1 region with no links:\n67\n2 disjoint connected subgraphs\nLink number distribution:\n\n 0  1  2  3  4  5  6  7  9 \n 1  2  7 17 15 11 12  3  1 \n2 least connected regions:\n12 14 with 1 link\n1 most connected region:\n51 with 9 links\n```\n\n\n:::\n:::\n\n:::\n\n\n### **Row-standardised weights matrix**\n\nNext, we need to assign weights to each neighboring polygon. In our case, each neighboring polygon will be assigned equal weight (style=“W”). This is accomplished by assigning the fraction 1/(#ofneighbors) to each neighboring county then summing the weighted income values. While this is the most intuitive way to summaries the neighbors’ values it has one drawback in that polygons along the edges of the study area will base their lagged values on fewer polygons thus potentially over- or under-estimating the true nature of the spatial autocorrelation in the data. For this example, we’ll stick with the style=“W” option for simplicity’s sake but note that other more robust options are available, notably style=“B”.\n\n::: panel-tabset\n\n### Pre\n\n::: {.cell}\n\n```{.r .cell-code}\nrswm_qlocal1 <- nb2listw(localwm_q1, \n                   style=\"W\", \n                   zero.policy = TRUE)\nrswm_qlocal1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 69 \nNumber of nonzero links: 284 \nPercentage nonzero weights: 5.965133 \nAverage number of links: 4.115942 \n1 region with no links:\n67\n2 disjoint connected subgraphs\n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 68 4624 68 36.26116 284.0635\n```\n\n\n:::\n:::\n\n\n### Cov\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrswm_qlocal2 <- nb2listw(localwm_q2, \n                   style=\"W\", \n                   zero.policy = TRUE)\nrswm_qlocal2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 69 \nNumber of nonzero links: 284 \nPercentage nonzero weights: 5.965133 \nAverage number of links: 4.115942 \n1 region with no links:\n67\n2 disjoint connected subgraphs\n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 68 4624 68 36.26116 284.0635\n```\n\n\n:::\n:::\n\n\n### Post\n\n::: {.cell}\n\n```{.r .cell-code}\nrswm_qlocal3 <- nb2listw(localwm_q3, \n                   style=\"W\", \n                   zero.policy = TRUE)\nrswm_qlocal3\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 69 \nNumber of nonzero links: 284 \nPercentage nonzero weights: 5.965133 \nAverage number of links: 4.115942 \n1 region with no links:\n67\n2 disjoint connected subgraphs\n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 68 4624 68 36.26116 284.0635\n```\n\n\n:::\n:::\n\n:::\n\n### **Computing local Moran’s I**\n\nTo compute local Moran’s I, the [*localmoran()*](https://r-spatial.github.io/spdep/reference/localmoran.html) function of **spdep** will be used. It computes *Ii* values, given a set of *zi* values and a listw object providing neighbour weighting information for the polygon associated with the zi values.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfips1 <- order(Pre$value)\nlocalMI1 <- localmoran(Pre$value, rswm_qlocal1)\nhead(localMI1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n           Ii          E.Ii      Var.Ii       Z.Ii Pr(z != E(Ii))\n1 -1.62587607 -0.8325197754 1.483791299 -0.6513012   5.148521e-01\n2 -0.73148625 -0.0005890336 0.020006558 -5.1673766   2.374026e-07\n3 -0.37916430 -0.0006942310 0.011431328 -3.5398365   4.003750e-04\n4 -0.24789541 -0.0007505177 0.007980859 -2.7664756   5.666583e-03\n5  0.02428098 -0.0001835184 0.001952606  0.5536419   5.798239e-01\n6  0.04600063 -0.0008740871 0.019486835  0.3357902   7.370291e-01\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nfips2 <- order(Cov$value)\nlocalMI2 <- localmoran(Cov$value, rswm_qlocal2)\nhead(localMI2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n           Ii          E.Ii      Var.Ii       Z.Ii Pr(z != E(Ii))\n1 -1.96086714 -0.8007467620 1.697912502 -0.8903185   3.732949e-01\n2 -0.92877251 -0.0009924257 0.033694188 -5.0543760   4.318001e-07\n3 -0.44867282 -0.0010370044 0.017069636 -3.4261998   6.120899e-04\n4 -0.30696382 -0.0012320219 0.013094767 -2.6717248   7.546250e-03\n5  0.02298447 -0.0001133665 0.001206286  0.6650375   5.060265e-01\n6  0.06504788 -0.0014217994 0.031680119  0.3734480   7.088150e-01\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nfips3 <- order(Post$value)\nlocalMI3 <- localmoran(Post$value, rswm_qlocal3)\nhead(localMI3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n           Ii          E.Ii       Var.Ii       Z.Ii Pr(z != E(Ii))\n1 -1.62688650 -7.351427e-01 2.0720406541 -0.6194995   5.355874e-01\n2 -0.76461738 -7.268483e-04 0.0246840386 -4.8620903   1.161526e-06\n3 -0.37000978 -7.509636e-04 0.0123647935 -3.3207596   8.977281e-04\n4 -0.25618657 -9.032642e-04 0.0096036661 -2.6049769   9.188044e-03\n5  0.01210192 -4.357086e-05 0.0004636517  0.5640520   5.727188e-01\n6  0.04820920 -1.119993e-03 0.0249628970  0.3122170   7.548756e-01\n```\n\n\n:::\n:::\n\n*localmoran()* function returns a matrix of values whose columns are:\n\n-   Ii: the local Moran’s I statistics\n\n-   E.Ii: the expectation of local moran statistic under the randomisation hypothesis\n\n-   Var.Ii: the variance of local moran statistic under the randomisation hypothesis\n\n-   Z.Ii:the standard deviate of local moran statistic\n\n-   Pr(): the p-value of local moran statistic\n\nThe code chunk below list the content of the local Moran matrix derived by using [*printCoefmat()*](https://www.rdocumentation.org/packages/stats/versions/3.6.2/topics/printCoefmat).\n\n::: panel-tabset\n\n### Pre\n\n::: {.cell}\n\n```{.r .cell-code}\nprintCoefmat(data.frame(\n  localMI1[fips1,], \n  row.names=Pre$value[fips1]),\n  check.names=FALSE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                       Ii        E.Ii      Var.Ii        Z.Ii Pr.z....E.Ii..\n439290000      5.4816e-02 -9.0433e-04  2.0160e-02  3.9243e-01         0.6947\n832460000      5.5557e-02 -8.8357e-04  1.4546e-02  4.6797e-01         0.6398\n877620000      5.5121e-02 -8.8120e-04  1.9645e-02  3.9956e-01         0.6895\n1013520000     4.6001e-02 -8.7409e-04  1.9487e-02  3.3579e-01         0.7370\n1046100000     1.8096e-02 -8.7239e-04  1.9449e-02  1.3601e-01         0.8918\n1070360000     5.5028e-02 -8.7112e-04  1.9421e-02  4.0112e-01         0.6883\n1197630000     5.0320e-02 -8.6450e-04  1.4233e-02  4.2904e-01         0.6679\n1241890000     4.9581e-02 -8.6220e-04  9.1675e-03  5.2684e-01         0.5983\n1354470000     4.0900e-02 -8.5638e-04  1.4099e-02  3.5167e-01         0.7251\n1403160000     4.3800e-02 -8.5386e-04  1.4058e-02  3.7662e-01         0.7065\n1451390000     5.6924e-02 -8.5137e-04  1.1038e-02  5.4991e-01         0.5824\n1499070000     5.0781e-02 -8.4892e-04  1.3976e-02  4.3672e-01         0.6623\n1660010000     5.1275e-02 -8.4066e-04  1.0899e-02  4.9919e-01         0.6176\n1682620000    -1.0919e-02 -8.3950e-04  1.8716e-02 -7.3674e-02         0.9413\n1760690000     5.4800e-02 -8.3551e-04  1.0833e-02  5.3455e-01         0.5930\n2182030000     5.5028e-02 -8.1414e-04  1.8151e-02  4.1448e-01         0.6785\n2203120000     3.0220e-02 -8.1308e-04  1.8128e-02  2.3049e-01         0.8177\n2240800000     5.1756e-02 -8.1118e-04  1.3356e-02  4.5487e-01         0.6492\n2476930000     5.1437e-02 -7.9935e-04  8.4997e-03  5.6659e-01         0.5710\n2488740000    -4.0029e-01 -7.9876e-04  1.3151e-02 -3.4836e+00         0.0005\n2723910000     5.5074e-02 -7.8707e-04  1.7548e-02  4.2169e-01         0.6733\n3081410000     3.6397e-02 -7.6945e-04  1.7156e-02  2.8375e-01         0.7766\n3167900000     5.5097e-02 -7.6522e-04  2.5986e-02  3.4653e-01         0.7289\n3170560000     5.3649e-02 -7.6509e-04  2.5982e-02  3.3758e-01         0.7357\n3340550000     1.8118e-02 -7.5681e-04  1.6874e-02  1.4530e-01         0.8845\n3423810000     1.5165e-02 -7.5277e-04  1.2395e-02  1.4298e-01         0.8863\n3470340000    -2.4790e-01 -7.5052e-04  7.9809e-03 -2.7665e+00         0.0057\n3583740000     5.4181e-02 -7.4504e-04  7.9227e-03  6.1708e-01         0.5372\n3886930000     4.8987e-02 -7.3050e-04  7.7681e-03  5.6409e-01         0.5727\n3981200000     5.0318e-02 -7.2601e-04  7.7204e-03  5.8093e-01         0.5613\n4351570000     1.9517e-02 -7.0849e-04  6.3538e-03  2.5374e-01         0.7997\n4406940000     3.2476e-02 -7.0589e-04  9.1532e-03  3.4683e-01         0.7287\n4464180000    -2.6138e-02 -7.0321e-04  2.3882e-02 -1.6459e-01         0.8693\n4656420000    -3.7916e-01 -6.9423e-04  1.1431e-02 -3.5398e+00         0.0004\n4660380000     3.8291e-02 -6.9405e-04  8.9998e-03  4.1094e-01         0.6811\n5085780000    -2.3245e-01 -6.7440e-04  7.1719e-03 -2.7369e+00         0.0062\n5303860000    -3.7898e-02 -6.6443e-04  2.2566e-02 -2.4786e-01         0.8042\n5675580000     4.5210e-02 -6.4762e-04  1.0664e-02  4.4407e-01         0.6570\n5717250000     3.8270e-02 -6.4575e-04  6.8675e-03  4.6960e-01         0.6386\n6201880000    -1.9087e-01 -6.2418e-04  5.5982e-03 -2.5427e+00         0.0110\n6761140000     3.1833e-02 -5.9975e-04  1.3374e-02  2.8044e-01         0.7791\n6810880000     3.0441e-02 -5.9760e-04  9.8411e-03  3.1288e-01         0.7544\n7010030000    -7.3149e-01 -5.8903e-04  2.0007e-02 -5.1674e+00         0.0000\n7293470000     2.3987e-02 -5.7695e-04  3.8929e-03  3.9370e-01         0.6938\n7535610000    -1.7942e-02 -5.6672e-04  1.2638e-02 -1.5456e-01         0.8772\n7658970000     3.4815e-02 -5.6155e-04  9.2478e-03  3.6787e-01         0.7130\n7680850000     3.9799e-02 -5.6063e-04  5.9628e-03  5.2267e-01         0.6012\n7997570000     4.7570e-02 -5.4747e-04  1.8596e-02  3.5286e-01         0.7242\n8555020000     4.2486e-02 -5.2467e-04  5.5805e-03  5.7576e-01         0.5648\n8713840000     2.3696e-02 -5.1827e-04  8.5354e-03  2.6210e-01         0.7932\n9239110000     1.0774e-02 -4.9737e-04  1.1092e-02  1.0702e-01         0.9148\n9561350000    -9.0277e-04 -4.8476e-04  7.9838e-03 -4.6783e-03         0.9963\n11425460000    3.4325e-02 -4.1498e-04  5.3827e-03  4.7352e-01         0.6358\n1.5996e+10    -2.2209e-02 -2.6684e-04  3.4617e-03 -3.7294e-01         0.7092\n18111280000    2.3370e-02 -2.0931e-04  1.8780e-03  5.4410e-01         0.5864\n19153920000    2.4281e-02 -1.8352e-04  1.9526e-03  5.5364e-01         0.5798\n19713730000    2.0206e-02 -1.7037e-04  1.1754e-02  1.8795e-01         0.8509\n24744100000    1.3539e-02 -7.4145e-05  9.6204e-04  4.3890e-01         0.6607\n27883920000    1.0342e-02 -3.4085e-05  4.4228e-04  4.9337e-01         0.6218\n29291710000   -1.1899e-03 -2.1116e-05  4.7115e-04 -5.3847e-02         0.9571\n31034390000    3.2792e-03 -9.3415e-06  2.0844e-04  2.2778e-01         0.8198\n37081190000   -3.5342e-03 -5.2120e-06  3.5963e-04 -1.8609e-01         0.8524\n42392630000   -6.3686e-03 -4.8623e-05  1.6524e-03 -1.5547e-01         0.8764\n66365520000   -4.7121e-02 -7.9193e-04  1.0268e-02 -4.5720e-01         0.6475\n94287120000    1.6392e-03 -2.7874e-03  4.5802e-02  2.0684e-02         0.9835\n110670330000  -1.0061e-01 -4.5243e-03  5.8442e-02 -3.9746e-01         0.6910\n112055500000   2.2421e-02 -4.6903e-03  1.0417e-01  8.4003e-02         0.9331\n442890670000   0.0000e+00  0.0000e+00  0.0000e+00         NaN            NaN\n1067813760000 -1.6259e+00 -8.3252e-01  1.4838e+00 -6.5130e-01         0.5149\n```\n\n\n:::\n:::\n\n### Cov\n\n::: {.cell}\n\n```{.r .cell-code}\nprintCoefmat(data.frame(\n  localMI2[fips2,], \n  row.names=Cov$value[fips2]),\n  check.names=FALSE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                      Ii        E.Ii      Var.Ii        Z.Ii Pr.z....E.Ii..\n347230000     8.5213e-02 -1.5009e-03  3.3440e-02  4.7419e-01         0.6354\n506420000     8.7039e-02 -1.4648e-03  2.4101e-02  5.7009e-01         0.5686\n625060000     2.9139e-02 -1.4382e-03  3.2045e-02  1.7081e-01         0.8644\n640910000     8.2014e-02 -1.4347e-03  3.1966e-02  4.6674e-01         0.6407\n698660000     6.5048e-02 -1.4218e-03  3.1680e-02  3.7345e-01         0.7088\n791930000     6.8955e-02 -1.4012e-03  1.4890e-02  5.7658e-01         0.5642\n808940000     8.3182e-02 -1.3974e-03  3.1138e-02  4.7932e-01         0.6317\n835010000    -5.0953e-01 -1.3917e-03  2.2900e-02 -3.3579e+00         0.0008\n844860000     7.1068e-02 -1.3895e-03  2.2864e-02  4.7918e-01         0.6318\n970340000     9.0434e-02 -1.3621e-03  4.6229e-02  4.2694e-01         0.6694\n1187210000    8.8783e-02 -1.3154e-03  1.7046e-02  6.9009e-01         0.4901\n1202240000    3.2661e-02 -1.3122e-03  2.1593e-02  2.3119e-01         0.8172\n1258250000    6.5348e-02 -1.3003e-03  2.1397e-02  4.5562e-01         0.6487\n1285790000    7.0181e-02 -1.2944e-03  1.6775e-02  5.5186e-01         0.5810\n1378990000    4.1117e-02 -1.2748e-03  2.0978e-02  2.9268e-01         0.7698\n1440050000   -9.8233e-02 -1.2620e-03  2.8123e-02 -5.7824e-01         0.5631\n1532830000    8.8151e-03 -1.2426e-03  2.7693e-02  6.0439e-02         0.9518\n1583988000   -3.0696e-01 -1.2320e-03  1.3095e-02 -2.6717e+00         0.0075\n1630210000    7.0716e-02 -1.2225e-03  2.0119e-02  5.0717e-01         0.6120\n1659710000    7.7544e-02 -1.2164e-03  1.5765e-02  6.2727e-01         0.5305\n1723580000    8.2330e-02 -1.2033e-03  2.6818e-02  5.1008e-01         0.6100\n1806160000   -1.2466e-02 -1.1865e-03  4.0276e-02 -5.6204e-02         0.9552\n1831670000    8.3255e-03 -1.1814e-03  1.9443e-02  6.8180e-02         0.9456\n1908320000    2.9161e-02 -1.1659e-03  2.5985e-02  1.8813e-01         0.8508\n2006890000    7.2660e-02 -1.1462e-03  1.2183e-02  6.6866e-01         0.5037\n2111990000    8.3881e-02 -1.1253e-03  3.8201e-02  4.3493e-01         0.6636\n2137810000    8.3170e-02 -1.1202e-03  1.1908e-02  7.7243e-01         0.4399\n2536360000    6.5511e-02 -1.0430e-03  1.1088e-02  6.3204e-01         0.5274\n2568164700   -4.4867e-01 -1.0370e-03  1.7070e-02 -3.4262e+00         0.0006\n2571390000    7.7017e-02 -1.0364e-03  2.3102e-02  5.1354e-01         0.6076\n2659740000    2.7624e-02 -1.0197e-03  2.2730e-02  1.8999e-01         0.8493\n2805840000   -9.2877e-01 -9.9243e-04  3.3694e-02 -5.0544e+00         0.0000\n3235700000    6.5848e-02 -9.1429e-04  9.7208e-03  6.7714e-01         0.4983\n3327450000    1.6153e-02 -8.9802e-04  1.1642e-02  1.5802e-01         0.8744\n3443380000    5.9195e-02 -8.7768e-04  1.4449e-02  4.9975e-01         0.6173\n3476880000    3.6818e-02 -8.7185e-04  1.1303e-02  3.5450e-01         0.7230\n3479791500   -2.2572e-01 -8.7134e-04  7.8130e-03 -2.5438e+00         0.0110\n3651050000   -3.2561e-02 -8.4183e-04  1.8768e-02 -2.3153e-01         0.8169\n3856120000   -1.4520e-01 -8.0716e-04  2.7409e-02 -8.7218e-01         0.3831\n3860690000    2.1772e-02 -8.0640e-04  1.7979e-02  1.6839e-01         0.8663\n3872512000    2.6692e-02 -8.0442e-04  1.3244e-02  2.3893e-01         0.8112\n3885630000   -1.0888e-02 -8.0223e-04  7.1938e-03 -1.1891e-01         0.9053\n4090640000   -2.3714e-01 -7.6840e-04  8.1709e-03 -2.6149e+00         0.0089\n4137150000    3.8125e-02 -7.6083e-04  8.0904e-03  4.3232e-01         0.6655\n4914140000    6.6236e-02 -6.3986e-04  2.1732e-02  4.5365e-01         0.6501\n4935630000    4.0847e-03 -6.3667e-04  4.2956e-03  7.2037e-02         0.9426\n5265060000    3.1567e-02 -5.8866e-04  9.6940e-03  3.2659e-01         0.7440\n5351750000    1.1519e-03 -5.7634e-04  9.4913e-03  1.7739e-02         0.9858\n6447510000    3.6642e-02 -4.3185e-04  4.5937e-03  5.4700e-01         0.5844\n6456340000    1.8550e-02 -4.3077e-04  7.0950e-03  2.2534e-01         0.8217\n6718420000    9.6139e-03 -3.9933e-04  8.9070e-03  1.0610e-01         0.9155\n6846620000    4.2130e-02 -3.8439e-04  4.0890e-03  6.6486e-01         0.5061\n7809350000    3.0870e-02 -2.8128e-04  3.6489e-03  5.1570e-01         0.6061\n9889390000    2.2984e-02 -1.1337e-04  1.2063e-03  6.6504e-01         0.5060\n10988520000  -7.7991e-03 -5.4928e-05  7.1271e-04 -2.9008e-01         0.7718\n11727340000   7.3899e-03 -2.7416e-05  1.8917e-03  1.7054e-01         0.8646\n11841010000   7.7319e-03 -2.4024e-05  2.1559e-04  5.2822e-01         0.5973\n16487420000  -1.2390e-02 -7.7063e-05  5.3170e-03 -1.6885e-01         0.8659\n18481640000  -2.4143e-02 -2.1462e-04  2.7844e-03 -4.5347e-01         0.6502\n22897720000   6.9901e-02 -7.6462e-04  1.7048e-02  5.4121e-01         0.5884\n23392430000  -1.1614e-02 -8.4729e-04  1.8890e-02 -7.8335e-02         0.9376\n23700530000  -6.0629e-02 -9.0093e-04  1.1680e-02 -5.5266e-01         0.5805\n26124870000  -6.7624e-02 -1.3804e-03  1.7887e-02 -4.9531e-01         0.6204\n26975780000  -8.0421e-03 -1.5728e-03  2.5875e-02 -4.0217e-02         0.9679\n28551560000   1.4160e-04 -1.9623e-03  6.6558e-02  8.1550e-03         0.9935\n33525870000   1.1009e-02 -3.4743e-03  7.7254e-02  5.2108e-02         0.9584\n73132280000  -2.1449e-01 -3.0819e-02  3.8758e-01 -2.9503e-01         0.7680\n129783630000  0.0000e+00  0.0000e+00  0.0000e+00         NaN            NaN\n317440070000 -1.9609e+00 -8.0075e-01  1.6979e+00 -8.9032e-01         0.3733\n```\n\n\n:::\n:::\n\n\n### Post\n\n::: {.cell}\n\n```{.r .cell-code}\nprintCoefmat(data.frame(\n  localMI3[fips3,], \n  row.names=Post$value[fips3]),\n  check.names=FALSE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                      Ii        E.Ii      Var.Ii        Z.Ii Pr.z....E.Ii..\n288580000     7.1769e-02 -1.1931e-03  2.6590e-02  4.4745e-01         0.6546\n497800000     7.2666e-02 -1.1653e-03  1.9179e-02  5.3312e-01         0.5939\n667970000     4.5883e-02 -1.1429e-03  2.5474e-02  2.9464e-01         0.7683\n706040000     6.3921e-02 -1.1380e-03  1.8730e-02  4.7538e-01         0.6345\n791220000     6.1174e-02 -1.1269e-03  1.1979e-02  5.6923e-01         0.5692\n844470000     4.8209e-02 -1.1200e-03  2.4963e-02  3.1222e-01         0.7549\n901600000     6.2193e-02 -1.1126e-03  2.4799e-02  4.0200e-01         0.6877\n913660000     3.7719e-02 -1.1111e-03  1.8287e-02  2.8714e-01         0.7740\n959320000    -4.3859e-01 -1.1052e-03  1.8191e-02 -3.2437e+00         0.0012\n1011090000    7.3328e-02 -1.0985e-03  1.4239e-02  6.2372e-01         0.5328\n1040740000    7.1900e-02 -1.0947e-03  3.7164e-02  3.7864e-01         0.7050\n1111400000    6.5056e-02 -1.0857e-03  2.4200e-02  4.2518e-01         0.6707\n1307920000    5.3466e-02 -1.0608e-03  1.7461e-02  4.1264e-01         0.6799\n1426390000   -4.4348e-03 -1.0460e-03  3.5510e-02 -1.7983e-02         0.9857\n1542030000    3.0712e-02 -1.0316e-03  1.6980e-02  2.4361e-01         0.8075\n1545290000    5.8686e-02 -1.0312e-03  1.6973e-02  4.5837e-01         0.6467\n1597980000    5.7208e-02 -1.0246e-03  1.3282e-02  5.0528e-01         0.6134\n1688090000   -4.6210e-02 -1.0135e-03  2.2592e-02 -3.0069e-01         0.7636\n1723260000    3.1496e-02 -1.0092e-03  2.2496e-02  2.1672e-01         0.8284\n1876690000    7.1560e-02 -9.9042e-04  3.3626e-02  3.9564e-01         0.6924\n2256270000    1.7436e-02 -9.4478e-04  1.5553e-02  1.4739e-01         0.8828\n2367900000    1.9397e-02 -9.3156e-04  1.2077e-02  1.8498e-01         0.8532\n2487410000    5.9624e-02 -9.1751e-04  9.7550e-03  6.1297e-01         0.5399\n2565470000    5.5390e-02 -9.0839e-04  9.6581e-03  5.7286e-01         0.5667\n2582880000    4.3386e-02 -9.0637e-04  2.0206e-02  3.1159e-01         0.7554\n2609550000   -2.5619e-01 -9.0326e-04  9.6037e-03 -2.6050e+00         0.0092\n2743700000    6.2812e-02 -8.8774e-04  1.9791e-02  4.5280e-01         0.6507\n2759030000    6.5942e-02 -8.8598e-04  9.4201e-03  6.8855e-01         0.4911\n2920220000    5.8338e-02 -8.6753e-04  1.1247e-02  5.5826e-01         0.5767\n3769960000   -2.6599e-02 -7.7347e-04  1.7245e-02 -1.9666e-01         0.8441\n3793300000    6.4835e-02 -7.7096e-04  2.6181e-02  4.0546e-01         0.6851\n3893950000    5.7685e-02 -7.6019e-04  1.6950e-02  4.4892e-01         0.6535\n3980790000   -3.7001e-01 -7.5096e-04  1.2365e-02 -3.3208e+00         0.0009\n4025230000    3.7239e-02 -7.4626e-04  9.6764e-03  3.8616e-01         0.6994\n4049550000    3.9639e-02 -7.4370e-04  1.2245e-02  3.6493e-01         0.7152\n4179520000    5.1051e-02 -7.3006e-04  1.2021e-02  4.7228e-01         0.6367\n4210270000   -7.6462e-01 -7.2685e-04  2.4684e-02 -4.8621e+00         0.0000\n4235180000    3.5104e-02 -7.2425e-04  1.6149e-02  2.8194e-01         0.7780\n4340990000    3.2923e-02 -7.1329e-04  1.1745e-02  3.1037e-01         0.7563\n4446330000   -1.9355e-01 -7.0245e-04  6.2997e-03 -2.4297e+00         0.0151\n5122830000    4.9184e-02 -6.3484e-04  6.7516e-03  6.0630e-01         0.5443\n5184750000   -3.8198e-03 -6.2883e-04  5.6398e-03 -4.2491e-02         0.9661\n5210970000   -7.5825e-02 -6.2629e-04  2.1271e-02 -5.1560e-01         0.6061\n5575560000    2.3228e-02 -5.9151e-04  1.3191e-02  2.0739e-01         0.8357\n5950560000    3.1110e-02 -5.5678e-04  5.9218e-03  4.1151e-01         0.6807\n6126410000   -1.9066e-01 -5.4085e-04  5.7525e-03 -2.5066e+00         0.0122\n6172350000    1.2850e-02 -5.3673e-04  3.6216e-03  2.2244e-01         0.8240\n6338720000    2.9219e-02 -5.2193e-04  8.5957e-03  3.2079e-01         0.7484\n6879830000    6.1926e-03 -4.7523e-04  6.1637e-03  8.4930e-02         0.9323\n7100440000    2.7480e-02 -4.5682e-04  1.0189e-02  2.7678e-01         0.7820\n7425020000    2.6582e-02 -4.3039e-04  7.0888e-03  3.2083e-01         0.7483\n7509640000    3.6802e-02 -4.2363e-04  5.4948e-03  5.0219e-01         0.6155\n7635820000    3.9915e-02 -4.1365e-04  4.4002e-03  6.0797e-01         0.5432\n8319550000    3.2429e-02 -3.6164e-04  3.8471e-03  5.2867e-01         0.5970\n10815140000   2.2049e-02 -2.0143e-04  1.3896e-02  1.8875e-01         0.8503\n11288750000   2.2885e-02 -1.7629e-04  1.5818e-03  5.7985e-01         0.5620\n12236150000   1.8676e-02 -1.3101e-04  1.6998e-03  4.5616e-01         0.6483\n12532210000   1.6892e-02 -1.1824e-04  8.1573e-03  1.8834e-01         0.8506\n14742630000   1.2102e-02 -4.3571e-05  4.6365e-04  5.6405e-01         0.5727\n19873080000  -6.3334e-03 -1.0999e-05  1.4272e-04 -5.2922e-01         0.5966\n20222600000  -1.5078e-03 -1.5937e-05  3.5560e-04 -7.9112e-02         0.9369\n26284600000  -2.9037e-02 -2.4681e-04  3.2018e-03 -5.0881e-01         0.6109\n29347480000  -5.9573e-03 -4.6789e-04  1.0435e-02 -5.3737e-02         0.9571\n34631220000  -4.2204e-02 -1.0141e-03  1.6692e-02 -3.1881e-01         0.7499\n40243070000  -8.9713e-03 -1.8226e-03  6.1829e-02 -2.8749e-02         0.9771\n43368340000   6.2375e-02 -2.3749e-03  5.2867e-02  2.8161e-01         0.7782\n76243090000  -8.6081e-02 -1.2607e-02  1.6153e-01 -1.8281e-01         0.8549\n258106830000  0.0000e+00  0.0000e+00  0.0000e+00         NaN            NaN\n461713600000 -1.6269e+00 -7.3514e-01  2.0720e+00 -6.1950e-01         0.5356\n```\n\n\n:::\n:::\n\n\n:::\n\n#### Mapping the local Moran’s I\n\nBefore mapping the local Moran’s I map, it is wise to append the local Moran’s I dataframe (i.e. localMI) onto the SpatialPolygonDataFrame. The code chunks below can be used to perform the task.\n\n::: panel-tabset\n\n### Pre\n\n::: {.cell}\n\n```{.r .cell-code}\nPre.localMI <- cbind(Pre,localMI1) %>%\n  rename(Pr.Ii = Pr.z....E.Ii..)\n```\n:::\n\n### Cov\n\n::: {.cell}\n\n```{.r .cell-code}\nCov.localMI <- cbind(Cov,localMI2) %>%\n  rename(Pr.Ii = Pr.z....E.Ii..)\n```\n:::\n\n\n### Post\n\n::: {.cell}\n\n```{.r .cell-code}\nPost.localMI <- cbind(Post,localMI3) %>%\n  rename(Pr.Ii = Pr.z....E.Ii..)\n```\n:::\n\n:::\n#### Mapping local Moran’s I values\n\nUsing choropleth mapping functions of **tmap** package, we can plot the local Moran’s I values by using the code chinks below.\n\n::: panel-tabset\n\n### Pre\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(Pre.localMI) +\n  tm_fill(col = \"Ii\", \n          style = \"pretty\",\n          palette = \"RdBu\",\n          title = \"local moran statistics\") +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nVariable(s) \"Ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](Take-Home_Exercise02_files/figure-html/unnamed-chunk-199-1.png){width=672}\n:::\n:::\n\n\n### Cov\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(Cov.localMI) +\n  tm_fill(col = \"Ii\", \n          style = \"pretty\",\n          palette = \"RdBu\",\n          title = \"local moran statistics\") +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nVariable(s) \"Ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](Take-Home_Exercise02_files/figure-html/unnamed-chunk-200-1.png){width=672}\n:::\n:::\n\n\n### Post\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(Post.localMI) +\n  tm_fill(col = \"Ii\", \n          style = \"pretty\",\n          palette = \"RdBu\",\n          title = \"local moran statistics\") +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nVariable(s) \"Ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](Take-Home_Exercise02_files/figure-html/unnamed-chunk-201-1.png){width=672}\n:::\n:::\n\n:::\n#### Mapping local Moran’s I p-values\n\nThe choropleth shows there is evidence for both positive and negative Ii values. However, it is useful to consider the p-values for each of these values, as consider above.\n\nThe code chunks below produce a choropleth map of Moran’s I p-values by using functions of **tmap** package.\n\n::: panel-tabset\n\n### Pre\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(Pre.localMI) +\n  tm_fill(col = \"Pr.Ii\", \n          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n          palette=\"-Blues\", \n          title = \"local Moran's I p-values\") +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nSome legend labels were too wide. These labels have been resized to 0.61. Increase legend.width (argument of tm_layout) to make the legend wider and therefore the labels larger.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](Take-Home_Exercise02_files/figure-html/unnamed-chunk-202-1.png){width=672}\n:::\n:::\n\n### Cov\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(Cov.localMI) +\n  tm_fill(col = \"Pr.Ii\", \n          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n          palette=\"-Blues\", \n          title = \"local Moran's I p-values\") +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nSome legend labels were too wide. These labels have been resized to 0.61. Increase legend.width (argument of tm_layout) to make the legend wider and therefore the labels larger.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](Take-Home_Exercise02_files/figure-html/unnamed-chunk-203-1.png){width=672}\n:::\n:::\n\n### Post\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(Post.localMI) +\n  tm_fill(col = \"Pr.Ii\", \n          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n          palette=\"-Blues\", \n          title = \"local Moran's I p-values\") +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nSome legend labels were too wide. These labels have been resized to 0.61. Increase legend.width (argument of tm_layout) to make the legend wider and therefore the labels larger.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](Take-Home_Exercise02_files/figure-html/unnamed-chunk-204-1.png){width=672}\n:::\n:::\n\n:::\n\n## **Creating a LISA Cluster Map**\n\nThe LISA Cluster Map shows the significant locations color coded by type of spatial autocorrelation. The first step before we can generate the LISA cluster map is to plot the Moran scatterplot.\n\n### **Plotting Moran scatterplot**\n\nThe Moran scatterplot is an illustration of the relationship between the values of the chosen attribute at each location and the average value of the same attribute at neighboring locations.\n\nThe code chunk below plots the Moran scatterplot by using [*moran.plot()*](https://r-spatial.github.io/spdep/reference/moran.plot.html) of **spdep**.\n\n::: panel-tabset\n\n### Pre\n\n::: {.cell}\n\n```{.r .cell-code}\nncipre <- moran.plot(Pre$value, rswm_qlocal1,\n                  labels=as.character(Pre$province_eng), \n                  xlab=\"Tourists\", \n                  ylab=\"Spatially Lag tourists\")\n```\n\n::: {.cell-output-display}\n![](Take-Home_Exercise02_files/figure-html/unnamed-chunk-205-1.png){width=672}\n:::\n:::\n\n### Cov\n\n::: {.cell}\n\n```{.r .cell-code}\nncicov <- moran.plot(Cov$value, rswm_qlocal2,\n                  labels=as.character(Cov$province_eng), \n                  xlab=\"Tourists\", \n                  ylab=\"Spatially Lag tourists\")\n```\n\n::: {.cell-output-display}\n![](Take-Home_Exercise02_files/figure-html/unnamed-chunk-206-1.png){width=672}\n:::\n:::\n\n### Post\n\n::: {.cell}\n\n```{.r .cell-code}\nncipost <- moran.plot(Post$value, rswm_qlocal3,\n                  labels=as.character(Post$province_eng), \n                  xlab=\"Tourists\", \n                  ylab=\"Spatially Lag tourists\")\n```\n\n::: {.cell-output-display}\n![](Take-Home_Exercise02_files/figure-html/unnamed-chunk-207-1.png){width=672}\n:::\n:::\n\n:::\nNotice that the plots are split in 4 quadrants. The top right corner belongs to areas that have high tourism numbers and are surrounded by other areas that have the average level of revenue.\n\n\n### **Preparing LISA map classes**\n\nThe code chunks below show the steps to prepare a LISA cluster map.\n\n::: panel-tabset\n\n### Pre\n\n\n::: {.cell}\n\n```{.r .cell-code}\nquadrantpre <- vector(mode=\"numeric\",length=nrow(localMI1))\nPre$lag_value <- lag.listw(rswm_qlocal1, Pre$value)\nDV1 <- Pre$lag_value - mean(Pre$lag_value)     \nLM_IPre <- localMI1[,1]   \nsignif <- 0.05       \nquadrantpre[DV1 <0 & LM_IPre>0] <- 1\nquadrantpre[DV1 >0 & LM_IPre<0] <- 2\nquadrantpre[DV1 <0 & LM_IPre<0] <- 3  \nquadrantpre[DV1 >0 & LM_IPre>0] <- 4    \nquadrantpre[localMI1[,5]>signif] <- 0\n```\n:::\n\n\n### Cov\n\n::: {.cell}\n\n```{.r .cell-code}\nquadrantcov <- vector(mode=\"numeric\",length=nrow(localMI2))\nCov$lag_value <- lag.listw(rswm_qlocal2, Cov$value)\nDV2 <- Cov$lag_value - mean(Cov$lag_value)     \nLM_ICov <- localMI2[,1]   \nsignif <- 0.05       \nquadrantcov[DV2 <0 & LM_ICov>0] <- 1\nquadrantcov[DV2 >0 & LM_ICov<0] <- 2\nquadrantcov[DV2 <0 & LM_ICov<0] <- 3  \nquadrantcov[DV2 >0 & LM_ICov>0] <- 4    \nquadrantcov[localMI2[,5]>signif] <- 0\n```\n:::\n\n### Post\n\n::: {.cell}\n\n```{.r .cell-code}\nquadrantpost <- vector(mode=\"numeric\",length=nrow(localMI3))\nPost$lag_value <- lag.listw(rswm_qlocal3, Post$value)\nDV3 <- Post$lag_value - mean(Post$lag_value)     \nLM_IPost <- localMI3[,1]   \nsignif <- 0.05       \nquadrantpost[DV3 <0 & LM_IPost>0] <- 1\nquadrantpost[DV3 >0 & LM_IPost<0] <- 2\nquadrantpost[DV3 <0 & LM_IPost<0] <- 3  \nquadrantpost[DV3 >0 & LM_IPost>0] <- 4    \nquadrantpost[localMI3[,5]>signif] <- 0\n```\n:::\n\n:::\n### **Plotting LISA map**\n\nNow, we can build the LISA map by using the code chunks below.\n\n::: panel-tabset\n\n### Pre\n\n::: {.cell}\n\n```{.r .cell-code}\nPre.localMI$quadrantpre <- quadrantpre\ncolors <- c(\"#ffffff\", \"#2c7bb6\", \"#abd9e9\", \"#fdae61\", \"#d7191c\")\nclusters <- c(\"insignificant\", \"low-low\", \"low-high\", \"high-low\", \"high-high\")\n\ntm_shape(Pre.localMI) +\n  tm_fill(col = \"quadrantpre\", \n          style = \"cat\", \n          palette = colors[c(sort(unique(quadrantpre)))+1], \n          labels = clusters[c(sort(unique(quadrantpre)))+1],\n          popup.vars = c(\"\")) +\n  tm_view(set.zoom.limits = c(11,17)) +\n  tm_borders(alpha=0.5)\n```\n\n::: {.cell-output-display}\n![](Take-Home_Exercise02_files/figure-html/unnamed-chunk-211-1.png){width=672}\n:::\n:::\n\n\n### Cov\n\n::: {.cell}\n\n```{.r .cell-code}\nCov.localMI$quadrantcov <- quadrantcov\ncolors <- c(\"#ffffff\", \"#2c7bb6\", \"#abd9e9\", \"#fdae61\", \"#d7191c\")\nclusters <- c(\"insignificant\", \"low-low\", \"low-high\", \"high-low\", \"high-high\")\n\ntm_shape(Cov.localMI) +\n  tm_fill(col = \"quadrantcov\", \n          style = \"cat\", \n          palette = colors[c(sort(unique(quadrantcov)))+1], \n          labels = clusters[c(sort(unique(quadrantcov)))+1],\n          popup.vars = c(\"\")) +\n  tm_view(set.zoom.limits = c(11,17)) +\n  tm_borders(alpha=0.5)\n```\n\n::: {.cell-output-display}\n![](Take-Home_Exercise02_files/figure-html/unnamed-chunk-212-1.png){width=672}\n:::\n:::\n\n### Post\n\n::: {.cell}\n\n```{.r .cell-code}\nPost.localMI$quadrantpost <- quadrantpost\ncolors <- c(\"#ffffff\", \"#2c7bb6\", \"#abd9e9\", \"#fdae61\", \"#d7191c\")\nclusters <- c(\"insignificant\", \"low-low\", \"low-high\", \"high-low\", \"high-high\")\n\ntm_shape(Post.localMI) +\n  tm_fill(col = \"quadrantpost\", \n          style = \"cat\", \n          palette = colors[c(sort(unique(quadrantpost)))+1], \n          labels = clusters[c(sort(unique(quadrantpost)))+1],\n          popup.vars = c(\"\")) +\n  tm_view(set.zoom.limits = c(11,17)) +\n  tm_borders(alpha=0.5)\n```\n\n::: {.cell-output-display}\n![](Take-Home_Exercise02_files/figure-html/unnamed-chunk-213-1.png){width=672}\n:::\n:::\n\n:::\n\n\n# **Hot Spot and Cold Spot Area Analysis**\n\nBeside detecting cluster and outliers, localised spatial statistics can be also used to detect hot spot and/or cold spot areas.\n\nThe term ‘hot spot’ has been used generically across disciplines to describe a region or value that is higher relative to its surroundings (Lepers et al 2005, Aben et al 2012, Isobe et al 2015).\n\n### **Getis and Ord’s G-Statistics**\n\nAn alternative spatial statistics to detect spatial anomalies is the Getis and Ord’s G-statistics (Getis and Ord, 1972; Ord and Getis, 1995). It looks at neighbours within a defined proximity to identify where either high or low values clutser spatially. Here, statistically significant hot-spots are recognised as areas of high values where other areas within a neighbourhood range also share high values too.\n\nThe analysis consists of three steps:\n\n-   Deriving spatial weight matrix\n\n-   Computing Gi statistics\n\n-   Mapping Gi statistics\n\n### **Deriving distance-based weight matrix**\n\nFirst, we need to define a new set of neighbours. Whist the spatial autocorrelation considered units which shared borders, for Getis-Ord we are defining neighbours based on distance.\n\nThere are two type of distance-based proximity matrix, they are:\n\n-   fixed distance weight matrix; and\n\n-   adaptive distance weight matrix.\n\n#### Deriving the centroid\n\nWe will need points to associate with each polygon before we can make our connectivity graph. It will be a little more complicated than just running *st_centroid()* on the sf object: **us.bound**. We need the coordinates in a separate data frame for this to work. To do this we will use a mapping function. The mapping function applies a given function to each element of a vector and returns a vector of the same length. Our input vector will be the geometry column of us.bound. Our function will be *st_centroid()*. We will be using map_dbl variation of map from the purrr package. For more documentation, check out map documentation\n\nTo get our longitude values we map the *st_centroid()* function over the geometry column of us.bound and access the longitude value through double bracket notation \\[\\[\\]\\] and 1. This allows us to get only the longitude, which is the first value in each centroid.\n\n::: panel-tabset\n\n### Pre\n\n::: {.cell}\n\n```{.r .cell-code}\nlongitude1 <- map_dbl(Pre$geometry, ~st_centroid(.x)[[1]])\n```\n:::\n\n\nWe do the same for latitude with one key difference. We access the second value per each centroid with \\[\\[2\\]\\].\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlatitude1 <- map_dbl(Pre$geometry, ~st_centroid(.x)[[2]])\n```\n:::\n\n\nNow that we have latitude and longitude, we use cbind to put longitude and latitude into the same object.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncoords1 <- cbind(longitude1, latitude1)\n```\n:::\n\n\n### Cov\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlongitude2 <- map_dbl(Cov$geometry, ~st_centroid(.x)[[1]])\n```\n:::\n\n\nWe do the same for latitude with one key difference. We access the second value per each centroid with \\[\\[2\\]\\].\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlatitude2 <- map_dbl(Cov$geometry, ~st_centroid(.x)[[2]])\n```\n:::\n\n\nNow that we have latitude and longitude, we use cbind to put longitude and latitude into the same object.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncoords2 <- cbind(longitude2, latitude2)\n```\n:::\n\n### Post\n\n::: {.cell}\n\n```{.r .cell-code}\nlongitude3 <- map_dbl(Post$geometry, ~st_centroid(.x)[[1]])\n```\n:::\n\n\nWe do the same for latitude with one key difference. We access the second value per each centroid with \\[\\[2\\]\\].\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlatitude3 <- map_dbl(Post$geometry, ~st_centroid(.x)[[2]])\n```\n:::\n\n\nNow that we have latitude and longitude, we use cbind to put longitude and latitude into the same object.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncoords3 <- cbind(longitude3, latitude3)\n```\n:::\n\n:::\n#### Determine the cut-off distance\n\nFirstly, we need to determine the upper limit for distance band by using the steps below:\n\n-   Return a matrix with the indices of points belonging to the set of the k nearest neighbours of each other by using [*knearneigh()*](https://r-spatial.github.io/spdep/reference/knearneigh.html) of **spdep**.\n\n-   Convert the knn object returned by *knearneigh()* into a neighbours list of class nb with a list of integer vectors containing neighbour region number ids by using [*knn2nb()*](https://r-spatial.github.io/spdep/reference/knn2nb.html).\n\n-   Return the length of neighbour relationship edges by using [*nbdists()*](https://r-spatial.github.io/spdep/reference/nbdists.html) of **spdep**. The function returns in the units of the coordinates if the coordinates are projected, in km otherwise.\n\n-   Remove the list structure of the returned object by using [**unlist()**](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/unlist).\n\n::: panel-tabset\n\n### Pre\n\n::: {.cell}\n\n```{.r .cell-code}\nk1pre <- knn2nb(knearneigh(coords1))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in knn2nb(knearneigh(coords1)): neighbour object has 18 sub-graphs\n```\n\n\n:::\n\n```{.r .cell-code}\nk1distspre <- unlist(nbdists(k1pre, coords1, longlat = TRUE))\nsummary(k1distspre)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  21.55   52.52   69.06   66.79   77.42  124.72 \n```\n\n\n:::\n:::\n\n### Cov\n\n::: {.cell}\n\n```{.r .cell-code}\nk1cov <- knn2nb(knearneigh(coords2))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in knn2nb(knearneigh(coords2)): neighbour object has 18 sub-graphs\n```\n\n\n:::\n\n```{.r .cell-code}\nk1distscov <- unlist(nbdists(k1cov, coords2, longlat = TRUE))\nsummary(k1distscov)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  21.55   52.52   69.06   66.79   77.42  124.72 \n```\n\n\n:::\n:::\n\n### Post\n\n::: {.cell}\n\n```{.r .cell-code}\nk1post <- knn2nb(knearneigh(coords3))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in knn2nb(knearneigh(coords3)): neighbour object has 18 sub-graphs\n```\n\n\n:::\n\n```{.r .cell-code}\nk1distspost <- unlist(nbdists(k1post, coords3, longlat = TRUE))\nsummary(k1distspost)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  21.55   52.52   69.06   66.79   77.42  124.72 \n```\n\n\n:::\n:::\n\n:::\nThe summary report shows that the largest first nearest neighbour distance is 53 km, so using this as the upper threshold gives certainty that all units will have at least one neighbour.\n\n#### Computing fixed distance weight matrix\n\nNow, we will compute the distance weight matrix by using [*dnearneigh()*](https://r-spatial.github.io/spdep/reference/dnearneigh.html) as shown in the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwm_d53 <- dnearneigh(coords1, 0, 53, longlat = TRUE)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in dnearneigh(coords1, 0, 53, longlat = TRUE): neighbour object has 55\nsub-graphs\n```\n\n\n:::\n\n```{.r .cell-code}\nwm_d53\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nNeighbour list object:\nNumber of regions: 69 \nNumber of nonzero links: 40 \nPercentage nonzero weights: 0.8401596 \nAverage number of links: 0.5797101 \n51 regions with no links:\n9, 10, 11, 12, 14, 15, 16, 17, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29,\n30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\n48, 50, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 67, 68, 69\n55 disjoint connected subgraphs\n```\n\n\n:::\n:::\n\n\nNext, *nb2listw()* is used to convert the nb object into spatial weights object.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwm53_lw <- nb2listw(wm_d53, style = 'B', zero.policy = TRUE)\nsummary(wm53_lw)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 69 \nNumber of nonzero links: 40 \nPercentage nonzero weights: 0.8401596 \nAverage number of links: 0.5797101 \n51 regions with no links:\n9, 10, 11, 12, 14, 15, 16, 17, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29,\n30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\n48, 50, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 67, 68, 69\n55 disjoint connected subgraphs\nLink number distribution:\n\n 0  1  2  3  4  6 \n51  9  2  3  3  1 \n9 least connected regions:\n7 8 13 18 20 49 51 65 66 with 1 link\n1 most connected region:\n3 with 6 links\n\nWeights style: B \nWeights constants summary:\n   n  nn S0 S1  S2\nB 18 324 40 80 512\n```\n\n\n:::\n:::\n\n\nThe output spatial weights object is called `wm53_lw`.\n\n### **Computing adaptive distance weight matrix**\n\nOne of the characteristics of fixed distance weight matrix is that more densely settled areas (usually the urban areas) tend to have more neighbours and the less densely settled areas (usually the rural counties) tend to have lesser neighbours. Having many neighbours smoothes the neighbour relationship across more neighbours.\n\nIt is possible to control the numbers of neighbours directly using k-nearest neighbours, either accepting asymmetric neighbours or imposing symmetry as shown in the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nknn <- knn2nb(knearneigh(coords1, k=8))\nknn\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nNeighbour list object:\nNumber of regions: 69 \nNumber of nonzero links: 552 \nPercentage nonzero weights: 11.5942 \nAverage number of links: 8 \nNon-symmetric neighbours list\n```\n\n\n:::\n:::\n\n\nNext, *nb2listw()* is used to convert the nb object into spatial weights object.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nknn_lw <- nb2listw(knn, style = 'B')\nsummary(knn_lw)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 69 \nNumber of nonzero links: 552 \nPercentage nonzero weights: 11.5942 \nAverage number of links: 8 \nNon-symmetric neighbours list\nLink number distribution:\n\n 8 \n69 \n69 least connected regions:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 with 8 links\n69 most connected regions:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 with 8 links\n\nWeights style: B \nWeights constants summary:\n   n   nn  S0  S1    S2\nB 69 4761 552 972 18472\n```\n\n\n:::\n:::\n\n\n## **Computing Gi statistics**\n\n### **Gi statistics using fixed distance**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfips11 <- order(Pre$province_eng)\ngi.fixedPre <- localG(Pre$value, wm53_lw)\ngi.fixedCov <- localG(Cov$value, wm53_lw)\ngi.fixedPost <- localG(Post$value, wm53_lw)\ngi.fixedPre\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] -0.5383191  4.1164474  2.7512490  3.5470555 -0.4026612 -0.3357902\n [7] -0.2457078 -0.1969911        NaN        NaN        NaN        NaN\n[13] -0.2030295        NaN        NaN        NaN        NaN -0.2498655\n[19]        NaN -0.2470666        NaN        NaN        NaN        NaN\n[25]        NaN        NaN        NaN        NaN        NaN        NaN\n[31]        NaN        NaN        NaN        NaN        NaN        NaN\n[37]        NaN        NaN        NaN        NaN        NaN        NaN\n[43]        NaN        NaN        NaN        NaN        NaN        NaN\n[49] -0.2303579        NaN -0.2451642 -0.3228881  3.4844781 -0.3246697\n[55]        NaN        NaN        NaN        NaN        NaN        NaN\n[61]        NaN        NaN        NaN        NaN -0.2273087 -0.1836100\n[67]        NaN        NaN        NaN\nattr(,\"internals\")\n                Gi      E(Gi)       V(Gi)      Z(Gi) Pr(z != E(Gi))\n [1,] 0.0134300865 0.05882353 0.007110607 -0.5383191   5.903568e-01\n [2,] 0.4533721254 0.04411765 0.009884205  4.1164474   3.847571e-05\n [3,] 0.4656350137 0.08823529 0.018816696  2.7512490   5.936851e-03\n [4,] 0.4622451444 0.05882353 0.012935474  3.5470555   3.895625e-04\n [5,] 0.0038712756 0.04411765 0.009990196 -0.4026612   6.871975e-01\n [6,] 0.0108224952 0.04411765 0.009831639 -0.3357902   7.370291e-01\n [7,] 0.0004259691 0.01470588 0.003377640 -0.2457078   8.059085e-01\n [8,] 0.0032270112 0.01470588 0.003395512 -0.1969911   8.438345e-01\n [9,] 0.0000000000 0.00000000 0.000000000        NaN            NaN\n[10,] 0.0000000000 0.00000000 0.000000000        NaN            NaN\n[11,] 0.0000000000 0.00000000 0.000000000        NaN            NaN\n[12,] 0.0000000000 0.00000000 0.000000000        NaN            NaN\n[13,] 0.0028707049 0.01470588 0.003398063 -0.2030295   8.391120e-01\n[14,] 0.0000000000 0.00000000 0.000000000        NaN            NaN\n[15,] 0.0000000000 0.00000000 0.000000000        NaN            NaN\n[16,] 0.0000000000 0.00000000 0.000000000        NaN            NaN\n[17,] 0.0000000000 0.00000000 0.000000000        NaN            NaN\n[18,] 0.0001846243 0.01470588 0.003377504 -0.2498655   8.026914e-01\n[19,] 0.0000000000 0.00000000 0.000000000        NaN            NaN\n[20,] 0.0003498075 0.01470588 0.003376318 -0.2470666   8.048567e-01\n[21,] 0.0000000000 0.00000000 0.000000000        NaN            NaN\n[22,] 0.0000000000 0.00000000 0.000000000        NaN            NaN\n[23,] 0.0000000000 0.00000000 0.000000000        NaN            NaN\n[24,] 0.0000000000 0.00000000 0.000000000        NaN            NaN\n[25,] 0.0000000000 0.00000000 0.000000000        NaN            NaN\n[26,] 0.0000000000 0.00000000 0.000000000        NaN            NaN\n[27,] 0.0000000000 0.00000000 0.000000000        NaN            NaN\n[28,] 0.0000000000 0.00000000 0.000000000        NaN            NaN\n[29,] 0.0000000000 0.00000000 0.000000000        NaN            NaN\n[30,] 0.0000000000 0.00000000 0.000000000        NaN            NaN\n[31,] 0.0000000000 0.00000000 0.000000000        NaN            NaN\n[32,] 0.0000000000 0.00000000 0.000000000        NaN            NaN\n[33,] 0.0000000000 0.00000000 0.000000000        NaN            NaN\n[34,] 0.0000000000 0.00000000 0.000000000        NaN            NaN\n[35,] 0.0000000000 0.00000000 0.000000000        NaN            NaN\n[36,] 0.0000000000 0.00000000 0.000000000        NaN            NaN\n[37,] 0.0000000000 0.00000000 0.000000000        NaN            NaN\n[38,] 0.0000000000 0.00000000 0.000000000        NaN            NaN\n[39,] 0.0000000000 0.00000000 0.000000000        NaN            NaN\n[40,] 0.0000000000 0.00000000 0.000000000        NaN            NaN\n[41,] 0.0000000000 0.00000000 0.000000000        NaN            NaN\n[42,] 0.0000000000 0.00000000 0.000000000        NaN            NaN\n[43,] 0.0000000000 0.00000000 0.000000000        NaN            NaN\n[44,] 0.0000000000 0.00000000 0.000000000        NaN            NaN\n[45,] 0.0000000000 0.00000000 0.000000000        NaN            NaN\n[46,] 0.0000000000 0.00000000 0.000000000        NaN            NaN\n[47,] 0.0000000000 0.00000000 0.000000000        NaN            NaN\n[48,] 0.0000000000 0.00000000 0.000000000        NaN            NaN\n[49,] 0.0012969999 0.01470588 0.003388277 -0.2303579   8.178137e-01\n[50,] 0.0000000000 0.00000000 0.000000000        NaN            NaN\n[51,] 0.0004268373 0.01470588 0.003392222 -0.2451642   8.063293e-01\n[52,] 0.0030097515 0.02941176 0.006686057 -0.3228881   7.467800e-01\n[53,] 0.4549547881 0.05882353 0.012924172  3.4844781   4.930977e-04\n[54,] 0.0029008502 0.02941176 0.006667545 -0.3246697   7.454311e-01\n[55,] 0.0000000000 0.00000000 0.000000000        NaN            NaN\n[56,] 0.0000000000 0.00000000 0.000000000        NaN            NaN\n[57,] 0.0000000000 0.00000000 0.000000000        NaN            NaN\n[58,] 0.0000000000 0.00000000 0.000000000        NaN            NaN\n[59,] 0.0000000000 0.00000000 0.000000000        NaN            NaN\n[60,] 0.0000000000 0.00000000 0.000000000        NaN            NaN\n[61,] 0.0000000000 0.00000000 0.000000000        NaN            NaN\n[62,] 0.0000000000 0.00000000 0.000000000        NaN            NaN\n[63,] 0.0000000000 0.00000000 0.000000000        NaN            NaN\n[64,] 0.0000000000 0.00000000 0.000000000        NaN            NaN\n[65,] 0.0014442532 0.01470588 0.003403780 -0.2273087   8.201837e-01\n[66,] 0.0040228143 0.01470588 0.003385316 -0.1836100   8.543194e-01\n[67,] 0.0000000000 0.00000000 0.000000000        NaN            NaN\n[68,] 0.0000000000 0.00000000 0.000000000        NaN            NaN\n[69,] 0.0000000000 0.00000000 0.000000000        NaN            NaN\nattr(,\"cluster\")\n [1] High Low  Low  Low  Low  Low  Low  Low  High Low  Low  Low  Low  Low  Low \n[16] Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low \n[31] Low  High Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low \n[46] Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  High Low  High High High\n[61] Low  Low  High Low  Low  Low  Low  Low  Low \nLevels: Low High\nattr(,\"gstari\")\n[1] FALSE\nattr(,\"call\")\nlocalG(x = Pre$value, listw = wm53_lw)\nattr(,\"class\")\n[1] \"localG\"\n```\n\n\n:::\n\n```{.r .cell-code}\ngi.fixedCov\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] -0.7831494  3.9662495  2.5997761  3.4296475 -0.5061695 -0.3734480\n [7] -0.3134612 -0.2021130        NaN        NaN        NaN        NaN\n[13] -0.2351705        NaN        NaN        NaN        NaN -0.3219900\n[19]        NaN -0.3182126        NaN        NaN        NaN        NaN\n[25]        NaN        NaN        NaN        NaN        NaN        NaN\n[31]        NaN        NaN        NaN        NaN        NaN        NaN\n[37]        NaN        NaN        NaN        NaN        NaN        NaN\n[43]        NaN        NaN        NaN        NaN        NaN        NaN\n[49] -0.2651373        NaN -0.3121159 -0.4106284  3.3484888 -0.3980288\n[55]        NaN        NaN        NaN        NaN        NaN        NaN\n[61]        NaN        NaN        NaN        NaN -0.2843408 -0.2007843\n[67]        NaN        NaN        NaN\nattr(,\"internals\")\n                Gi      E(Gi)       V(Gi)      Z(Gi) Pr(z != E(Gi))\n [1,] 0.0126827193 0.05882353 0.003471212 -0.7831494   4.335394e-01\n [2,] 0.3461358221 0.04411765 0.005798372  3.9662495   7.301244e-05\n [3,] 0.3615873786 0.08823529 0.011055360  2.5997761   9.328460e-03\n [4,] 0.3576247499 0.05882353 0.007590419  3.4296475   6.043657e-04\n [5,] 0.0052611336 0.04411765 0.005892990 -0.5061695   6.127377e-01\n [6,] 0.0157511317 0.04411765 0.005769679 -0.3734480   7.088150e-01\n [7,] 0.0007502329 0.01470588 0.001982131 -0.3134612   7.539303e-01\n [8,] 0.0056733977 0.01470588 0.001997220 -0.2021130   8.398284e-01\n [9,] 0.0000000000 0.00000000 0.000000000        NaN            NaN\n[10,] 0.0000000000 0.00000000 0.000000000        NaN            NaN\n[11,] 0.0000000000 0.00000000 0.000000000        NaN            NaN\n[12,] 0.0000000000 0.00000000 0.000000000        NaN            NaN\n[13,] 0.0041791200 0.01470588 0.002003659 -0.2351705   8.140764e-01\n[14,] 0.0000000000 0.00000000 0.000000000        NaN            NaN\n[15,] 0.0000000000 0.00000000 0.000000000        NaN            NaN\n[16,] 0.0000000000 0.00000000 0.000000000        NaN            NaN\n[17,] 0.0000000000 0.00000000 0.000000000        NaN            NaN\n[18,] 0.0003728076 0.01470588 0.001981499 -0.3219900   7.474602e-01\n[19,] 0.0000000000 0.00000000 0.000000000        NaN            NaN\n[20,] 0.0005436309 0.01470588 0.001980750 -0.3182126   7.503236e-01\n[21,] 0.0000000000 0.00000000 0.000000000        NaN            NaN\n[22,] 0.0000000000 0.00000000 0.000000000        NaN            NaN\n[23,] 0.0000000000 0.00000000 0.000000000        NaN            NaN\n[24,] 0.0000000000 0.00000000 0.000000000        NaN            NaN\n[25,] 0.0000000000 0.00000000 0.000000000        NaN            NaN\n[26,] 0.0000000000 0.00000000 0.000000000        NaN            NaN\n[27,] 0.0000000000 0.00000000 0.000000000        NaN            NaN\n[28,] 0.0000000000 0.00000000 0.000000000        NaN            NaN\n[29,] 0.0000000000 0.00000000 0.000000000        NaN            NaN\n[30,] 0.0000000000 0.00000000 0.000000000        NaN            NaN\n[31,] 0.0000000000 0.00000000 0.000000000        NaN            NaN\n[32,] 0.0000000000 0.00000000 0.000000000        NaN            NaN\n[33,] 0.0000000000 0.00000000 0.000000000        NaN            NaN\n[34,] 0.0000000000 0.00000000 0.000000000        NaN            NaN\n[35,] 0.0000000000 0.00000000 0.000000000        NaN            NaN\n[36,] 0.0000000000 0.00000000 0.000000000        NaN            NaN\n[37,] 0.0000000000 0.00000000 0.000000000        NaN            NaN\n[38,] 0.0000000000 0.00000000 0.000000000        NaN            NaN\n[39,] 0.0000000000 0.00000000 0.000000000        NaN            NaN\n[40,] 0.0000000000 0.00000000 0.000000000        NaN            NaN\n[41,] 0.0000000000 0.00000000 0.000000000        NaN            NaN\n[42,] 0.0000000000 0.00000000 0.000000000        NaN            NaN\n[43,] 0.0000000000 0.00000000 0.000000000        NaN            NaN\n[44,] 0.0000000000 0.00000000 0.000000000        NaN            NaN\n[45,] 0.0000000000 0.00000000 0.000000000        NaN            NaN\n[46,] 0.0000000000 0.00000000 0.000000000        NaN            NaN\n[47,] 0.0000000000 0.00000000 0.000000000        NaN            NaN\n[48,] 0.0000000000 0.00000000 0.000000000        NaN            NaN\n[49,] 0.0028643368 0.01470588 0.001994689 -0.2651373   7.909037e-01\n[50,] 0.0000000000 0.00000000 0.000000000        NaN            NaN\n[51,] 0.0007530601 0.01470588 0.001998446 -0.3121159   7.549525e-01\n[52,] 0.0036655606 0.02941176 0.003931229 -0.4106284   6.813450e-01\n[53,] 0.3502959777 0.05882353 0.007577000  3.3484888   8.125356e-04\n[54,] 0.0044794304 0.02941176 0.003923711 -0.3980288   6.906090e-01\n[55,] 0.0000000000 0.00000000 0.000000000        NaN            NaN\n[56,] 0.0000000000 0.00000000 0.000000000        NaN            NaN\n[57,] 0.0000000000 0.00000000 0.000000000        NaN            NaN\n[58,] 0.0000000000 0.00000000 0.000000000        NaN            NaN\n[59,] 0.0000000000 0.00000000 0.000000000        NaN            NaN\n[60,] 0.0000000000 0.00000000 0.000000000        NaN            NaN\n[61,] 0.0000000000 0.00000000 0.000000000        NaN            NaN\n[62,] 0.0000000000 0.00000000 0.000000000        NaN            NaN\n[63,] 0.0000000000 0.00000000 0.000000000        NaN            NaN\n[64,] 0.0000000000 0.00000000 0.000000000        NaN            NaN\n[65,] 0.0019768783 0.01470588 0.002004059 -0.2843408   7.761492e-01\n[66,] 0.0057541569 0.01470588 0.001987714 -0.2007843   8.408672e-01\n[67,] 0.0000000000 0.00000000 0.000000000        NaN            NaN\n[68,] 0.0000000000 0.00000000 0.000000000        NaN            NaN\n[69,] 0.0000000000 0.00000000 0.000000000        NaN            NaN\nattr(,\"cluster\")\n [1] High Low  Low  Low  Low  Low  Low  Low  High Low  Low  Low  Low  Low  High\n[16] Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low \n[31] Low  High Low  Low  Low  Low  Low  Low  High Low  Low  Low  Low  Low  Low \n[46] Low  Low  Low  Low  High Low  Low  Low  Low  High High Low  High High High\n[61] Low  Low  High Low  Low  Low  Low  Low  Low \nLevels: Low High\nattr(,\"gstari\")\n[1] FALSE\nattr(,\"call\")\nlocalG(x = Cov$value, listw = wm53_lw)\nattr(,\"class\")\n[1] \"localG\"\n```\n\n\n:::\n\n```{.r .cell-code}\ngi.fixedPost\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] -0.5470651  3.8342209  2.5427341  3.3295534 -0.4377064 -0.3122170\n [7] -0.2781334 -0.2257914        NaN        NaN        NaN        NaN\n[13] -0.1731786        NaN        NaN        NaN        NaN -0.2870364\n[19]        NaN -0.2837764        NaN        NaN        NaN        NaN\n[25]        NaN        NaN        NaN        NaN        NaN        NaN\n[31]        NaN        NaN        NaN        NaN        NaN        NaN\n[37]        NaN        NaN        NaN        NaN        NaN        NaN\n[43]        NaN        NaN        NaN        NaN        NaN        NaN\n[49] -0.2028662        NaN -0.2768808 -0.3583855  3.2567634 -0.3761799\n[55]        NaN        NaN        NaN        NaN        NaN        NaN\n[61]        NaN        NaN        NaN        NaN -0.2761819 -0.2227700\n[67]        NaN        NaN        NaN\nattr(,\"internals\")\n                Gi      E(Gi)       V(Gi)      Z(Gi) Pr(z != E(Gi))\n [1,] 0.0148644117 0.05882353 0.006456838 -0.5470651   0.5843340083\n [2,] 0.3750482011 0.04411765 0.007449369  3.8342209   0.0001259629\n [3,] 0.3912961210 0.08823529 0.014205539  2.5427341   0.0109988895\n [4,] 0.3876400776 0.05882353 0.009752936  3.3295534   0.0008698540\n [5,] 0.0060049301 0.04411765 0.007581829 -0.4377064   0.6615991062\n [6,] 0.0172480170 0.04411765 0.007406455 -0.3122170   0.7548756480\n [7,] 0.0006745191 0.01470588 0.002545033 -0.2781334   0.7809099559\n [8,] 0.0032515139 0.01470588 0.002573521 -0.2257914   0.8213636912\n [9,] 0.0000000000 0.00000000 0.000000000        NaN            NaN\n[10,] 0.0000000000 0.00000000 0.000000000        NaN            NaN\n[11,] 0.0000000000 0.00000000 0.000000000        NaN            NaN\n[12,] 0.0000000000 0.00000000 0.000000000        NaN            NaN\n[13,] 0.0059456728 0.01470588 0.002558825 -0.1731786   0.8625110470\n[14,] 0.0000000000 0.00000000 0.000000000        NaN            NaN\n[15,] 0.0000000000 0.00000000 0.000000000        NaN            NaN\n[16,] 0.0000000000 0.00000000 0.000000000        NaN            NaN\n[17,] 0.0000000000 0.00000000 0.000000000        NaN            NaN\n[18,] 0.0002304285 0.01470588 0.002543258 -0.2870364   0.7740844499\n[19,] 0.0000000000 0.00000000 0.000000000        NaN            NaN\n[20,] 0.0003974224 0.01470588 0.002542338 -0.2837764   0.7765817474\n[21,] 0.0000000000 0.00000000 0.000000000        NaN            NaN\n[22,] 0.0000000000 0.00000000 0.000000000        NaN            NaN\n[23,] 0.0000000000 0.00000000 0.000000000        NaN            NaN\n[24,] 0.0000000000 0.00000000 0.000000000        NaN            NaN\n[25,] 0.0000000000 0.00000000 0.000000000        NaN            NaN\n[26,] 0.0000000000 0.00000000 0.000000000        NaN            NaN\n[27,] 0.0000000000 0.00000000 0.000000000        NaN            NaN\n[28,] 0.0000000000 0.00000000 0.000000000        NaN            NaN\n[29,] 0.0000000000 0.00000000 0.000000000        NaN            NaN\n[30,] 0.0000000000 0.00000000 0.000000000        NaN            NaN\n[31,] 0.0000000000 0.00000000 0.000000000        NaN            NaN\n[32,] 0.0000000000 0.00000000 0.000000000        NaN            NaN\n[33,] 0.0000000000 0.00000000 0.000000000        NaN            NaN\n[34,] 0.0000000000 0.00000000 0.000000000        NaN            NaN\n[35,] 0.0000000000 0.00000000 0.000000000        NaN            NaN\n[36,] 0.0000000000 0.00000000 0.000000000        NaN            NaN\n[37,] 0.0000000000 0.00000000 0.000000000        NaN            NaN\n[38,] 0.0000000000 0.00000000 0.000000000        NaN            NaN\n[39,] 0.0000000000 0.00000000 0.000000000        NaN            NaN\n[40,] 0.0000000000 0.00000000 0.000000000        NaN            NaN\n[41,] 0.0000000000 0.00000000 0.000000000        NaN            NaN\n[42,] 0.0000000000 0.00000000 0.000000000        NaN            NaN\n[43,] 0.0000000000 0.00000000 0.000000000        NaN            NaN\n[44,] 0.0000000000 0.00000000 0.000000000        NaN            NaN\n[45,] 0.0000000000 0.00000000 0.000000000        NaN            NaN\n[46,] 0.0000000000 0.00000000 0.000000000        NaN            NaN\n[47,] 0.0000000000 0.00000000 0.000000000        NaN            NaN\n[48,] 0.0000000000 0.00000000 0.000000000        NaN            NaN\n[49,] 0.0044586917 0.01470588 0.002551468 -0.2028662   0.8392395771\n[50,] 0.0000000000 0.00000000 0.000000000        NaN            NaN\n[51,] 0.0006772503 0.01470588 0.002567113 -0.2768808   0.7818716470\n[52,] 0.0039571089 0.02941176 0.005044680 -0.3583855   0.7200548514\n[53,] 0.3799951396 0.05882353 0.009725275  3.2567634   0.0011269032\n[54,] 0.0026675706 0.02941176 0.005054380 -0.3761799   0.7067831587\n[55,] 0.0000000000 0.00000000 0.000000000        NaN            NaN\n[56,] 0.0000000000 0.00000000 0.000000000        NaN            NaN\n[57,] 0.0000000000 0.00000000 0.000000000        NaN            NaN\n[58,] 0.0000000000 0.00000000 0.000000000        NaN            NaN\n[59,] 0.0000000000 0.00000000 0.000000000        NaN            NaN\n[60,] 0.0000000000 0.00000000 0.000000000        NaN            NaN\n[61,] 0.0000000000 0.00000000 0.000000000        NaN            NaN\n[62,] 0.0000000000 0.00000000 0.000000000        NaN            NaN\n[63,] 0.0000000000 0.00000000 0.000000000        NaN            NaN\n[64,] 0.0000000000 0.00000000 0.000000000        NaN            NaN\n[65,] 0.0007317949 0.01470588 0.002560097 -0.2761819   0.7824083619\n[66,] 0.0034673922 0.01470588 0.002545086 -0.2227700   0.8237145099\n[67,] 0.0000000000 0.00000000 0.000000000        NaN            NaN\n[68,] 0.0000000000 0.00000000 0.000000000        NaN            NaN\n[69,] 0.0000000000 0.00000000 0.000000000        NaN            NaN\nattr(,\"cluster\")\n [1] High Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low \n[16] Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low \n[31] Low  High Low  Low  Low  Low  Low  Low  High Low  Low  Low  Low  Low  Low \n[46] Low  Low  Low  Low  High Low  Low  Low  Low  High High Low  High High High\n[61] Low  Low  High Low  Low  Low  Low  Low  Low \nLevels: Low High\nattr(,\"gstari\")\n[1] FALSE\nattr(,\"call\")\nlocalG(x = Post$value, listw = wm53_lw)\nattr(,\"class\")\n[1] \"localG\"\n```\n\n\n:::\n:::\n\n\nThe output of localG() is a vector of G or Gstar values, with attributes “gstari” set to TRUE or FALSE, “call” set to the function call, and class “localG”.\n\nThe Gi statistics is represented as a Z-score. Greater values represent a greater intensity of clustering and the direction (positive or negative) indicates high or low clusters.\n\nNext, we will join the Gi values to their corresponding tourist sf data frame by using the code chunk below.\n\n::: panel-tabset\n\n### Pre\n\n::: {.cell}\n\n```{.r .cell-code}\nPre.gi <- cbind(Pre, as.matrix(gi.fixedPre)) %>%\n  rename(gstat_fixed = as.matrix.gi.fixedPre.)\n```\n:::\n\n### Cov\n\n::: {.cell}\n\n```{.r .cell-code}\nCov.gi <- cbind(Cov, as.matrix(gi.fixedCov)) %>%\n  rename(gstat_fixed = as.matrix.gi.fixedCov.)\n```\n:::\n\n### Post\n\n::: {.cell}\n\n```{.r .cell-code}\nPost.gi <- cbind(Post, as.matrix(gi.fixedPost)) %>%\n  rename(gstat_fixed = as.matrix.gi.fixedPost.)\n```\n:::\n\n:::\nIn fact, the code chunk above performs three tasks. First, it convert the output vector (i.e. *gi.fixed*) into r matrix object by using *as.matrix()*. Next, *cbind()* is used to join data and *gi.fixed* matrix to produce a new SpatialPolygonDataFrame called *pre/cov/pre.gi*. Lastly, the field name of the gi values is renamed to *gstat_fixed* by using *rename()*.\n\n### **Mapping Gi values with fixed distance weights**\n\nThe code chunk below shows the functions used to map the Gi values derived using fixed distance weight matrix.\n\n::: panel-tabset\n\n### Pre\n\n::: {.cell}\n\n```{.r .cell-code}\nRevenuePre <- qtm(Pre, \"value\")\n\nGimap1 <-tm_shape(Pre.gi) +\n  tm_fill(col = \"gstat_fixed\", \n          style = \"pretty\",\n          palette=\"-RdBu\",\n          title = \"local Gi\") +\n  tm_borders(alpha = 0.5)\n\ntmap_arrange(RevenuePre, Gimap1, asp=1, ncol=2)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nSome legend labels were too wide. These labels have been resized to 0.64. Increase legend.width (argument of tm_layout) to make the legend wider and therefore the labels larger.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nVariable(s) \"gstat_fixed\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](Take-Home_Exercise02_files/figure-html/unnamed-chunk-234-1.png){width=672}\n:::\n:::\n\n\n### Cov\n\n::: {.cell}\n\n```{.r .cell-code}\nRevenueCov <- qtm(Cov, \"value\")\n\nGimap2 <-tm_shape(Cov.gi) +\n  tm_fill(col = \"gstat_fixed\", \n          style = \"pretty\",\n          palette=\"-RdBu\",\n          title = \"local Gi\") +\n  tm_borders(alpha = 0.5)\n\ntmap_arrange(RevenueCov, Gimap2, asp=1, ncol=2)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nVariable(s) \"gstat_fixed\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](Take-Home_Exercise02_files/figure-html/unnamed-chunk-235-1.png){width=672}\n:::\n:::\n\n\n### Post\n\n::: {.cell}\n\n```{.r .cell-code}\nRevenuePost <- qtm(Post, \"value\")\n\nGimap3 <-tm_shape(Post.gi) +\n  tm_fill(col = \"gstat_fixed\", \n          style = \"pretty\",\n          palette=\"-RdBu\",\n          title = \"local Gi\") +\n  tm_borders(alpha = 0.5)\n\ntmap_arrange(RevenuePost, Gimap3, asp=1, ncol=2)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nVariable(s) \"gstat_fixed\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](Take-Home_Exercise02_files/figure-html/unnamed-chunk-236-1.png){width=672}\n:::\n:::\n\n:::\n### **Gi statistics using adaptive distance**\n\n::: panel-tabset\n\n### Pre\n\n::: {.cell}\n\n```{.r .cell-code}\nfips1 <- order(Pre$province_eng)\ngi.adaptive1 <- localG(Pre$value, knn_lw)\nPre.gi1 <- cbind(Pre, as.matrix(gi.adaptive1)) %>%\n  rename(gstat_adaptive = as.matrix.gi.adaptive1.)\n```\n:::\n\n### Cov\n\n::: {.cell}\n\n```{.r .cell-code}\nfips2 <- order(Cov$province_eng)\ngi.adaptive2 <- localG(Cov$value, knn_lw)\nCov.gi2 <- cbind(Cov, as.matrix(gi.adaptive2)) %>%\n  rename(gstat_adaptive = as.matrix.gi.adaptive2.)\n```\n:::\n\n### Post\n\n::: {.cell}\n\n```{.r .cell-code}\nfips3 <- order(Post$province_eng)\ngi.adaptive3 <- localG(Post$value, knn_lw)\nPost.gi3 <- cbind(Post, as.matrix(gi.adaptive3)) %>%\n  rename(gstat_adaptive = as.matrix.gi.adaptive3.)\n```\n:::\n\n:::\n### **Mapping Gi values with adaptive distance weights**\n\nIt is time for us to visualise the locations of hot spot and cold spot areas. The choropleth mapping functions of **tmap** package will be used to map the Gi values.\n\nThe code chunk below shows the functions used to map the Gi values derived using fixed distance weight matrix.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nGimap1 <- tm_shape(Pre.gi1) + \n  tm_fill(col = \"gstat_adaptive\", \n          style = \"pretty\", \n          palette=\"-RdBu\", \n          title = \"local Gi\") + \n  tm_borders(alpha = 0.5)\n\nGimap2 <- tm_shape(Cov.gi2) + \n  tm_fill(col = \"gstat_adaptive\", \n          style = \"pretty\", \n          palette=\"-RdBu\", \n          title = \"local Gi\") + \n  tm_borders(alpha = 0.5)\n\nGimap3 <- tm_shape(Post.gi3) + \n  tm_fill(col = \"gstat_adaptive\", \n          style = \"pretty\", \n          palette=\"-RdBu\", \n          title = \"local Gi\") + \n  tm_borders(alpha = 0.5)\n\ntmap_arrange( \n             Gimap1,\n             Gimap2,\n             Gimap3,\n             asp=1, \n             ncol=3)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nVariable(s) \"gstat_adaptive\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\nVariable(s) \"gstat_adaptive\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\nVariable(s) \"gstat_adaptive\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](Take-Home_Exercise02_files/figure-html/unnamed-chunk-240-1.png){width=672}\n:::\n:::\n\n\n# Cold hot map Revenue\n\n\n::: {.cell}\n\n```{.r .cell-code}\nRevenueAll = revallRAW \nRevenueAll$YYYYMM = as.integer(format(RevenueAll$date, \"%Y%m\"))\nRevenueAll$Year = as.integer(format(RevenueAll$Year))  \nRevenueAll = RevenueAll %>%   \n  select(3, 7, 8, 10)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nRevenue_st <- spacetime(\n  .data = RevenueAll, \n  .geometry = admRAW, \n  .loc_col = \"province_eng\", \n  .time_col = \"YYYYMM\"\n  ) \n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nis_spacetime_cube(Revenue_st)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nRevenue_nb = Revenue_st %>%\n  activate(\"geometry\") %>%\n  mutate(nb = include_self(\n    st_contiguity(geometry)),\n    wt = st_inverse_distance(nb,\n                             geometry,\n                             scale = 1,\n                             alpha = 1),\n    .before = 1) %>%\n  set_nbs(\"nb\") %>%\n  set_wts(\"wt\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n! Polygon provided. Using point on surface.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: There were 3 warnings in `stopifnot()`.\nThe first warning was:\nℹ In argument: `nb = include_self(st_contiguity(geometry))`.\nCaused by warning in `spdep::poly2nb()`:\n! some observations have no neighbours;\nif this seems unexpected, try increasing the snap argument.\nℹ Run `dplyr::last_dplyr_warnings()` to see the 2 remaining warnings.\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#RevenueAll$YYYYMM <- as.numeric(as.character(RevenueAll$YYYYMM))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#gi_stars = Revenue_nb %>%\n # group_by(YYYYMM) %>%\n  #mutate(gi_star = local_gstar_perm(\n   # RevenueAll, nb, wt)) %>%\n  #tidyr::unnest(gi_star)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#ehsa = gi_stars %>%\n # group_by(province_eng) %>%\n  #summarise(mk = list(\n   # unclass(\n    #  Kendall::MannKendall(gi_star)))) %>%\n  #tidyr::unnest_wider(mk)\n#head(ehsa)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nehsa = emerging_hotspot_analysis(\n  x = Revenue_st,\n  .var = \"value\",\n  k = 1,\n  nsim = 99\n)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in spdep::poly2nb(geometry, queen = queen, ...): some observations have no neighbours;\nif this seems unexpected, try increasing the snap argument.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in spdep::poly2nb(geometry, queen = queen, ...): neighbour object has 2 sub-graphs;\nif this sub-graph count seems unexpected, try increasing the snap argument.\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = ehsa,\n       aes(x = classification))+\n  geom_bar()\n```\n\n::: {.cell-output-display}\n![](Take-Home_Exercise02_files/figure-html/unnamed-chunk-250-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nRevenue_ehsa = admRAW %>%\n  left_join(ehsa,\n            by = join_by(province_eng == location))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nehsa_sig = Revenue_ehsa %>%\n  filter(p_value < 0.05)\ntmap_mode(\"plot\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\ntmap mode set to plotting\n```\n\n\n:::\n\n```{.r .cell-code}\ntm_shape(Revenue_ehsa)+\n  tm_polygons()+\n  tm_borders(alpha = 0.5) +\ntm_shape(ehsa_sig) +\n  tm_fill(\"classification\")+\n  tm_borders(alpha = 0.4)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them).\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLegend labels were too wide. The labels have been resized to 0.52, 0.58, 0.61. Increase legend.width (argument of tm_layout) to make the legend wider and therefore the labels larger.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](Take-Home_Exercise02_files/figure-html/unnamed-chunk-252-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::",
    "supporting": [
      "Take-Home_Exercise02_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}