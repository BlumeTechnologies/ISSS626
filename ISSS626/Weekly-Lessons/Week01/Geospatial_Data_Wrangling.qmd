---
title: "Hands-On Exercise 01"
author: "Pelle Knegjes"
date: "Aug 26 2024"
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
  message: false
  freeze: true
---

Getting Started

Install and Launching R Packages

The code Chunk below uses p_load() of pacman package to check if tidyverse packages have been installed in the computer. If they are, then they will be launched into R.

```{r}
pacman::p_load(sf, tidyverse)
```

Importing polygon feature data in shapefile format

```{r}
mpsz = st_read(dsn = "data/geospatial/MasterPlan2014SubzoneBoundaryWebSHP", 
                  layer = "MP14_SUBZONE_WEB_PL")
```

Importing polyline feature data in shapefile form

```{r}
cyclingpath = st_read("data/geospatial/CyclingPath_Jul2024/CyclingPath_Jul2024", layer = "CyclingPathGazette")
```

Importing GIS data in kml format

```{r}
 preschool = st_read("data/geospatial/PreSchoolsLocation.kml")
```

Checking the Content of A Simple Feature Data Frame

Working with st_geometry()

```{r}
st_geometry(mpsz)
```

Working with glimpse()

```{r}
glimpse(mpsz)
```

Working with head()

```{r}
head(mpsz, n=5)
```

1.6 Plotting the Geospatial Data

```{r}
plot(st_geometry(mpsz))
```

```{r}
plot(mpsz["PLN_AREA_N"])
```

1.7 Working with Projection 1.7.1 Assigning EPSG code to a simple feature data frame

```{r}
st_crs(mpsz)
```

```{r}
mpsz3414 <- st_set_crs(mpsz, 3414)
```

```{r}
st_crs(mpsz3414)
```

1.7.2 Transforming the projection of preschool from wgs84 to svy21.

```{r}
preschool3414 <- st_transform(preschool, 
                              crs = 3414)
```

1.8 Importing and Converting An Aspatial Data 1.8.1 Importing the aspatial data

```{r}
listings <- read_csv("data/aspatial/listings.csv")
```

```{r}
list(listings) 
```

1.8.2 Creating a simple feature data frame from an aspatial data frame

```{r}
listings_sf <- st_as_sf(listings, 
                       coords = c("longitude", "latitude"),
                       crs=4326) %>%
  st_transform(crs = 3414)
```

```{r}
glimpse(listings_sf)
```

1.9 Geoprocessing with sf package

```{r}

```

1.9.1 Buffering The scenario:

The authority is planning to upgrade the exiting cycling path. To do so, they need to acquire 5 meters of reserved land on the both sides of the current cycling path. You are tasked to determine the extend of the land need to be acquired and their total area.

The solution:

Firstly, st_buffer() of sf package is used to compute the 5-meter buffers around cycling paths

```{r}
buffer_cycling <- st_buffer(cyclingpath, 
                               dist=5, nQuadSegs = 30)
```

This is followed by calculating the area of the buffers as shown in the code chunk below.

```{r}
buffer_cycling$AREA <- st_area(buffer_cycling)
```

Lastly, sum() of Base R will be used to derive the total land involved

```{r}
sum(buffer_cycling$AREA)
```

1.9.2 Point-in-polygon count The scenario:

A pre-school service group want to find out the numbers of pre-schools in each Planning Subzone.

The solution:

The code chunk below performs two operations at one go. Firstly, identify pre-schools located inside each Planning Subzone by using st_intersects(). Next, length() of Base R is used to calculate numbers of pre-schools that fall inside each planning subzone.

```{r}
mpsz3414$`PreSch Count`<- lengths(st_intersects(mpsz3414, preschool3414))
```

You can check the summary statistics of the newly derived PreSch Count field by using summary() as shown in the code chunk below.

```{r}
summary(mpsz3414$`PreSch Count`)
```

To list the planning subzone with the most number of pre-school, the top_n() of dplyr package is used as shown in the code chunk below.

```{r}
top_n(mpsz3414, 1, `PreSch Count`)
```

The solution:

Firstly, the code chunk below uses st_area() of sf package to derive the area of each planning subzone.

```{r}
mpsz3414$Area <- mpsz3414 %>%
  st_area()
```

```{r}
mpsz3414 <- mpsz3414 %>%
  mutate(`PreSch Density` = `PreSch Count`/Area * 1000000)
```

1.10 Exploratory Data Analysis (EDA)

In practice, many geospatial analytics start with Exploratory Data Analysis. In this section, you will learn how to use appropriate ggplot2 functions to create functional and yet truthful statistical graphs for EDA purposes.

Firstly, we will plot a histogram to reveal the distribution of PreSch Density. Conventionally, hist() of R Graphics will be used as shown in the code chunk below.

```{r}
hist(mpsz3414$`PreSch Density`)
```

Although the syntax is very easy to use however the output is far from meeting publication quality. Furthermore, the function has limited room for further customisation.

In the code chunk below, appropriate ggplot2 functions will be used.

```{r}
ggplot(data=mpsz3414, 
       aes(x= as.numeric(`PreSch Density`)))+
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue") +
  labs(title = "Are pre-school even distributed in Singapore?",
       subtitle= "There are many planning sub-zones with a single pre-school, on the other hand, \nthere are two planning sub-zones with at least 20 pre-schools",
      x = "Pre-school density (per km sq)",
      y = "Frequency")
```

The solution:

```{r}
ggplot(data=mpsz3414, 
       aes(y = `PreSch Count`, 
           x= as.numeric(`PreSch Density`)))+
  geom_point(color="black", 
             fill="light blue") +
  xlim(0, 40) +
  ylim(0, 40) +
  labs(title = "",
      x = "Pre-school density (per km sq)",
      y = "Pre-school count")
```
